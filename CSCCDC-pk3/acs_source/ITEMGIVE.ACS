//#library "ITEMGIVE"
//#import "WEPACS.acs"
//#include "zcommon.acs"
//#include "8BDMLIB.ACS"

#DEFINE MAX_WEPCLASS 12
#DEFINE CLASSLIST 12
#DEFINE MAX_ITEMS 13

str wep_check[CLASSLIST][2]=
{//Default 0
{"IsMegaMan", "CSCC_DefaultSpawn"},//1
{"IsCopy", "CSCC_Copy"},//2
{"IsGizmo", "CSCC_Gizmo"},//3
{"NONE", "CSCC_GizmoMorph"},//4
{"IsColdFusion", "CSCC_ColdFusion"},//5
{"NONE", "CSCC_ColdFusionMorph"},//6
{"IsUki", "CSCC_Ukiyama"},//7
{"NONE", "CSCC_UkiyamaMorph"},//8
{"IsCorporal", "CSCC_Corporal"},//9
{"NONE", "CSCC_CorporalMorph"},//10
{"IsKorby", "CSCC_Korby"}, //11
{"NONE", "CSCC_KorbyMorph"},//12
};



str item_pickups[MAX_ITEMS][MAX_WEPCLASS]= 
{//Default, MegaMan, , Copy, Gizmo, Gizmo Morph, Cold Fusion, CF Morph, Ukiyama, Uki Morph, Corporal, Corporal Morph, Korby, Korby Morph
{"NONE", "ProtoUpgrade", "NONE", "EternalClawsUpgrade", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE"},//0
{"NONE","ArrowBusterUpgrade", "NONE", "EternalClawsUpgrade", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE"},//1
{"NONE","LaserBusterUpgrade", "NONE", "EternalClawsUpgrade", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE"},//2
{"NONE","BassUpgrade", "NONE", "EternalClawsUpgrade", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE"},//3
{"NONE","DuoFistUpgrade", "NONE", "EternalClawsUpgrade", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE"},//4
{"NONE","AdaptorUpgrade", "NONE", "EternalClawsUpgrade", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE"},//5
{"NONE","TrebleBoostUpgrade", "NONE", "EternalClawsUpgrade", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE"},//6
{"ITEM1", "ITEM1", "ITEM1", "ITEMG", "ITEMG", "ITEM1", "ITEM1", "ITEM1", "ITEM1", "ITEM1", "ITEM1", "ITEM1"},//7
{"TangoSummon", "TangoSummon", "TangoSummon", "KittyHelper", "KittyHelper", "TangoSummon", "TangoSummon", "TangoSummon", "TangoSummon", "TangoSummon", "TangoSummon", "TangoSummon"},//8
{"NONE", "EDDIESUMMON", "EDDIESUMMON", "KittyItem", "KittyItem", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE"},//9
{"EDDIEBOMBER", "EDDIEBOMBER", "EDDIEBOMBER", "KittyHelper", "KittyHelper", "EDDIEBOMBER", "EDDIEBOMBER", "EDDIEBOMBER", "EDDIEBOMBER", "EDDIEBOMBER", "EDDIEBOMBER", "EDDIEBOMBER"},//10
{"REGGAECALL", "REGGAECALL", "REGGAECALL", "KittyHelper", "KittyHelper", "REGGAECALL", "REGGAECALL", "REGGAECALL", "REGGAECALL", "REGGAECALL", "REGGAECALL", "REGGAECALL"},//11
{"NONE", "Wtank", "WTank", "NONE", "NONE", "WTank", "WTank", "WTank", "WTank", "WTank", "WTank", "WTank"},//12

};

Script "CSCC_ItemSpriteSpawn" (void) ClientSide
{
int CapsuleSprite = CheckClassList(0);
if(CapsuleSprite == -1){CapsuleSprite = 999;}
SetSprite(0, CapsuleSprite);
}

Script "CSCC_ItemSprite" OPEN ClientSide
{
int CapsuleSprite = CheckClassList(0);
if(CapsuleSprite == -1){CapsuleSprite = 999;} //Fix since S/C don't like -1
int OldClass = CapsuleSprite;
SetSprite(995, CapsuleSprite);
While(CapsuleSprite == OldClass)
	{
	CapsuleSprite = CheckClassList(0);
	if(CapsuleSprite == -1){CapsuleSprite = 999;}
	Delay(3);
	}
restart;
}

Script "CSCC_ItemCheck" (int ItemSlot, int MaxItem)
{
int Class = CheckClassList(1)+1;
int Item = item_pickups[itemslot][class];
int ResultValue = TRUE;
If(StrIcmp(item_pickups[itemslot][class], "NONE")==0){ResultValue = FALSE;}
If(CheckActorInventory(ActivatorTID(), Item)>=MaxItem){ResultValue = FALSE;}
SetResultValue(ResultValue);
}
Script "CSCC_ItemToGive" (int ItemSlot, int Quantity) 
{
int Class = CheckClassList(1)+1;
int Item = item_pickups[itemslot][class];
GiveActorInventory(ActivatorTID(), Item, Quantity);
}

Function int CheckClassList (int Mode)
{
int UseSprite = -1;
Int PlrNum;
Switch(Mode)
	{
	Case 1:
	PlrNum = PlayerNumber();
	break;
	Default:
	PlrNum = ConsolePlayerNumber();
	break;
	}
for(int i = 0; i < MAX_WEPCLASS; i++)
	{
	If(CheckActorInventory(PlrNum+1000, wep_check[i][0]))
		{
		UseSprite = i;
		If(CheckActorInventory(PlrNum+1000, "MorphFlag")){UseSprite++;}
		}
	}
Return (UseSprite);
}

function void SetSprite (int ID,int SpriteUse)
{
Switch(SpriteUse)
	{
	Case 999:
	SetActorState(ID, "CSCC_OtherSpawn");
	break;
	Default:
	SetActorState(ID, wep_check[SpriteUse][1]);
	break;
	}
}