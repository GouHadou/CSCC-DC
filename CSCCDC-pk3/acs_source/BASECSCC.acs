#library "BASECSCC"
#import "WEPACS.acs"
 
#include "zcommon.acs"
#include "8BDMLIB.ACS"
#include "CSCCLIB.acs"
#include "CLASSACS.acs"
#include "COPY.ACS"
#include "UNIX.ACS"
#include "COPYWEP.ACS"
#include "ITEMGIVE.ACS"
 
Script "CSACS_TeamSpecies" ENTER 
{
int pln = PlayerNumber();
if(ACS_ExecuteWithResult(975,1)==1)
	{
	switch(GetPlayerInfo(PlayerNumber(), PLAYERINFO_TEAM))
		{
		Case 0:
		SetActorProperty(0,APROP_SPECIES,"LightMember");
		break;
		Case 1:
		SetActorProperty(0,APROP_SPECIES,"WilyMember");
		break;
		Case 2:
		SetActorProperty(0,APROP_SPECIES,"CossackMember");
		break;
		Case 3:
		SetActorProperty(0,APROP_SPECIES,"KingMember");
		break;
		}
	}
else{setactorproperty(0,APROP_SPECIES,StrParam(s:"Player_",i:pln));}

// Stores the players starting Jump Height on spawn
PlayerJumpZ[pln] = GetActorProperty(0, APROP_JumpZ);
}

script "CSACS_TSRespawn" RESPAWN
{
ACS_NamedExecuteAlways("CSACS_TeamSpecies",0);
}

Script "CSACS_ActorClassifier" (int TID, int CheckType)
{
bool output;

switch(CheckType)
	{
	case 0: if ((ClassifyActor(TID) & ACTOR_NONE)){output = true;} break;
	case 1: if ((ClassifyActor(TID) & ACTOR_WORLD)){output = true;} break;
	case 2: if ((ClassifyActor(TID) & ACTOR_PLAYER)){output = true;} break;
	case 3: if ((ClassifyActor(TID) & ACTOR_BOT)){output = true;} break;
	case 4: if ((ClassifyActor(TID) & ACTOR_VOODOODOLL)){output = true;} break;
	case 5: if ((ClassifyActor(TID) & ACTOR_MONSTER)){output = true;} break;
	case 6: if ((ClassifyActor(TID) & ACTOR_ALIVE)){output = true;} break;
	case 7: if ((ClassifyActor(TID) & ACTOR_DEAD)){output = true;} break;
	case 8: if ((ClassifyActor(TID) & ACTOR_MISSILE)){output = true;} break;
	case 9: if ((ClassifyActor(TID) & ACTOR_GENERIC)){output = true;} break;
	}

SetResultValue(output);
}

script "CSACS_HealthSpawnCheck" (void)
{
int Result = 1;
if(ACS_ExecuteWithResult(975,0)==2 && GetCvar("CSCC_SV_HPinLMS")==false){Result = 0;}
SetResultValue(Result);
}

Script "CSACS_HealthSet" (void) CLIENTSIDE
{
int StateSet = 0;
If(CheckActorInventory(consolePlayerNumber()+1000,"CannotUseHealing")){SetActorState(0,"TranslucentSpawn"); StateSet=1;}
If(StateSet==0){SetActorState(0,"NormalSpawn");}
}

//See WEPACS for CSACS_ItemSet [Trill]

script "CSACS_HitKnockback" (int force, int disabled, int type)
{
if(disabled == 0){GiveInventory("TempPitProtection",1);}
int pusher = ACS_NamedExecuteWithResult("core_gettarget");
if(type == 1){force*=CheckActorInventory(pusher,"ScriptCharge");}//ColdFusion
int Vang = VectorAngle(GetActorX(0) - GetActorX(pusher), GetActorY(0) - GetActorY(pusher)) >> 8;
ThrustThing(Vang, force, 1, 0);
}

script "CSACS_CheckPitProtect" (void)
{
SetResultValue(GetCvar("CSCC_SV_PitProtection"));
}

script "CSACS_PitchGrab" (Void)
{
int FiringPlayer= ACS_ExecuteWithResult(257, 0);
int Output = 360 * (GetActorPitch(FiringPlayer));
Setresultvalue(Output >> 16);
//--
}

Script "CSACS_GetTeamPointer" (int Pointer)
{
if(Pointer!=0){SetActivator(0,Pointer);}
int Result = GetPlayerInfo(PlayerNumber(),PLAYERINFO_TEAM);
//Log(i:Result);
SetResultValue(Result);
}

Script "CSACS_ButtonCheck" (int theButton)
{
SetResultValue(PressingButton(theButton));
}

Script "CSACS_PressingBothAttack" (void)
{
int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
SetResultValue(PressingButton2(buttons,BT_ATTACK)&&PressingButton2(buttons,BT_ALTATTACK));
}

function bool PressingButton (int theButton)
{
return PressingButton2(GetPlayerInput(-1, INPUT_BUTTONS),theButton);
}

function bool PressingButton2 (int buttons, int theButton)
{
return ((buttons&theButton)>0);
}

Str TinyBarSprite[21] = {
"TinyBar0",
"TinyBar1",
"TinyBar2",
"TinyBar3",
"TinyBar4",
"TinyBar5",
"TinyBar6",
"TinyBar7",
"TinyBar8",
"TinyBar9",
"TinyBar10",
"TinyBar11",
"TinyBar12",
"TinyBar13",
"TinyBar14",
"TinyBar15",
"TinyBar16",
"TinyBar17",
"TinyBar18",
"TinyBar19",
"TinyBar20",
};

function str TinyBarHealth (int TargTID)
{
int output;
int HealthPercent;
int PlayerCurrentHealth;// = GetActorProperty(0,APROP_Health);
int PlayerMaxHealth;// = GetActorProperty(0,APROP_SpawnHealth);
int OverHealth;

	if(GetActorProperty(TargTID,APROP_HEALTH)<=0){PlayerCurrentHealth = 1; }
		Else{PlayerCurrentHealth = GetActorProperty(TargTID,APROP_Health);}
	if(GetActorProperty(TargTID,APROP_SpawnHealth)<=0){PlayerMaxHealth = 100; }
		Else{PlayerMaxHealth = GetActorProperty(TargTID,APROP_SpawnHealth);}
		
HealthPercent = ((PlayerCurrentHealth*100)/PlayerMaxHealth);
OverHealth = HealthPercent-100;
 if(OverHealth < 0){OverHealth = 0;}
  if(HealthPercent > 100){HealthPercent = 100;}

HealthPercent = HealthPercent / 10;
OverHealth = OverHealth / 5;

HealthPercent =  HealthPercent + OverHealth;
if(HealthPercent > 20){HealthPercent = 20;}
if(HealthPercent < 0){HealthPercent = 0;}
return (TinyBarSprite[HealthPercent]);
}

Script "CSACS_HealthPercent" (int TargTID, int Type, int perval)
{
int HealthPercent;
int PlayerCurrentHealth;
int PlayerMaxHealth;

if(GetActorProperty(TargTID,APROP_HEALTH)<=0){PlayerCurrentHealth = 1; }
else{PlayerCurrentHealth = GetActorProperty(TargTID,APROP_Health);}

if(GetActorProperty(TargTID,APROP_SpawnHealth)<=0){PlayerMaxHealth = 1; }
else{PlayerMaxHealth = GetActorProperty(TargTID,APROP_SpawnHealth);}

// Type 0 = current percentage of health
// Type 1 = Value of Health at that percentage

Switch (Type)
	{
	default : HealthPercent = ((PlayerCurrentHealth*100)/PlayerMaxHealth); Break;
	Case 1 : HealthPercent = (fixeddiv(PlayerMaxHealth,100)*perval) >> 16; Break;
	}

SetResultValue(HealthPercent);
}

Script "CSACS_OverhealDrain" (Int Tick)
{
if(GetActorProperty(0,APROP_HEALTH) > Tick){SetActorProperty(0,APROP_HEALTH,(GetActorProperty(0,APROP_HEALTH)-Tick));
	GiveInventory("DaDiBuffer",Tick);}
}

Script "CSACS_HealthPickup" (int Amount)
{
int PickupStyle = GetCvar("CSCC_SV_HPPickupStyle");
int MaxHealth = GetActorProperty(0,APROP_SPAWNHEALTH);
if(CheckInventory("IsSnatcher")){Amount = Amount/2;}
switch(PickupStyle)
	{
	Case 1:
	if(MaxHealth>100){Amount = (Amount*MaxHealth)/100;}
	break;
	Case 2:
	if(MaxHealth<100){Amount = (Amount*MaxHealth)/100;}
	break;
	Case 3:
	Amount = (Amount*MaxHealth)/100;
	break;
	}
ACS_NamedExecuteAlways("CSACS_Basic(Over)Heal",0,0,Amount);
}

Script "CSACS_Basic(Over)Heal" (int Pointer, int HealAmount, int Overheal )
{
int OverhealMax = Overheal+100;
if(OverhealMax<=100){OverhealMax=101;}
if(OverhealMax>150){OverhealMax=150;}
if(Pointer!=0){SetActivator(0,Pointer);}
int MaxHealth = GetActorProperty(0,APROP_SPAWNHEALTH);
if(MaxHealth==0){MaxHealth=100;}
for(int g=1;g<=HealAmount;g++)
    {
    if(GetActorProperty(0,APROP_Health)<MaxHealth){HealThing(1,MaxHealth);}
    else if(ACS_NamedExecuteWithResult("CSACS_HealthPercent",0)<OverhealMax && Overheal>=1){GiveInventory("BasicOverhealItem",1);}
    }
}

Script "CSACS_SetPointer" (int pointer, int TID)
{
SetPointer(pointer,TID);
}

/*
//Turns Jumping On or Off
script "CSCC_JumpToggle" (Int Toggle)
{

int pln = ActivatorTID() - 1000;

if (Toggle >= 1){SetActorProperty(ActivatorTID(),APROP_JUMPZ,PlayerJumpZ[pln]);}
Else {SetActorProperty(ActivatorTID(),APROP_JUMPZ,0);}
}


//Turns Gravity On or Off
script "CSCC_GravityToggle" (Int Toggle)
{

int pln = ActivatorTID() - 1000;

if (Toggle >= 1){SetActorProperty(ActivatorTID(),APROP_Gravity,1.0);} 
Else {SetActorProperty(ActivatorTID(),APROP_Gravity,0.1);}
}
*/

script "CSACS_DDINITIATE" RESPAWN
{
ACS_NamedExecuteAlways("CSCC_CV_DamageDisplay",0);
}

#DEFINE DDNUMTID 82000
#DEFINE DDNUMDIST 25.0
script "CSCC_CV_DamageDisplay" ENTER
{
	int HPMax = GetActorProperty(0, APROP_Health);
	int SpawnDivideZeroBug;
	int DisplayReady = 1;
	int Damagedigits = 0;
		int PLN = Playernumber();
		int ColorVal;
		int HPP = 0; // "Health Point Past/Future"
		int HPF = 0;
		int HPC = 0; // "HP Calculation"
		int HPCC = 0; // HP Carry
		Int x;
		int y;
		int z;
		//log(s:"start");
		While((ClassifyActor(0) & ACTOR_ALIVE))
		{
			SpawnDivideZeroBug = GetActorProperty(0, APROP_SpawnHealth);
			if(SpawnDivideZeroBug == 0)
			{
				HPP = GetActorProperty(0, APROP_Health);
				delay(2); 
				HPF = GetActorProperty(0, APROP_Health); 
			}
			else
			{
				HPP = GetActorProperty(0, APROP_Health);
				delay(2); 
				HPF = GetActorProperty(0, APROP_Health); 
			}
			HPC = HPP-HPF;
			 
				if(HPC != 0)
				{
				HPCC = HPC;
				if(Checkinventory("DaDiBuffer")){HPCC = HPCC - Checkinventory("DaDiBuffer"); TakeInventory("DaDiBuffer",9999);}
				HPC = 0;
				
					if(HPCC <= -1) // Healing Gained
					{ Damagedigits = GetTotalDigits(-HPCC);
						x = GetActorX(0) + random(-DDNUMDIST, DDNUMDIST);
						y = GetActorY(0) + random(-DDNUMDIST, DDNUMDIST);
						z = GetActorZ(0) + random(30.0, 64.0);
						if(CheckInventory("OverHealValue")){ColorVal = 56;}
						 Else{ColorVal = 404;}
						SpawnForced("DNUM_POS",x,y,z,DDNUMTID+ColorVal,0);
						Switch(Damagedigits)
						{
							Case 1: SpawnForced(StrParam(s:"DNUM1_",i:getNthDigit(-HPCC,10,1)),x,y,z,DDNUMTID+ColorVal,0);
									break;
							Case 2: SpawnForced(StrParam(s:"DNUM1_",i:getNthDigit(-HPCC,10,2)),x,y,z,DDNUMTID+ColorVal,0);
									SpawnForced(StrParam(s:"DNUM2_",i:getNthDigit(-HPCC,10,1)),x,y,z,DDNUMTID+ColorVal,0);
									
									break;
							Case 3: SpawnForced(StrParam(s:"DNUM1_",i:getNthDigit(-HPCC,10,3)),x,y,z,DDNUMTID+ColorVal,0);
									SpawnForced(StrParam(s:"DNUM2_",i:getNthDigit(-HPCC,10,2)),x,y,z,DDNUMTID+ColorVal,0);
									SpawnForced(StrParam(s:"DNUM3_",i:getNthDigit(-HPCC,10,1)),x,y,z,DDNUMTID+ColorVal,0);
									break;
						}
					}
					
					if(HPCC >= 1) // Damage taken
					{ Damagedigits = GetTotalDigits(HPCC);
						if(HPCC > 999){HPCC = 999;}
						SetUserVariable(0,"User_HitMemory",HPCC);
						//log(s:"Got hurt,", i:getNthDigit(HPCC,10,3),i:getNthDigit(HPCC,10,2),i:getNthDigit(HPCC,10,1));
						
						x = GetActorX(0) + random(-DDNUMDIST, DDNUMDIST);
						y = GetActorY(0) + random(-DDNUMDIST, DDNUMDIST);
						z = GetActorZ(0) + random(30.0, 64.0);
						if(CheckInventory("OverHealValue")){ColorVal = 177;}
						 Else{ColorVal = 25;}
						SpawnForced("DNUM_Neg",x,y,z,DDNUMTID+ColorVal,0);
						Switch(Damagedigits)
						{
							Case 1: SpawnForced(StrParam(s:"DNUM1_",i:getNthDigit(HPCC,10,1)),x,y,z,DDNUMTID+ColorVal,0);
									break;
							Case 2: SpawnForced(StrParam(s:"DNUM1_",i:getNthDigit(HPCC,10,2)),x,y,z,DDNUMTID+ColorVal,0);
									SpawnForced(StrParam(s:"DNUM2_",i:getNthDigit(HPCC,10,1)),x,y,z,DDNUMTID+ColorVal,0);
									break;
							Case 3: SpawnForced(StrParam(s:"DNUM1_",i:getNthDigit(HPCC,10,3)),x,y,z,DDNUMTID+ColorVal,0);
									SpawnForced(StrParam(s:"DNUM2_",i:getNthDigit(HPCC,10,2)),x,y,z,DDNUMTID+ColorVal,0);
									SpawnForced(StrParam(s:"DNUM3_",i:getNthDigit(HPCC,10,1)),x,y,z,DDNUMTID+ColorVal,0);
									break;
						}
					}
					
					

				}
			}
							//log(s:"Stop");
}

script "CSACS_DDTEXTCOL" (void) CLIENTSIDE
{
	int CPLN = consoleplayernumber();
	bool ShowDamage = GetUserCVar(CPLN,"CSCC_CV_DamageDisplay");
	//log(i:ShowDamage);
	//CSCC_CV_DamageDisplay
	
	if(ShowDamage)
		{
		Thing_SetTranslation(0, ActivatorTID()-DDNUMTID);
		SetActorProperty(0,APROP_ALPHA,0.8);
		}
	else{Thing_Remove(0);}
}

function int getNthDigit (int number, int base, int n)
{
int result = ((number / pow(base, n - 1)) % base);
return result;
}

function int GetTotalDigits (int number)
{
int result;
if (number >= 100) {result = 3;}
else if (number >= 10) {result = 2;}
else {result = 1;}
return result;
}

function int pow (int x, int n)
{
	int y = 1;
	while (n-- > 0) y *= x;
	return y;
}

#define MATH_E 178145
function int logN (int x, int base)
{
    if (!base) base = MATH_E;
    int integer = 0;

    if (x < 1.0 && base < 1.0) return 0;
      
    while (x < 1)
    {
        integer -= 1;
        x = FixedMul (x, base);
    }
    while (x >= base)
    {
        integer += 1;
        x = FixedDiv (x, base);
    }
    int partial = 0.5;
    x = FixedMul (x, x);
    int decimal = 0;
    while (partial > 1) // Actually 0.0000152587890625
    {
        if (x >= base)
        {
            decimal += partial;
            x = FixedDiv (x, base);
        }
        partial = FixedMul (partial, 0.5);
        x = FixedMul (x, x);
    }
    return ((integer << 16) + decimal);
}
