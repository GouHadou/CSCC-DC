#library "BASECSCC"
#import "WEPACS.acs"

#include "zcommon.acs"
#include "8BDMLIB.ACS"
#include "CSCCLIB.acs"
#include "CLASSACS.acs"
#include "COPY.ACS"
#include "UNIX.ACS"
#include "COPYWEP.ACS"

Script "CSACS_TeamSpecies" ENTER 
{
int pln = PlayerNumber();
if(ACS_ExecuteWithResult(975,1)==1)
	{
	switch(GetPlayerInfo(PlayerNumber(), PLAYERINFO_TEAM))
		{
		Case 0:
		SetActorProperty(0,APROP_SPECIES,"LightMember");
		break;
		Case 1:
		SetActorProperty(0,APROP_SPECIES,"WilyMember");
		break;
		Case 2:
		SetActorProperty(0,APROP_SPECIES,"CossackMember");
		break;
		Case 3:
		SetActorProperty(0,APROP_SPECIES,"KingMember");
		break;
		}
	}
else{setactorproperty(0,APROP_SPECIES,StrParam(s:"Player_",i:pln));}
}

script "CSACS_TSRespawn" RESPAWN
{
ACS_NamedExecuteAlways("CSACS_TeamSpecies",0);
}

Script "CSACS_ActorClassifier" (int TID, int CheckType)
{
bool output;

switch(CheckType)
	{
	case 0: if ((ClassifyActor(TID) & ACTOR_NONE)){output = true;} break;
	case 1: if ((ClassifyActor(TID) & ACTOR_WORLD)){output = true;} break;
	case 2: if ((ClassifyActor(TID) & ACTOR_PLAYER)){output = true;} break;
	case 3: if ((ClassifyActor(TID) & ACTOR_BOT)){output = true;} break;
	case 4: if ((ClassifyActor(TID) & ACTOR_VOODOODOLL)){output = true;} break;
	case 5: if ((ClassifyActor(TID) & ACTOR_MONSTER)){output = true;} break;
	case 6: if ((ClassifyActor(TID) & ACTOR_ALIVE)){output = true;} break;
	case 7: if ((ClassifyActor(TID) & ACTOR_DEAD)){output = true;} break;
	case 8: if ((ClassifyActor(TID) & ACTOR_MISSILE)){output = true;} break;
	case 9: if ((ClassifyActor(TID) & ACTOR_GENERIC)){output = true;} break;
	}

SetResultValue(output);
}

Script "CSACS_HealthSet" (void) CLIENTSIDE
{
int StateSet = 0;
If(CheckActorInventory(consolePlayerNumber()+1000,"CannotUseHealing")){SetActorState(0,"TranslucentSpawn"); StateSet=1;}
If(StateSet==0){SetActorState(0,"NormalSpawn");}
}

script "CSACS_HitKnockback" (int force)
{
int pusher = ACS_NamedExecuteWithResult("core_gettarget");
int Vang = VectorAngle(GetActorX(0) - GetActorX(pusher), GetActorY(0) - GetActorY(pusher)) >> 8;
ThrustThing(Vang, force, 1, 0);
}

script "CSACS_PitchGrab" (Void)
{
int FiringPlayer= ACS_ExecuteWithResult(257, 0);
int Output = 360 * (GetActorPitch(FiringPlayer));
Setresultvalue(Output >> 16);
//--
}

Script "CSACS_GetTeamPointer" (int Pointer)
{
if(Pointer!=0){SetActivator(0,Pointer);}
int Result = GetPlayerInfo(PlayerNumber(),PLAYERINFO_TEAM);
//Log(i:Result);
SetResultValue(Result);
}

Script "CSACS_ButtonCheck" (int theButton)
{
SetResultValue(PressingButton(theButton));
}

Script "CSACS_PressingAttack" (void)
{
SetResultValue(PressingButton(BT_ATTACK));
}

Script "CSACS_PressingAltAttack" (void)
{
SetResultValue(PressingButton(BT_ALTATTACK));
}

Script "CSACS_PressingBothAttack" (void)
{
int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
SetResultValue(PressingButton2(buttons,BT_ATTACK)&&PressingButton2(buttons,BT_ALTATTACK));
}

function bool PressingButton (int theButton)
{
return PressingButton2(GetPlayerInput(-1, INPUT_BUTTONS),theButton);
}

function bool PressingButton2 (int buttons, int theButton)
{
return ((buttons&theButton)>0);
}

script "CSACS_RadiusGive" (int GiveID, int GiveRadius, int GiveType)
{ 
int Target_TID;
int Target_Distance;
int FiringPlayer;
int PlayersTeam;
Bool GiveClearance;

// GiveType 1 = self + Friendlies
// GiveType 2 = Friendlies only
// GiveType 3 = Self only
// GiveType 4 = Enemies only
// GiveType 5 = self + Enemies
// GiveType 6 = All but self
// GiveType 7 = All

If(ActivatorTID() <= 999)
	{
	FiringPlayer= ACS_ExecuteWithResult(257, 0); //Returns the target of the activator
	}
else
	{
	FiringPlayer=ActivatorTID();
	}
PlayersTeam = GetPlayerInfo(FiringPlayer-1000, PLAYERINFO_TEAM);
For(int i = 0;i < ServerMax; i++)
	{
	GiveClearance = True;
	If(!PlayerInGame(i)){Continue;}
	If(ACS_ExecuteWithResult(975, 1))
		{
		switch(GiveType)
			{
			case 1:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM)){Continue;}
			Break;
			
			case 2:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM) || (PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) && i == FiringPlayer-1000)){Continue;}
			Break;
			
			case 3:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM) || (i != FiringPlayer-1000)){Continue;}
			Break;

			case 4:
			If(PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) || i == FiringPlayer-1000){Continue;}
			Break;
			
			case 5:
			If(PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) && i != FiringPlayer-1000){Continue;}
			Break;
			
			case 6:
			If(i == FiringPlayer-1000){Continue;}	
			Break;
			}
		}
	else
		{
		switch(GiveType)
			{
			case 1:
			If(i != FiringPlayer-1000){Continue;}
			Break;
			
			case 2:
			If(i == FiringPlayer-1000 || i != FiringPlayer-1000){Continue;}
			Break;
			
			case 3:
			If(i != FiringPlayer-1000){Continue;}
			Break;
			
			case 4:
			If(i == FiringPlayer-1000){Continue;}
			Break;
			
			Default:
			//If(i == FiringPlayer-1000 || i != FiringPlayer-1000){Continue;}
			Break;
			}
		}
	Target_TID = i+1000;
	If(xyzDistance(0,Target_TID) < GiveRadius) // && FiringPlayer!=Target_TID
		{
		GiveActorInventory(Target_TID,"PackageID", GiveID);
		GiveActorInventory(Target_TID,"GivePackage", 1);
		}
	}
}

script "CSACS_MedivisionScript" (void) CLIENTSIDE
{ 
int Target_TID;
int PlayersTeam;
str TeamTag; 

if(ACS_ExecuteWithResult(975,1)!=1){terminate;}

Switch(PlayerTeam())
	{
	Case 0: TeamTag = "_Light"; Break;
	Case 1: TeamTag = "_Wily"; Break;
	Case 2: TeamTag = "_Cossack"; Break;
	Case 3: TeamTag = "_King"; Break;
	}

while(GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0)
	{
	Delay(1);
	PlayersTeam = GetPlayerInfo(ActivatorTID()-1000, PLAYERINFO_TEAM);
	For(int p = 0; p < ServerMax; p++)
		{
		If(!PlayerInGame(p)){continue;}
		if(p+1000 == ActivatorTID()){continue;}
		If(PlayersTeam != GetPlayerInfo(p, PLAYERINFO_TEAM)){continue;}
	
		Target_TID = p+1000;
		If((xyzDistance(0,Target_TID) < 900) && Checksight(0,Target_TID,0))
			{
			SpawnForced(StrParam(s:TinyBarHealth(Target_TID),s:TeamTag),GetActorX(Target_TID),GetActorY(Target_TID),GetActorZ(Target_TID) + (65 << 16));
			}
		}
	}
}

Str TinyBarSprite[21] = {
"TinyBar0",
"TinyBar1",
"TinyBar2",
"TinyBar3",
"TinyBar4",
"TinyBar5",
"TinyBar6",
"TinyBar7",
"TinyBar8",
"TinyBar9",
"TinyBar10",
"TinyBar11",
"TinyBar12",
"TinyBar13",
"TinyBar14",
"TinyBar15",
"TinyBar16",
"TinyBar17",
"TinyBar18",
"TinyBar19",
"TinyBar20",
};

function str TinyBarHealth (int TargTID)
{
int output;
int HealthPercent;
int PlayerCurrentHealth;// = GetActorProperty(0,APROP_Health);
int PlayerMaxHealth;// = GetActorProperty(0,APROP_SpawnHealth);
int OverHealth;

	if(GetActorProperty(TargTID,APROP_HEALTH)<=0){PlayerCurrentHealth = 1; }
		Else{PlayerCurrentHealth = GetActorProperty(TargTID,APROP_Health);}
	if(GetActorProperty(TargTID,APROP_SpawnHealth)<=0){PlayerMaxHealth = 100; }
		Else{PlayerMaxHealth = GetActorProperty(TargTID,APROP_SpawnHealth);}
		
HealthPercent = ((PlayerCurrentHealth*100)/PlayerMaxHealth);
OverHealth = HealthPercent-100;
 if(OverHealth < 0){OverHealth = 0;}
  if(HealthPercent > 100){HealthPercent = 100;}

HealthPercent = HealthPercent / 10;
OverHealth = OverHealth / 5;

HealthPercent =  HealthPercent + OverHealth;
if(HealthPercent > 20){HealthPercent = 20;}
if(HealthPercent < 0){HealthPercent = 0;}
return (TinyBarSprite[HealthPercent]);
}

Script "CSACS_HealthPercent" (int TargTID, int Type, int perval)
{
int HealthPercent;
int PlayerCurrentHealth;
int PlayerMaxHealth;

if(GetActorProperty(TargTID,APROP_HEALTH)<=0){PlayerCurrentHealth = 1; }
else{PlayerCurrentHealth = GetActorProperty(TargTID,APROP_Health);}

if(GetActorProperty(TargTID,APROP_SpawnHealth)<=0){PlayerMaxHealth = 1; }
else{PlayerMaxHealth = GetActorProperty(TargTID,APROP_SpawnHealth);}

// Type 0 = current percentage of health
// Type 1 = Value of Health at that percentage

Switch (Type)
	{
	default : HealthPercent = ((PlayerCurrentHealth*100)/PlayerMaxHealth); Break;
	Case 1 : HealthPercent = (fixeddiv(PlayerMaxHealth,100)*perval) >> 16; Break;
	}

SetResultValue(HealthPercent);
}

Script "CSACS_OverhealDrain" (Int Tick)
{
if(GetActorProperty(0,APROP_HEALTH) > Tick){SetActorProperty(0,APROP_HEALTH,(GetActorProperty(0,APROP_HEALTH)-Tick));}
}

Script "CSACS_Basic(Over)Heal" (int Pointer, int HealAmount, int Overheal, int OverhealMax)
{
if(OverhealMax<=0){OverhealMax=150;}
if(OverhealMax>150){OverhealMax=150;}
if(Pointer!=0){SetActivator(0,Pointer);}
int MaxHealth = GetActorProperty(0,APROP_SPAWNHEALTH);
if(MaxHealth==0){MaxHealth=100;}
for(int g=1;g<=HealAmount;g++)
    {
    if(GetActorProperty(0,APROP_Health)<MaxHealth){HealThing(1,MaxHealth);}
    else if(ACS_NamedExecuteWithResult("CSACS_HealthPercent",0)<OverhealMax && Overheal==1){GiveInventory("BasicOverhealItem",1);}
    }
}