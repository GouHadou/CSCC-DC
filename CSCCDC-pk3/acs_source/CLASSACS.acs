//#library "classacs"

//#include "zcommon.acs"
//#include "cscclib.acs"

//Ukiyama Scripts
Script "CSACS_UKIINFO" (int IsExplosion)
{
int ThePlayer = ActivatorTID();
//SetActivatorToTarget(0);
int TotalDamage = 15;

If(CheckActorInventory(ThePlayer, "SnipeFlag")){TotalDamage = 35;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){TotalDamage -= 5;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){TotalDamage -= 2;}
If(CheckActorInventory(ThePlayer, "HomingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){TotalDamage += 7;}
If(CheckActorInventory(ThePlayer, "VelocityFlag") && IsExplosion == 0){TotalDamage = (TotalDamage * 0.7) >> 16;}
If(CheckActorInventory(ThePlayer, "NerfFlag")){TotalDamage += 5;}
	
SetHudSize(800, 680, True);
SetFont("SMALLFONT");
HudMessage(d:(TotalDamage),s:" damage";
HUDMSG_FADEOUT, 1, CR_GOLD, 60.1, 205.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 940.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 920.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 900.1, 5<<16);

If(CheckActorInventory(ThePlayer, "SnipeFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Shot Size -Fire Rate"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 215.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Fire Rate -Spread"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 215.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Projectiles Fired -Spread -Fire Rate"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.5, 215.5, 5<<16);;}
If(CheckActorInventory(ThePlayer, "HomingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Homing"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Arc"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.5, 5<<16);;}
If(CheckActorInventory(ThePlayer, "VelocityFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Speed +Ripper"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "NerfFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Damage Debuff"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "BouncingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Bouncing"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ExplodingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+EXPLOSIONS?!"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
}

//Script to handle aiming of Uki's vision
Script "CSACS_UKIREMOTE" (void)
{
int UkiVisionTID = ActivatorTID() - 100;
If(ThingCount(T_NONE, UkiVisionTID))
	{
	ACS_ExecuteAlways(976,0);
	//SetActorState(UkiVisionTID, "RemoteControl");
	SetPlayerProperty(0, 1, 0);
	ChangeCamera(UkiVisionTID, 0, 0);
	Spawnspot("RemoteSFX", UkiVisionTID);
	While(CheckInventory("UkiRemoteFlag"))
		{
		If(GetPlayerInput(-1 , INPUT_BUTTONS) & BT_ATTACK)
			{
			//GiveActorInventory(UkiVisionTID, "UkiAttackFlag", 1);
			GiveInventory("UkiAttackFlag", 1);
			}
		Delay(1);
		}
	}
TakeInventory("UkiRemoteFlag", 1);
SetPlayerProperty(0, 0, 0);
ACS_ExecuteAlways(976,0);
ChangeCamera(0, 0, 0);
Spawnspot("RemoteSFX", 0);
}

//Script for Uki's weapon damage
Script "CSACS_UKIDAMAGE" (int IsExplosion)
{
int x = GetActorX(0);
int y = GetActorY(0);
int z = GetActorZ(0);
int ThePlayer = ACS_NamedExecuteWithResult("core_gettarget");
//SetActivatorToTarget(0);
If(ThePlayer < 1000){SetResultValue(10);terminate;}
int TotalDamage = 15;
If(IsExplosion == 0)
	{
	If(CheckActorInventory(ThePlayer, "ExplodingFlag") && !CheckActorInventory(ThePlayer, "VelocityFlag")){SetResultValue(0);terminate;}
	}

If(CheckActorInventory(ThePlayer, "SnipeFlag")){TotalDamage = 35;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){TotalDamage -= 5;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){TotalDamage -= 2;}

If(CheckActorInventory(ThePlayer, "HomingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){TotalDamage += 7;}
If(CheckActorInventory(ThePlayer, "VelocityFlag") && IsExplosion == 0){TotalDamage = (TotalDamage * 0.7) >> 16;}
If(IsExplosion == 0)
	{
	If(CheckActorInventory(ThePlayer, "ExplodingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
	}
//printbold(i:TotalDamage);

If(CheckActorInventory(ThePlayer, "NerfFlag")){TotalDamage += 5;}
SetResultValue(TotalDamage);
}

//Script for the camera for Uki's vision
Script "CSACS_UKIREMOTEAIM" (void) CLIENTSIDE
{
int TargetPlayer= ActivatorTID() + 100;//ACS_ExecuteWithResult(257);
int PlayerPitch = GetActorPitch(TargetPlayer);
int PlayerAngle = GetActorAngle(TargetPlayer);
SetActorPitch(0, PlayerPitch);
SetActorAngle(0, PlayerAngle);
}
//End Ukiyama

////////////////////////////////////LaggyCorperal stuff
script "ReloadWeapon" (int ammoTypes, int maxAmmo)  //Reload script.
{
	
	//Ammo types inside and outside the weapon.
	int in, out;
	str inAmmo, outAmmo;
	
	int magSize;//Max ammo inside.
	
	switch(ammoTypes)
	{
		case 1: //Tommy gun	
		inAmmo = "TommyAmmo";
		outAmmo = "FatBullets";
		magSize = 30;
		break;
		Case 2: //Grand Ammo
		inAmmo = "GrandAmmo";
		outAmmo = "ShelbyvilleRound";
		magSize = 8;
		break;
		default:
		print(s:"Specify ammotype ya dork");
		break;
	}
	
	
	in = CheckInventory(inAmmo);
	out = CheckInventory(outAmmo);
	
	//print(s:inAmmo, d:in, s:outAmmo, d:out);
	
	//If maxAmmo is defined, do not reload more than that.
	if (maxAmmo != 0 && magSize > (maxAmmo + in))
	{
		magSize = (maxAmmo + in);
	}
	
	if (out < (magSize-in)) //Can't reload the full weapon
			{
				TakeInventory(outAmmo,out);
				GiveInventory(inAmmo,out);
			}
			else
			{
				TakeInventory(outAmmo, magSize-in);
				GiveInventory(inAmmo, magSize-in);
			}		
	
	
}


Script "ForceReload"(void) NET //Reload using an item instead of +RELOAD
{
GiveInventory("ForceReload",1);
delay(1);
TakeInventory("ForceReload",1);
}

Script "CorpWeaponPickup" (int wep, int dropped)
{
//print(d:wep, s: " ", d: dropped); 


str giveWep; //Weapon's name
int coolDown;//Time before picking a weapon from map pickups again.
int coolDownActor; //Time before picking a weapon from map pickups again.
str wepTag; //Weapon's tag
str pickupMessage; //Something iunno
bool isGrenade; //Whenever it uses the grenade slot or the secondary weapon slot.

switch (wep)
{
	case 1:
		giveWep = "CorpFragGrenade";
		coolDown = 60;
		coolDownActor = "FragGrenadeCooldown";
		wepTag = "Fragmentation Grenade";
		pickupMessage = "You got the Fragmentation Grenade!\nNow with more fragmentation.\nDon't blow it up in front of your own face.";
		isGrenade = false;
		break;
	case 2:
		giveWep = "CorpGrandDad";
		coolDown = 60;
		coolDownActor = "GrandDadCooldown";
		wepTag = "Grand Dad";
		pickupMessage = "You got the Grand Dad semiautomatic rifle!\nReloading before firing all rounds is not recommended.";
		isGrenade = true;
		break;
	default:
		print(s:"no");
		break;
}




//if (!dropped) //cooldown check (temorarily removed)
//{
	if (CheckInventory(cooldownActor))
	{
		SetHudSize(256,224,0);
		setFont("SMALLFONT");
		HudMessage(s:wepTag, s:" cooldown: ",d:CheckInventory(cooldownActor);
		HUDMSG_FADEOUT, 1, CR_DARKGREEN, 128.0, 32.0, 1.0, 0.5);
		terminate;
	}
	else
	{
		giveInventory(cooldownActor, coolDown);
	}
//}

//Take any other weapon in the same slot.
//Not the same weapon because the player might be using it
//and that would deselect it?
if (isGrenade)
{
	takeUnlessItsThis("CorpFragGrenade",giveWep);
}
else
{
	takeUnlessItsThis("GrandDad",giveWep);
}


//Finally gibe weapon
GiveInventory(giveWep, 1);
Print(s:pickupMessage);
SetMugshotState("Grin");
localAmbientSound("Weapon/TommyLoad",127);//Might have different sounds for each weapon, eventually.
}

//This function takes items unless it's the right one.
function void takeUnlessItsThis (str takeThis, str unless)
{
	if (takeThis != unless)
	{
		takeInventory("takeThis",1);
	}
}

Script "CorpWeaponCooldown" ENTER
{
If (!CheckInventory("CorpArsenal"))
{
	//print(s:"ur not corperel");
	terminate;
}
While (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0)
{
	//print(s:"tictoc");
	TakeInventory("FragGrenadeCooldown",1);
	TakeInventory("GrandDadCooldown",1);
	delay(35);
}
}

Script "CorpWeaponCooldownRespawn" RESPAWN
{
ACS_NamedExecuteAlways("CorpWeaponCooldown",0);
}

//View recoil script
Script "CorpRecoil" (int horiz, int vert, int duration) CLIENTSIDE
//Horizontal angle, vertical angle and duration in tics
//(not counting 1 pause tic and comeback)
//MUST BE CLIENTSIDE IF ALL IT DOES IS MOVE PLAYER VIEW!
{
int i, theHecc, oldMove, moveGen, moveAngle, movePitch; //bullcrap
//Note to self: define behavior for 0 duration
moveGen = 0;
for (i = 1; i <= duration; i++)
{
	oldMove = moveGen;
	//What is trigonometry iunno
	theHecc = sin(((i*0.5)/duration) - 0.25);
	//log(f:theHecc);
	//More math bullcrap
	moveGen = ((theHecc) + 1.0)/2;
	//log(f:moveGen, s:" ", f:theHecc, s:" ", f:oldMove);
	moveAngle = fixedmul(horiz, moveGen - oldMove);
	movePitch = fixedmul(vert, moveGen - oldMove);
	
	setActorAngle(0, getActorAngle(0) + moveAngle);
	setActorPitch(0, getActorPitch(0) + moveAngle);
	delay(1);
}
if (getCVAR("CSCCB_CL_RecoilReset") == false) terminate;
//view reset
//print(s:"lol");
delay(1);
moveGen = 0;
horiz = horiz*(-1);
vert = vert*(-1);
for (i = 1; i <= duration; i++)
{
	oldMove = moveGen;
	theHecc = sin(((i*0.5)/duration) - 0.25);
	moveGen = ((theHecc) + 1.0)/2;
	
	moveAngle = fixedmul(horiz, moveGen - oldMove);
	movePitch = fixedmul(vert, moveGen - oldMove);
	
	setActorAngle(0, getActorAngle(0) + moveAngle);
	setActorPitch(0, getActorPitch(0) + moveAngle);
	delay(1);
}

}

//////////////////////////////////////Corporal Over and out//////////////////////////////////

//Messatsu Scripts
Script "MessParryCheck" (void)
{
int InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);;
int InputOldButtons = InputButtons;
while (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0 && CheckInventory("IsMessatsu"))
	{
	InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_SPEED|BT_USER1) == 1 )
		{
		If(!CheckInventory("NoParry")){GiveInventory("MessParryFlag", 1);}
		}
	Delay(1);
	InputOldButtons = InputButtons;
	}

}
Script "DemonFlipCheck" (void)
{
int InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);;
int InputOldButtons = InputButtons;
while (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0 && CheckInventory("DemonFlipActive"))
	{
	InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_ATTACK) == 1 )
		{
		GiveInventory("MessPalm", 1);
		terminate;
		}
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_ALTATTACK) == 1 )
		{
		GiveInventory("MessKick", 1);
		terminate;
		}
	Delay(1);
	InputOldButtons = InputButtons;
	}

}


Script "MessParryHealth" (int CurrentHealth)
{
int PlayerTID = ActivatorTID();

Do
	{
	If(CurrentHealth < GetActorProperty(PlayerTID, APROP_HEALTH)){CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);}
	If(CurrentHealth > GetActorProperty(PlayerTID, APROP_HEALTH))
		{
		If(CheckInventory("OverhealValue") && (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH))<5)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		Else
			{
			GiveInventory("MessParrySuccess", 1);
			SetActorProperty(0,APROP_HEALTH,(CurrentHealth));
			}
		}
	Delay(1);
	}
While(CheckInventory("MessParry") || CheckInventory("ParryBlock"));
}

Script "EnemyProximity" (int distance)
{
int ReturnValue = 0;
int PlayerTID = ActivatorTID();
int CurrentTeam = GetPlayerInfo(PlayerNumber(), PLAYERINFO_TEAM);
For(int i = 0; i < 64; i++)
	{
	If(PlayerInGame(i))
		{
		If(i==PlayerNumber()){continue;}
		Switch(ACS_ExecuteWithResult(975, 1))
			{
			Case 0:
			If(XYZDistance(PlayerTID, i+1000) < distance)
				{
				If(CheckSight(PlayerTID, i+1000, 0))
					{
					ReturnValue=1; 
					i=64;
					GiveInventory("MessMeterOkay", 1);
					}
				Else
					{
					If(CheckInventory("MessMeterOkay"))
						{
						ReturnValue=1; 
						i=64;
						}
					}
				}
			break;
			Case 1:
			If(CurrentTeam == GetPlayerInfo(i, PLAYERINFO_TEAM)){continue;}
			If(XYZDistance(PlayerTID, i+1000) < distance)
				{
				If(CheckSight(PlayerTID, i+1000, 0))
					{
					ReturnValue=1; 
					i=64;
					GiveInventory("MessMeterOkay", 1);
					}
				Else
					{
					If(CheckInventory("MessMeterOkay"))
						{
						ReturnValue=1; 
						i=64;
						}
					}
				}
			break;
			}
		}
	}
SetResultValue(ReturnValue);
}

Script "MessDamageAmmo" (void)
{
Delay(1);
int PlayerTID = ActivatorTID();
int CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);

while(GetActorProperty(PlayerTID, APROP_HEALTH) > 0 && CheckInventory("MessatsuWep"))
	{
	While(CurrentHealth <= GetActorProperty(PlayerTID, APROP_HEALTH))
		{
		Delay(1);
		If(GetActorProperty(PlayerTID, APROP_HEALTH) > CurrentHealth)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		}
	If(GetActorProperty(PlayerTID, APROP_HEALTH) > 0)
		{
		GiveActorInventory(PlayerTID, "MessatsuAmmo", (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH))/3);
		CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
		}
	}
}
//End Messatsu Scripts

//Ice / Sparky script
Script "IceSparkyFusion" (void)
{
Delay(1);
int PlayerTID = ActivatorTID();
int FusionStock = CheckInventory("FusionStock");
If(FusionStock < 1){FusionStock = 1;}
int CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);

while(GetActorProperty(PlayerTID, APROP_HEALTH) > 0 && (CheckInventory("IceWep") || CheckInventory("SparkyWep")))
	{
	While(CurrentHealth <= GetActorProperty(PlayerTID, APROP_HEALTH))
		{
		Delay(1);
		If(CheckInventory("FusionMeter")>=250)
			{
			TakeInventory("FusionMeter", 999);
			GiveInventory("IceSparkyCombine", 1);
			}
		If(GetActorProperty(PlayerTID, APROP_HEALTH) > CurrentHealth)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		}
	FusionStock = CheckInventory("FusionStock");
	If(GetActorProperty(PlayerTID, APROP_HEALTH) > 0)
		{
		If(!CheckInventory("IceSparkyFusion") && !CheckInventory("IceSparkyCombine"))
			{
			GiveActorInventory(PlayerTID, "FusionMeter", (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH))*FusionStock);
			}
		CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
		}
	}
}

//speed / jump changing
script "IceSparkSwap" (int speed)
{

Switch(speed)
	{
	Case 0:
	SetActorProperty(0,APROP_SPEED,1.0);
	SetActorProperty(0,APROP_JUMPZ,10.0);
	break;
	
	Case 1:
	SetActorProperty(0,APROP_SPEED,1.6);
	SetActorProperty(0,APROP_JUMPZ,15.0);
	break;
	}

}
//End Ice Sparky

//██████████████████████████████████████████TankLib████████████████████████████████████████

//int ServerMAX = 32;


function bool checkForMovement(int buttons) {
	int result = 1;

	if (buttons & BT_MOVERIGHT){
		result+=2;
	}
	if (buttons & BT_MOVELEFT){
		result+=4;
	}
	if (buttons & BT_BACK){
		result+=8;
	}
	if (buttons & BT_FORWARD){
		result+=16;
	}

	return(result);
}

function int fdistanceVal (int x, int y, int z)
{
	int len;

	int ang = vectorangle(x,y);
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
	else len = fixeddiv(x, cos(ang));

	ang = vectorangle(len, z);
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(z, sin(ang));
	else len = fixeddiv(len, cos(ang));

	return len;
}

//██████████████████████████████████████████TankTools████████████████████████████████████████



script "TANKT_SetProp" (int prop, int val) {SetActorProperty(0,prop,val);}
script "TANKT_GetProp" (int TID, int prop) {SetResultValue(GetActorProperty(TID,prop));}
script "TANKT_GetDistanceFromOwner" (void) {SetResultValue( xyzDistance(0,ACS_ExecuteWithResult(257)) );}

script "TANKT_ChangeUserVar" (int Which, int Value) {
	Switch(Which) {
	Case 1:
	SetUserVariable(0,"user_TV",GetUserVariable(0,"user_TV")+Value);
	break;
	Case 2:
	SetUserVariable(0,"user_TTSPD",GetUserVariable(0,"user_TTSPD")+Value);
	break;
	}
}

script "TANKT_ProjectilePort" (int maxDist) //Borrowed from cbm
{
int target = ACS_ExecuteWithResult(257);

if(getActorProperty(0,APROP_HEALTH) <= 0 || getActorProperty(target,APROP_HEALTH) <= 0) {
	terminate;
}

maxDist = maxDist << 16;

int xDiff = getActorX(0) - getActorX(target);
int yDiff = getActorY(0) - getActorY(target);
int zDiff = getActorZ(0) - getActorZ(target);

if(fdistanceVal(xDiff,yDiff,zDiff) > maxDist) {
	terminate;
}

while (true) {
	xDiff += getActorVelX(0);
	yDiff += getActorVelY(0);
	zDiff += getActorVelZ(0);
	SetActorVelocity(target, xDiff, yDiff, zDiff, 0, 0);
	//Log(s:"MOVED");
	//GiveActorInventory(target,"ProjectilePorting",1);

	delay(1);

	if(getActorProperty(0,APROP_HEALTH) <= 0 || getActorProperty(target,APROP_HEALTH) <= 0 || CheckInventory("ProjectilePortDead")) {
		//Log(s:"Someone is Dead");
		GiveActorInventory(target,"ProjectilePortDead",1);
		//TakeActorInventory(target,"ProjectilePorting",1);
		terminate;
	}
	xDiff = getActorX(0) - getActorX(target);
	yDiff = getActorY(0) - getActorY(target);
	zDiff = getActorZ(0) - getActorZ(target);
	if(fdistanceVal(xDiff,yDiff,zDiff) > maxDist) {
		//Log(s:"Someone is too far");
		SetActorState(0,"Death",1);
		GiveActorInventory(target,"ProjectilePortDead",1);
		//TakeActorInventory(target,"ProjectilePorting",1);
		terminate;
	}

}
}

//██████████████████████████████████████████Tank████████████████████████████████████████

//====================
script "TANK_CHECKBUTTONS" (void) {SetResultValue(checkForMovement(GetPlayerInput(-1, INPUT_BUTTONS)));}
script "TANK_CHANGEANGLE" (int tid, int newangle) {SetActorAngle(tid,GetActorAngle(tid)+newangle);}

script "TANK_SETTANKSPECIES" (int enable)
{
	//int zview = GetActorProperty(0,APROP_ViewHeight) >> 16;
	//Log(i:zview); //Original ZView is 41 and not 42... derp. 
	
	Switch(enable) {
	Case 1:
	SetActorProperty(0,APROP_ViewHeight,64.0);
	break;
	Case 0:
	SetActorProperty(0,APROP_ViewHeight,41.0);
	break;
	}
}

script "TANK_CHECKTARGET" (void)//This is for projectiles to check if their owner spectated, disconnected, or is dead.
{
	SetActivatorToTarget(0);
	//log(s:"Player #? ",i:PlayerInGame(PlayerNumber()));
	//log(s:"Is Dead? ",i:CheckInventory("IsDead"));
	//log(s:"In Game? ",i:PlayerInGame(PlayerNumber()));
	if(PlayerNumber() == -1 || CheckInventory("IsDead") || !PlayerInGame(PlayerNumber())){
		SetResultValue(0);
	}
}

script "TANK_SPEEDSTER" (int tid, int tspeed)
{
	Switch(tspeed) {
	
	Case 1:
		GiveActorInventory(tid,"Tank_SpeedForwB",1); 
	break;
	Case 2:
		GiveActorInventory(tid,"Tank_SpeedBackB",1); 
	break;
	}
}


//██████████████████████████████████████████|RadiusGive|████████████████████████████████████████

script "RadiusGiveCSCC" (int GiveID, int GiveRadius, int GiveType)
{ 
int Target_TID;
int Target_Distance;
int FiringPlayer;
int PlayersTeam;
Bool GiveClearance;
//int IsTeamGame = ACS_ExecuteWithResult(975, 1);
//if(GiveRadius == 0){terminate;}

// GiveType 1 = self + Friendlies
// GiveType 2 = Friendlies only
// GiveType 3 = Self only
// GiveType 4 = Enemies only
// GiveType 5 = self + Enemies
// GiveType 6 = All but self
// GiveType 7 = All
//if(GiveType << 1){GiveType = 1;}
//if(GiveType >> 7){GiveType = 7;}
If(ActivatorTID() <= 999)
	{
	FiringPlayer= ACS_ExecuteWithResult(257, 0); //Returns the target of the activator
	}
else
	{
	FiringPlayer=ActivatorTID();
	}
PlayersTeam = GetPlayerInfo(FiringPlayer-1000, PLAYERINFO_TEAM);
For(int i = 0;i < ServerMax; i++)
	{
	GiveClearance = True;
	If(!PlayerInGame(i)){Continue;}
	If(ACS_ExecuteWithResult(975, 1))
		{
		switch(GiveType)
			{
			case 1:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM)){Continue;}
			Break;
			
			case 2:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM) || (PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) && i == FiringPlayer-1000)){Continue;}
			Break;
			
			case 3:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM) || (i != FiringPlayer-1000)){Continue;}
			Break;

			case 4:
			If(PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) || i == FiringPlayer-1000){Continue;}
			Break;
			
			case 5:
			If(PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) && i != FiringPlayer-1000){Continue;}
			Break;
			
			case 6:
			If(i == FiringPlayer-1000){Continue;}	
			Break;
			}
		}
	else
		{
		switch(GiveType)
			{
			case 1:
			If(i != FiringPlayer-1000){Continue;}
			Break;
			
			case 2:
			If(i == FiringPlayer-1000 || i != FiringPlayer-1000){Continue;}
			Break;
			
			case 3:
			If(i != FiringPlayer-1000){Continue;}
			Break;
			
			case 4:
			If(i == FiringPlayer-1000){Continue;}
			Break;
			
			Default:
			//If(i == FiringPlayer-1000 || i != FiringPlayer-1000){Continue;}
			Break;
			}
		}
	Target_TID = i+1000;
		If(xyzDistance(0,Target_TID) < GiveRadius) // && FiringPlayer!=Target_TID
			{
			GiveActorInventory(Target_TID,"PackageID", GiveID);
			GiveActorInventory(Target_TID,"GivePackage", 1);
			}
		}
	
}
//██████████████████████████████████████████|Healer Utilities|████████████████████████████████████████

script "MedivisionScript" (VOID) CLIENTSIDE
{ 
int Target_TID;
//int Target_Distance;
//int Activeplayer;
int PlayersTeam;
str TeamTag; 

Switch(PlayerTeam())
	{
	Case 0: TeamTag = "_BLUE"; Break;
	Case 1: TeamTag = "_RED"; Break;
	}

while (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0)
	{
	Delay(1);
PlayersTeam = GetPlayerInfo(ActivatorTID()-1000, PLAYERINFO_TEAM);
For(int p = 0;p < ServerMax; p++)
	{
	If(!PlayerInGame(p)){continue;}
	if(p+1000 == ActivatorTID()){continue;}
	if(checkWeapon("RespawnCamera")&&GetActorProperty(0,APROP_HEALTH)>0){continue;}
	If(PlayersTeam != GetPlayerInfo(p, PLAYERINFO_TEAM)){continue;}
	
	Target_TID = p+1000;
	If((xyzDistance(0,Target_TID) < 900) && Checksight(0,Target_TID,0))
		{
		SpawnForced(strparam(s:TinyBarHealth(Target_TID),s:TeamTag),GetActorX(Target_TID),GetActorY(Target_TID),GetActorZ(Target_TID) + (65 << 16));
		//GiveActorInventory(Target_TID,"Tinybarspawner", 1);
		}
	}
	}
}


Str TinyBarSprite[21] = {
"Tinybar0",
"Tinybar1",
"Tinybar2",
"Tinybar3",
"Tinybar4",
"Tinybar5",
"Tinybar6",
"Tinybar7",
"Tinybar8",
"Tinybar9",
"TinyBar10",
"Tinybar11",
"Tinybar12",
"Tinybar13",
"Tinybar14",
"Tinybar15",
"Tinybar16",
"Tinybar17",
"Tinybar18",
"Tinybar19",
"TinyBar20"
};

function str TinyBarHealth (int TargTID)
{
int output;
int HealthPercent;
int PlayerCurrentHealth;// = GetActorProperty(0,APROP_Health);
int PlayerMaxHealth;// = GetActorProperty(0,APROP_SpawnHealth);
int OverHealth;

	if(GetActorProperty(TargTID,APROP_HEALTH)<=0){PlayerCurrentHealth = 1; }
		Else{PlayerCurrentHealth = GetActorProperty(TargTID,APROP_Health);}
	if(GetActorProperty(TargTID,APROP_SpawnHealth)<=0){PlayerMaxHealth = 100; }
		Else{PlayerMaxHealth = GetActorProperty(TargTID,APROP_SpawnHealth);}
		
HealthPercent = ((PlayerCurrentHealth*100)/PlayerMaxHealth);
OverHealth = HealthPercent-100;
 if(OverHealth < 0){OverHealth = 0;}
  if(HealthPercent > 100){HealthPercent = 100;}

HealthPercent = HealthPercent / 10;
OverHealth = OverHealth / 5;

HealthPercent =  HealthPercent + OverHealth;
if(HealthPercent > 20){HealthPercent = 20;}
if(HealthPercent < 0){HealthPercent = 0;}
return (TinyBarSprite[HealthPercent]);
}

Script "HealRamp" (Int HealMin, Int HealMax)
{
int timeMax = 175;
int rampPerc = (GetActorPowerupTics(0,"HealStall_A")*100)/timeMax;
//log(i:GetActorPowerupTics(0,"HealStall_A"));
//log(i:rampPerc);
int output = (HealMax*(100 - rampPerc))/100;
//log(i:output);

if (output < HealMin){output = HealMin;}
SetResultValue(output);
}


Script "Actor_Classifier" (int TID, int CheckType)
{
bool output;

switch(CheckType)
	{
	case 0: if ((ClassifyActor(TID) & ACTOR_NONE)){output = true;} break;
	case 1: if ((ClassifyActor(TID) & ACTOR_WORLD)){output = true;} break;
	case 2: if ((ClassifyActor(TID) & ACTOR_PLAYER)){output = true;} break;
	case 3: if ((ClassifyActor(TID) & ACTOR_BOT)){output = true;} break;
	case 4: if ((ClassifyActor(TID) & ACTOR_VOODOODOLL)){output = true;} break;
	case 5: if ((ClassifyActor(TID) & ACTOR_MONSTER)){output = true;} break;
	case 6: if ((ClassifyActor(TID) & ACTOR_ALIVE)){output = true;} break;
	case 7: if ((ClassifyActor(TID) & ACTOR_DEAD)){output = true;} break;
	case 8: if ((ClassifyActor(TID) & ACTOR_MISSILE)){output = true;} break;
	case 9: if ((ClassifyActor(TID) & ACTOR_GENERIC)){output = true;} break;
	}

setresultvalue(output);
}

Script "HealthPercent" (int TargTID, int Type, int perval)
{
int HealthPercent;
int PlayerCurrentHealth;
int PlayerMaxHealth;

	if(GetActorProperty(TargTID,APROP_HEALTH)<=0){PlayerCurrentHealth = 1; }
		Else{PlayerCurrentHealth = GetActorProperty(TargTID,APROP_Health);}
	if(GetActorProperty(TargTID,APROP_SpawnHealth)<=0){PlayerMaxHealth = 1; }
		Else{PlayerMaxHealth = GetActorProperty(TargTID,APROP_SpawnHealth);}
		

// Type 0 = current percentage of health
// Type 1 = Value of Health at that percentage

Switch (Type)
	{
	default : HealthPercent = ((PlayerCurrentHealth*100)/PlayerMaxHealth); Break;
	Case 1 : HealthPercent = (fixeddiv(PlayerMaxHealth,100)*perval) >> 16; Break;
	}

SetResultValue(HealthPercent);
}

Script "OverhealDrain" (Int Tick)
{
if(GetActorProperty(0,APROP_HEALTH) > Tick){SetActorProperty(0,APROP_HEALTH,(GetActorProperty(0,APROP_HEALTH)-Tick));}
}