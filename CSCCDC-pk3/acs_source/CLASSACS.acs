//#library "classacs"

//#include "zcommon.acs"
//#include "cscclib.acs"

Script "CSACS_UKIINFO" (int IsExplosion)
{
int ThePlayer = ActivatorTID();
//SetActivatorToTarget(0);
int TotalDamage = 15;

If(CheckActorInventory(ThePlayer, "SnipeFlag")){TotalDamage = 35;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){TotalDamage -= 5;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){TotalDamage -= 2;}
If(CheckActorInventory(ThePlayer, "HomingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){TotalDamage += 7;}
If(CheckActorInventory(ThePlayer, "VelocityFlag") && IsExplosion == 0){TotalDamage = (TotalDamage * 0.7) >> 16;}
If(CheckActorInventory(ThePlayer, "NerfFlag")){TotalDamage += 5;}
	
SetHudSize(800, 680, True);
SetFont("SMALLFONT");
HudMessage(d:(TotalDamage),s:" damage";
HUDMSG_FADEOUT, 1, CR_GOLD, 60.1, 205.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 940.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 920.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 900.1, 5<<16);

If(CheckActorInventory(ThePlayer, "SnipeFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Shot Size -Fire Rate"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 215.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Fire Rate -Spread"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 215.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Projectiles Fired -Spread -Fire Rate"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.5, 215.5, 5<<16);;}
If(CheckActorInventory(ThePlayer, "HomingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Homing"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Arc"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.5, 5<<16);;}
If(CheckActorInventory(ThePlayer, "VelocityFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Speed +Ripper"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "NerfFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Damage Debuff"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "BouncingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Bouncing"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ExplodingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+EXPLOSIONS?!"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
}

//Script to handle aiming of Uki's vision
Script "CSACS_UKIREMOTE" (void)
{
int UkiVisionTID = ActivatorTID() - 100;
If(ThingCount(T_NONE, UkiVisionTID))
	{
	ACS_ExecuteAlways(976,0);
	//SetActorState(UkiVisionTID, "RemoteControl");
	SetPlayerProperty(0, 1, 0);
	ChangeCamera(UkiVisionTID, 0, 0);
	Spawnspot("RemoteSFX", UkiVisionTID);
	While(CheckInventory("UkiRemoteFlag"))
		{
		If(GetPlayerInput(-1 , INPUT_BUTTONS) & BT_ATTACK)
			{
			//GiveActorInventory(UkiVisionTID, "UkiAttackFlag", 1);
			GiveInventory("UkiAttackFlag", 1);
			}
		Delay(1);
		}
	}
TakeInventory("UkiRemoteFlag", 1);
SetPlayerProperty(0, 0, 0);
ACS_ExecuteAlways(976,0);
ChangeCamera(0, 0, 0);
Spawnspot("RemoteSFX", 0);
}

//Script for Uki's weapon damage
Script "CSACS_UKIDAMAGE" (int IsExplosion)
{
int x = GetActorX(0);
int y = GetActorY(0);
int z = GetActorZ(0);
int ThePlayer = ACS_NamedExecuteWithResult("core_gettarget");
//SetActivatorToTarget(0);
If(ThePlayer < 1000){SetResultValue(10);terminate;}
int TotalDamage = 15;
If(IsExplosion == 0)
	{
	If(CheckActorInventory(ThePlayer, "ExplodingFlag") && !CheckActorInventory(ThePlayer, "VelocityFlag")){SetResultValue(0);terminate;}
	}

If(CheckActorInventory(ThePlayer, "SnipeFlag")){TotalDamage = 35;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){TotalDamage -= 5;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){TotalDamage -= 2;}

If(CheckActorInventory(ThePlayer, "HomingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){TotalDamage += 7;}
If(CheckActorInventory(ThePlayer, "VelocityFlag") && IsExplosion == 0){TotalDamage = (TotalDamage * 0.7) >> 16;}
If(IsExplosion == 0)
	{
	If(CheckActorInventory(ThePlayer, "ExplodingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
	}
//printbold(i:TotalDamage);

If(CheckActorInventory(ThePlayer, "NerfFlag")){TotalDamage += 5;}
SetResultValue(TotalDamage);
}

//Script for the camera for Uki's vision
Script "CSACS_UKIREMOTEAIM" (void) CLIENTSIDE
{
int TargetPlayer= ActivatorTID() + 100;//ACS_ExecuteWithResult(257);
int PlayerPitch = GetActorPitch(TargetPlayer);
int PlayerAngle = GetActorAngle(TargetPlayer);
SetActorPitch(0, PlayerPitch);
SetActorAngle(0, PlayerAngle);
}

////////////////////////////////////LaggyCorperal stuff
script "ReloadWeapon" (int ammoTypes, int maxAmmo)  //Reload script.
{
	
	//Ammo types inside and outside the weapon.
	int in, out;
	str inAmmo, outAmmo;
	
	int magSize;//Max ammo inside.
	
	switch(ammoTypes)
	{
		case 1: //Tommy gun	
		inAmmo = "TommyAmmo";
		outAmmo = "FatBullets";
		magSize = 30;
		break;
		Case 2: //Grand Ammo
		inAmmo = "GrandAmmo";
		outAmmo = "ShelbyvilleRound";
		magSize = 8;
		break;
		default:
		print(s:"Specify ammotype ya dork");
		break;
	}
	
	
	in = CheckInventory(inAmmo);
	out = CheckInventory(outAmmo);
	
	//print(s:inAmmo, d:in, s:outAmmo, d:out);
	
	//If maxAmmo is defined, do not reload more than that.
	if (maxAmmo != 0 && magSize > (maxAmmo + in))
	{
		magSize = (maxAmmo + in);
	}
	
	if (out < (magSize-in)) //Can't reload the full weapon
			{
				TakeInventory(outAmmo,out);
				GiveInventory(inAmmo,out);
			}
			else
			{
				TakeInventory(outAmmo, magSize-in);
				GiveInventory(inAmmo, magSize-in);
			}		
	
	
}


Script "ForceReload"(void) NET //Reload using an item instead of +RELOAD
{
GiveInventory("ForceReload",1);
delay(1);
TakeInventory("ForceReload",1);
}

Script "CorpWeaponPickup" (int wep, int dropped)
{
//print(d:wep, s: " ", d: dropped); 


str giveWep; //Weapon's name
int coolDown;//Time before picking a weapon from map pickups again.
int coolDownActor; //Time before picking a weapon from map pickups again.
str wepTag; //Weapon's tag
str pickupMessage; //Something iunno
bool isGrenade; //Whenever it uses the grenade slot or the secondary weapon slot.

switch (wep)
{
	case 1:
		giveWep = "CorpFragGrenade";
		coolDown = 60;
		coolDownActor = "FragGrenadeCooldown";
		wepTag = "Fragmentation Grenade";
		pickupMessage = "You got the Fragmentation Grenade!\nNow with more fragmentation.\nDon't blow it up in front of your own face.";
		isGrenade = false;
		break;
	case 2:
		giveWep = "CorpGrandDad";
		coolDown = 60;
		coolDownActor = "GrandDadCooldown";
		wepTag = "Grand Dad";
		pickupMessage = "You got the Grand Dad semiautomatic rifle!\nReloading before firing all rounds is not recommended.";
		isGrenade = true;
		break;
	default:
		print(s:"no");
		break;
}




//if (!dropped) //cooldown check (temorarily removed)
//{
	if (CheckInventory(cooldownActor))
	{
		SetHudSize(256,224,0);
		setFont("SMALLFONT");
		HudMessage(s:wepTag, s:" cooldown: ",d:CheckInventory(cooldownActor);
		HUDMSG_FADEOUT, 1, CR_DARKGREEN, 128.0, 32.0, 1.0, 0.5);
		terminate;
	}
	else
	{
		giveInventory(cooldownActor, coolDown);
	}
//}

//Take any other weapon in the same slot.
//Not the same weapon because the player might be using it
//and that would deselect it?
if (isGrenade)
{
	takeUnlessItsThis("CorpFragGrenade",giveWep);
}
else
{
	takeUnlessItsThis("GrandDad",giveWep);
}


//Finally gibe weapon
GiveInventory(giveWep, 1);
Print(s:pickupMessage);
SetMugshotState("Grin");
localAmbientSound("Weapon/TommyLoad",127);//Might have different sounds for each weapon, eventually.
}

//This function takes items unless it's the right one.
function void takeUnlessItsThis (str takeThis, str unless)
{
	if (takeThis != unless)
	{
		takeInventory("takeThis",1);
	}
}

Script "CorpWeaponCooldown" ENTER
{
If (!CheckInventory("CorpArsenal"))
{
	//print(s:"ur not corperel");
	terminate;
}
While (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0)
{
	//print(s:"tictoc");
	TakeInventory("FragGrenadeCooldown",1);
	TakeInventory("GrandDadCooldown",1);
	delay(35);
}
}

Script "CorpWeaponCooldownRespawn" RESPAWN
{
ACS_NamedExecuteAlways("CorpWeaponCooldown",0);
}

//View recoil script
Script "CorpRecoil" (int horiz, int vert, int duration) CLIENTSIDE
//Horizontal angle, vertical angle and duration in tics
//(not counting 1 pause tic and comeback)
//MUST BE CLIENTSIDE IF ALL IT DOES IS MOVE PLAYER VIEW!
{
int i, theHecc, oldMove, moveGen, moveAngle, movePitch; //bullcrap
//Note to self: define behavior for 0 duration
moveGen = 0;
for (i = 1; i <= duration; i++)
{
	oldMove = moveGen;
	//What is trigonometry iunno
	theHecc = sin(((i*0.5)/duration) - 0.25);
	//log(f:theHecc);
	//More math bullcrap
	moveGen = ((theHecc) + 1.0)/2;
	//log(f:moveGen, s:" ", f:theHecc, s:" ", f:oldMove);
	moveAngle = fixedmul(horiz, moveGen - oldMove);
	movePitch = fixedmul(vert, moveGen - oldMove);
	
	setActorAngle(0, getActorAngle(0) + moveAngle);
	setActorPitch(0, getActorPitch(0) + moveAngle);
	delay(1);
}
if (getCVAR("CSCCB_CL_RecoilReset") == false) terminate;
//view reset
//print(s:"lol");
delay(1);
moveGen = 0;
horiz = horiz*(-1);
vert = vert*(-1);
for (i = 1; i <= duration; i++)
{
	oldMove = moveGen;
	theHecc = sin(((i*0.5)/duration) - 0.25);
	moveGen = ((theHecc) + 1.0)/2;
	
	moveAngle = fixedmul(horiz, moveGen - oldMove);
	movePitch = fixedmul(vert, moveGen - oldMove);
	
	setActorAngle(0, getActorAngle(0) + moveAngle);
	setActorPitch(0, getActorPitch(0) + moveAngle);
	delay(1);
}

}

//////////////////////////////////////Corporal Over and out//////////////////////////////////