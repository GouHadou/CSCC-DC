//#library "classacs"

//#include "zcommon.acs"
//#include "cscclib.acs"


script "CSACS_RadiusGive" (int GiveID, int GiveRadius, int GiveType)
{ 
int Target_TID;
int Target_Distance;
int FiringPlayer;
int PlayersTeam;
Bool GiveClearance;

// GiveType 1 = self + Friendlies
// GiveType 2 = Friendlies only
// GiveType 3 = Self only
// GiveType 4 = Enemies only
// GiveType 5 = self + Enemies
// GiveType 6 = All but self
// GiveType 7 = All

If(ActivatorTID() <= 999)
	{
	FiringPlayer= ACS_ExecuteWithResult(257, 0); //Returns the target of the activator
	}
else
	{
	FiringPlayer=ActivatorTID();
	}
PlayersTeam = GetPlayerInfo(FiringPlayer-1000, PLAYERINFO_TEAM);
For(int i = 0;i < ServerMax; i++)
	{
	GiveClearance = True;
	If(!PlayerInGame(i)){Continue;}
	if(!CheckSight(0,i+1000,0)){Continue;}
	If(ACS_ExecuteWithResult(975, 1))
		{
		switch(GiveType)
			{
			case 1:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM)){Continue;}
			Break;
			
			case 2:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM) || (PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) && i == FiringPlayer-1000)){Continue;}
			Break;
			
			case 3:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM) || (i != FiringPlayer-1000)){Continue;}
			Break;

			case 4:
			If(PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) || i == FiringPlayer-1000){Continue;}
			Break;
			
			case 5:
			If(PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) && i != FiringPlayer-1000){Continue;}
			Break;
			
			case 6:
			If(i == FiringPlayer-1000){Continue;}	
			Break;
			}
		}
	else
		{
		switch(GiveType)
			{
			case 1:
			If(i != FiringPlayer-1000){Continue;}
			Break;
			
			case 2:
			If(i == FiringPlayer-1000 || i != FiringPlayer-1000){Continue;}
			Break;
			
			case 3:
			If(i != FiringPlayer-1000){Continue;}
			Break;
			
			case 4:
			If(i == FiringPlayer-1000){Continue;}
			Break;
			
			Default:
			//If(i == FiringPlayer-1000 || i != FiringPlayer-1000){Continue;}
			Break;
			}
		}
	Target_TID = i+1000;
	If(xyzDistance(0,Target_TID) < GiveRadius) // && FiringPlayer!=Target_TID
		{
		GiveActorInventory(Target_TID,"PackageID", GiveID);
		GiveActorInventory(Target_TID,"GivePackage", 1);
		}
	}
}

script "CSACS_MedivisionScript" (int Weapon) CLIENTSIDE
{ 
if(Weapon==1){str WeaponRequired = GetWeapon();}
int Target_TID;
int PlayersTeam;
str TeamTag; 

if(ACS_ExecuteWithResult(975,1)!=1){terminate;}

Switch(PlayerTeam())
	{
	Case 0: TeamTag = "_Light"; Break;
	Case 1: TeamTag = "_Wily"; Break;
	Case 2: TeamTag = "_Cossack"; Break;
	Case 3: TeamTag = "_King"; Break;
	}

while(GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0 && !CheckActorInventory(ActivatorTID(),"CopyRobotUnmorphed"))
	{
	Delay(1);
	if(Weapon==1 && StrIcmp(GetWeapon(),WeaponRequired)!=0){terminate;}
	PlayersTeam = GetPlayerInfo(ActivatorTID()-1000, PLAYERINFO_TEAM);
	For(int p = 0; p < ServerMax; p++)
		{
		If(!PlayerInGame(p)){continue;}
		if(p+1000 == ActivatorTID()){continue;}
		If(PlayersTeam != GetPlayerInfo(p, PLAYERINFO_TEAM)){continue;}
		Target_TID = p+1000;
		If((xyzDistance(0,Target_TID) < 900) && Checksight(0,Target_TID,0))
			{
			if(CheckActorInventory(Target_TID,"CannotUseHealing")){SpawnForced(StrParam(s:TinyBarHealth(Target_TID),s:TeamTag,s:"_NoHeal"),GetActorX(Target_TID),GetActorY(Target_TID),GetActorZ(Target_TID) + (65 << 16));}
			else{SpawnForced(StrParam(s:TinyBarHealth(Target_TID),s:TeamTag),GetActorX(Target_TID),GetActorY(Target_TID),GetActorZ(Target_TID) + (65 << 16));}
			}
		}
	}
}


//Ukiyama Scripts
Script "CSACS_UKIINFO" (int IsExplosion)
{
int ThePlayer = ActivatorTID();
int TotalDamage = ACS_NamedExecuteWithResult("CSACS_UKIDAMAGE", 0, 1);

SetHudSize(800, 680, True);
SetFont("SMALLFONT");
HudMessage(d:(TotalDamage),s:" damage";
HUDMSG_FADEOUT, 1, CR_GOLD, 60.1, 205.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 940.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 920.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 900.1, 5<<16);

If(CheckActorInventory(ThePlayer, "SnipeFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Shot Size -Fire Rate"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 215.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Fire Rate -Spread"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 215.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Projectiles Fired -Spread -Fire Rate"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.5, 215.5, 5<<16);;}
If(CheckActorInventory(ThePlayer, "HomingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Homing"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Arc"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.5, 5<<16);;}
If(CheckActorInventory(ThePlayer, "VelocityFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Speed +Ripper"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "NerfFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Damage Debuff"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "BouncingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Bouncing"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ExplodingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+EXPLOSIONS?!"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
}

//Script to handle aiming of Uki's vision
Script "CSACS_UKIREMOTE" (void)
{
int UkiVisionTID = ActivatorTID() - 100;
If(ThingCount(T_NONE, UkiVisionTID))
	{
	ACS_ExecuteAlways(976,0);
	//SetActorState(UkiVisionTID, "RemoteControl");
	SetPlayerProperty(0, 1, 0);
	ChangeCamera(UkiVisionTID, 0, 0);
	Spawnspot("RemoteSFX", UkiVisionTID);
	While(CheckInventory("UkiRemoteFlag"))
		{
		If(GetPlayerInput(-1 , INPUT_BUTTONS) & BT_ATTACK)
			{
			//GiveActorInventory(UkiVisionTID, "UkiAttackFlag", 1);
			GiveInventory("UkiAttackFlag", 1);
			}
		Delay(1);
		}
	}
TakeInventory("UkiRemoteFlag", 1);
SetPlayerProperty(0, 0, 0);
ACS_ExecuteAlways(976,0);
ChangeCamera(0, 0, 0);
Spawnspot("RemoteSFX", 0);
}

//Script for Uki's weapon damage
Script "CSACS_UKIDAMAGE" (int IsExplosion, int Info)
{
int ThePlayer;
If(ActivatorTID() >=1000){ThePlayer = ActivatorTID();}
Else {ThePlayer = ACS_NamedExecuteWithResult("core_gettarget");}

If(ThePlayer < 1000){SetResultValue(10);terminate;}
int TotalDamage = 15;

If(IsExplosion == 0 && Info == 0)
	{
	If(Info!=1){If(CheckActorInventory(ThePlayer, "ExplodingFlag") && !CheckActorInventory(ThePlayer, "VelocityFlag")){SetResultValue(0);terminate;}}
	}
//int TotalDamage = UkiDamageValue(ThePlayer, IsExplosion);

If(CheckActorInventory(ThePlayer, "SnipeFlag")){TotalDamage += 20;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){TotalDamage -= 5;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){TotalDamage -= 6;}

If(CheckActorInventory(ThePlayer, "HomingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){TotalDamage += 7;}
If(CheckActorInventory(ThePlayer, "VelocityFlag") && IsExplosion == 0){TotalDamage = (TotalDamage * 0.7) >> 16;}

If(IsExplosion == 0 && Info == 0)
	{
	If(CheckActorInventory(ThePlayer, "ExplodingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
	}
//printbold(i:TotalDamage);

If(CheckActorInventory(ThePlayer, "NerfFlag")){TotalDamage += 3;}

SetResultValue(TotalDamage);
}

//Script for the camera for Uki's vision
Script "CSACS_UKIREMOTEAIM" (void) CLIENTSIDE
{
int TargetPlayer= ActivatorTID() + 100;//ACS_ExecuteWithResult(257);
int PlayerPitch = GetActorPitch(TargetPlayer);
int PlayerAngle = GetActorAngle(TargetPlayer);
SetActorPitch(0, PlayerPitch);
SetActorAngle(0, PlayerAngle);
}

//End Ukiyama

////////////////////////////////////LaggyCorperal stuff
script "CSACS_CorpReload" (int ammoTypes, int maxAmmo)  //Reload script.
{
	
	//Ammo types inside and outside the weapon.
	int in, out;
	str inAmmo, outAmmo;
	
	int magSize;//Max ammo inside.
	
	switch(ammoTypes)
	{
		case 1: //Tommy gun	
		inAmmo = "TommyAmmo";
		outAmmo = "FatBullets";
		magSize = 30;
		break;
		Case 2: //Grand Ammo
		inAmmo = "GrandAmmo";
		outAmmo = "ShelbyvilleRound";
		magSize = 8;
		break;
		default:
		print(s:"Specify ammotype ya dork");
		break;
	}
	
	
	in = CheckInventory(inAmmo);
	out = CheckInventory(outAmmo);
	
	//print(s:inAmmo, d:in, s:outAmmo, d:out);
	
	//If maxAmmo is defined, do not reload more than that.
	if (maxAmmo != 0 && magSize > (maxAmmo + in))
	{
		magSize = (maxAmmo + in);
	}
	
	if (out < (magSize-in)) //Can't reload the full weapon
			{
				TakeInventory(outAmmo,out);
				GiveInventory(inAmmo,out);
			}
			else
			{
				TakeInventory(outAmmo, magSize-in);
				GiveInventory(inAmmo, magSize-in);
			}		
	
	
}

//View recoil script
Script "CSACS_CorpRecoil" (int horiz, int vert, int duration) CLIENTSIDE
{
int i, theHecc, oldMove, moveGen, moveAngle, movePitch; 
moveGen = 0;
for (i = 1; i <= duration; i++)
{
	oldMove = moveGen;
	theHecc = sin(((i*0.5)/duration) - 0.25);
	moveGen = ((theHecc) + 1.0)/2;
	moveAngle = fixedmul(horiz, moveGen - oldMove);
	movePitch = fixedmul(vert, moveGen - oldMove);
	
	setActorAngle(0, getActorAngle(0) + moveAngle);
	setActorPitch(0, getActorPitch(0) + moveAngle);
	delay(1);
}
if (getCVAR("CSCCB_CL_RecoilReset") == false) terminate;
delay(1);
moveGen = 0;
horiz = horiz*(-1);
vert = vert*(-1);
for (i = 1; i <= duration; i++)
{
	oldMove = moveGen;
	theHecc = sin(((i*0.5)/duration) - 0.25);
	moveGen = ((theHecc) + 1.0)/2;
	
	moveAngle = fixedmul(horiz, moveGen - oldMove);
	movePitch = fixedmul(vert, moveGen - oldMove);
	
	setActorAngle(0, getActorAngle(0) + moveAngle);
	setActorPitch(0, getActorPitch(0) + moveAngle);
	delay(1);
}
}

//Messatsu
Script "CSACS_MessAbilityCheck" (void)
{
int InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);;
int InputOldButtons = InputButtons;
while (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0 && CheckInventory("IsMessatsu"))
	{
	InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_SPEED|BT_USER1) == 1 )
		{
		If(!CheckInventory("NoParry")){GiveInventory("MessParryFlag", 1);}
		}
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_JUMP)==3)
		{
		GiveInventory("MessAirMod", 1);
		}
	Delay(1);
	InputOldButtons = InputButtons;
	}

}
Script "CSACS_DemonFlipCheck" (void)
{
int InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);;
int InputOldButtons = InputButtons;
while (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0 && CheckInventory("DemonFlipActive"))
	{
	InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_ATTACK) == 1 )
		{
		GiveInventory("MessPalm", 1);
		terminate;
		}
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_ALTATTACK) == 1 )
		{
		GiveInventory("MessKick", 1);
		terminate;
		}
	Delay(1);
	InputOldButtons = InputButtons;
	}

}


Script "CSACS_MessParryHealth" (int CurrentHealth)
{
int PlayerTID = ActivatorTID();

Do
	{
	If(CurrentHealth < GetActorProperty(PlayerTID, APROP_HEALTH)){CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);}
	If(CurrentHealth > GetActorProperty(PlayerTID, APROP_HEALTH))
		{
		If(CheckInventory("OverhealValue") && (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH))<5)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		Else
			{
			GiveInventory("MessParrySuccess", 1);
			SetActorProperty(0,APROP_HEALTH,(CurrentHealth));
			}
		}
	Delay(1);
	}
While(CheckInventory("MessParry") || CheckInventory("ParryBlock"));
}

Script "CSACS_MessEnemyProximity" (int distance)
{
int ReturnValue = 0;
int PlayerTID = ActivatorTID();
int CurrentTeam = GetPlayerInfo(PlayerNumber(), PLAYERINFO_TEAM);
For(int i = 0; i < 64; i++)
	{
	If(PlayerInGame(i))
		{
		If(i==PlayerNumber()){continue;}
		Switch(ACS_ExecuteWithResult(975, 1))
			{
			Case 0:
			If(XYZDistance(PlayerTID, i+1000) < distance)
				{
				If(CheckSight(PlayerTID, i+1000, 0))
					{
					ReturnValue=1; 
					i=64;
					GiveInventory("MessMeterOkay", 1);
					}
				Else
					{
					If(CheckInventory("MessMeterOkay"))
						{
						ReturnValue=1; 
						i=64;
						}
					}
				}
			break;
			Case 1:
			If(CurrentTeam == GetPlayerInfo(i, PLAYERINFO_TEAM)){continue;}
			If(XYZDistance(PlayerTID, i+1000) < distance)
				{
				If(CheckSight(PlayerTID, i+1000, 0))
					{
					ReturnValue=1; 
					i=64;
					GiveInventory("MessMeterOkay", 1);
					}
				Else
					{
					If(CheckInventory("MessMeterOkay"))
						{
						ReturnValue=1; 
						i=64;
						}
					}
				}
			break;
			}
		}
	}
SetResultValue(ReturnValue);
}

Script "CSACS_MessDamageAmmo" (void)
{
Delay(1);
int PlayerTID = ActivatorTID();
int CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);

while(GetActorProperty(PlayerTID, APROP_HEALTH) > 0 && CheckInventory("MessatsuWep"))
	{
	While(CurrentHealth <= GetActorProperty(PlayerTID, APROP_HEALTH))
		{
		Delay(1);
		If(GetActorProperty(PlayerTID, APROP_HEALTH) > CurrentHealth)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		}
	If(GetActorProperty(PlayerTID, APROP_HEALTH) > 0)
		{
		GiveActorInventory(PlayerTID, "MessatsuAmmo", (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH))/3);
		CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
		}
	}
}

//Ice/Sparky
Script "CSACS_IceSparkyFusion" (void)
{
Delay(1);
int PlayerTID = ActivatorTID();
int FusionStock = CheckInventory("FusionStock");
If(FusionStock < 1){FusionStock = 1;}
int CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);

while(GetActorProperty(PlayerTID, APROP_HEALTH) > 0 && (CheckInventory("IceWep") || CheckInventory("SparkyWep")))
	{
	While(CurrentHealth <= GetActorProperty(PlayerTID, APROP_HEALTH))
		{
		Delay(1);
		If(CheckInventory("FusionMeter")>=250)
			{
			TakeInventory("FusionMeter", 999);
			GiveInventory("IceSparkyCombine", 1);
			}
		If(GetActorProperty(PlayerTID, APROP_HEALTH) > CurrentHealth)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		}
	FusionStock = CheckInventory("FusionStock");
	If(GetActorProperty(PlayerTID, APROP_HEALTH) > 0)
		{
		If(!CheckInventory("IceSparkyFusion") && !CheckInventory("IceSparkyCombine"))
			{
			GiveActorInventory(PlayerTID, "FusionMeter", (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH))*FusionStock);
			}
		CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
		}
	}
}

script "CSACS_IceSparkSwap" (int speed)
{

Switch(speed)
	{
	Case 0:
	SetActorProperty(0,APROP_SPEED,1.0);
	SetActorProperty(0,APROP_JUMPZ,10.0);
	break;
	
	Case 1:
	SetActorProperty(0,APROP_SPEED,1.6);
	SetActorProperty(0,APROP_JUMPZ,15.0);
	break;
	}

}

//Tank Operator
function bool checkForMovement(int buttons) {
	int result = 1;

	if (buttons & BT_MOVERIGHT){
		result+=2;
	}
	if (buttons & BT_MOVELEFT){
		result+=4;
	}
	if (buttons & BT_BACK){
		result+=8;
	}
	if (buttons & BT_FORWARD){
		result+=16;
	}

	return(result);
}

function int fdistanceVal (int x, int y, int z)
{
	int len;

	int ang = vectorangle(x,y);
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
	else len = fixeddiv(x, cos(ang));

	ang = vectorangle(len, z);
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(z, sin(ang));
	else len = fixeddiv(len, cos(ang));

	return len;
}

script "CSACS_Tank_ProjectilePort" (int maxDist) //Borrowed from cbm
{
int target = ACS_ExecuteWithResult(257);

if(getActorProperty(0,APROP_HEALTH) <= 0 || getActorProperty(target,APROP_HEALTH) <= 0) {
	terminate;
}

maxDist = maxDist << 16;

int xDiff = getActorX(0) - getActorX(target);
int yDiff = getActorY(0) - getActorY(target);
int zDiff = getActorZ(0) - getActorZ(target);

if(fdistanceVal(xDiff,yDiff,zDiff) > maxDist) {
	terminate;
}

while (true) {
	xDiff += getActorVelX(0);
	yDiff += getActorVelY(0);
	zDiff += getActorVelZ(0);
	SetActorVelocity(target, xDiff, yDiff, zDiff, 0, 0);
	//Log(s:"MOVED");
	//GiveActorInventory(target,"ProjectilePorting",1);

	delay(1);

	if(getActorProperty(0,APROP_HEALTH) <= 0 || getActorProperty(target,APROP_HEALTH) <= 0 || CheckInventory("ProjectilePortDead")) {
		//Log(s:"Someone is Dead");
		GiveActorInventory(target,"ProjectilePortDead",1);
		//TakeActorInventory(target,"ProjectilePorting",1);
		terminate;
	}
	xDiff = getActorX(0) - getActorX(target);
	yDiff = getActorY(0) - getActorY(target);
	zDiff = getActorZ(0) - getActorZ(target);
	if(fdistanceVal(xDiff,yDiff,zDiff) > maxDist) {
		//Log(s:"Someone is too far");
		SetActorState(0,"Death",1);
		GiveActorInventory(target,"ProjectilePortDead",1);
		//TakeActorInventory(target,"ProjectilePorting",1);
		terminate;
	}

}
}

script "CSACS_Tank_CheckButtons" (void) {SetResultValue(checkForMovement(GetPlayerInput(-1, INPUT_BUTTONS)));}
script "CSACS_Tank_ChangeAngle" (int tid, int newangle) {SetActorAngle(tid,GetActorAngle(tid)+newangle);}

script "CSACS_Tank_SetTankSpecies" (int enable)
{
	Switch(enable) {
	Case 1:
	SetActorProperty(0,APROP_ViewHeight,64.0);
	break;
	Case 0:
	SetActorProperty(0,APROP_ViewHeight,41.0);
	break;
	}
}

script "CSACS_Tank_Speedster" (int tid, int tspeed)
{
	Switch(tspeed) {
	
	Case 1:
		GiveActorInventory(tid,"Tank_SpeedForwB",1); 
	break;
	Case 2:
		GiveActorInventory(tid,"Tank_SpeedBackB",1); 
	break;
	}
}

//Korby
Script "KorbyBlueMagicAbsorb" (void)
{
int PlayerTID = ActivatorTID();
int BeforeHealth = CheckInventory("KorbyHealthFlag");
If (BeforeHealth <= 0){Terminate;}
SetPlayerProperty(0, 1, PROP_BUDDHA);
int BMHealth = 999;
int CurrentHealth = BMHealth;
int Diff= 0;
int BMValue = 0;
SetActorProperty(PlayerTID, APROP_Health, BMHealth);
TakeActorInventory(PlayerTID, "KorbyHealthFlag", 999);
While(CheckInventory("BMHoldFlag"))
	{
	Diff = CurrentHealth - GetActorProperty(PlayerTID, APROP_Health);
	If(BMValue > 0 && Diff == 0){break;}
	If(Diff > 0)
		{
		BMValue+=Diff;
		CurrentHealth = GetActorProperty(PlayerTID, APROP_Health);
		If(BMValue > 100){break;} //Can't absorb pits or quickbeams.
		Delay(5);
		}
	Delay(1);
	}
If(BMValue > 0)
	{
	//PrintBold(i:BMValue);
	GiveActorInventory(PlayerTID, "BMFlag", 1);
	If(BMValue >= 2 && BMValue < 10){GiveActorInventory(PlayerTID, "THOUF", 1);}
	If(BMValue >= 10 && BMValue < 20){GiveActorInventory(PlayerTID, "AQUAF", 1);}
	If(BMValue >= 20 && BMValue < 30){GiveActorInventory(PlayerTID, "LIMIF", 1);}
	If(BMValue >= 30 && BMValue < 40){GiveActorInventory(PlayerTID, "FLAMF", 1);}
	If(BMValue >= 40 && BMValue < 50){GiveActorInventory(PlayerTID, "BLASF", 1);}
	If(BMValue >= 50 && BMValue < 60){GiveActorInventory(PlayerTID, "FLASF", 1);}
	If(BMValue >= 60 && BMValue < 70){GiveActorInventory(PlayerTID, "TIMEF", 1);}
	If(BMValue >= 70 && BMValue < 80){GiveActorInventory(PlayerTID, "WHITF", 1);}
	If(BMValue >= 80 && BMValue < 90){GiveActorInventory(PlayerTID, "MANTF", 1);}
	If(BMValue >= 90 && BMValue < 100){GiveActorInventory(PlayerTID, "SELFFGive", 1);}
	If(BMValue >= 100){GiveActorInventory(PlayerTID, "BADBF", 1);}
	If(BMValue == 1){GiveActorInventory(PlayerTID, "SELFF", 1);} //Korby, WHY?!
	}
SetActorProperty(PlayerTID, APROP_Health, BeforeHealth);
SetPlayerProperty(0, 0, PROP_BUDDHA);
}

//Pistonman
Script "CSACS_PistonFistFX" (int playerTid, int arm, int Player_Team) CLIENTSIDE
{
	str P_team = "";
	str ArmType = "";
	if(arm==2){ArmType = "2";}
	if(arm==1){ArmType = "1";}
    int plX; int plY;  int plZ;
    int grX; int grY;  int grZ;
    int vX;  int vY;   int vZ;
    int nX;  int nY;   int nZ;
    int bX;  int bY;   int bZ;
    int magnitude;
    int pointCount;
    int pointOffset;
	int density = 24;
	switch(Player_Team)
		{
		Case 0:
		P_team = "B";
		break;
		Case 1:
		P_team = "R";
		break;
		Case 2:
		P_team = "G";
		break;
		Case 3:
		P_team = "Y";
		break;
		}

	str SpawnName = StrParam(s:"PistonCoilFX", s:ArmType, s:P_team);

	while((ClassifyActor(0) == 128||ClassifyActor(0) == 256) && GetActorProperty(playerTid, APROP_HEALTH)>0){

		plX = GetActorX(playerTid); grX = GetActorX(0);
		plY = GetActorY(playerTid); grY  = GetActorY(0);
		plZ = GetActorZ(playerTid)+(14 << 16); grZ  = GetActorZ(0);
		//+14 to the spawn height of ^the player so the chain doesn't spawn from their feet.
		vX = grX - plX;   vY = grY - plY;   vZ = grZ - plZ;

		magnitude = magnitudeThree(vX >> 16, vY >> 16, vZ >> 16);

		pointCount  = magnitude / density;
		pointOffset = magnitude - (pointCount * density);


		//if(grX == 0 && grY == 0 && grZ == 0){terminate;} 

		if (magnitude != 0)
		{
			nX = vX / magnitude; nY = vY / magnitude; nZ = vZ / magnitude;

			int i; int j;
			for (i = 0; i < pointCount; i++)
			{
				j = (i * density) + pointOffset;

				bX = (nX * j) + plX;
				bY = (nY * j) + plY;
				bZ = (nZ * j) + plZ;//+(16 << 16);

				Spawn(SpawnName, bX, bY, bZ);
			}
		}
		Delay(1);
	}
}



script "BadzWarp" (void){
	int xspeed = GetActorVelX(ActivatorTID());
	int yspeed = GetActorVelY(ActivatorTID());
	int zspeed = GetActorVelZ(ActivatorTID());
	ThrustThing(GetActorAngle(ActivatorTID()) >> 8,128,1,0);
	Delay(1);
	SetActorVelocity(0,xspeed,yspeed,zspeed,false,false);
}


script "BULL_SLEEPER" (int time)
{
	int CurrentHP = GetActorProperty(0,APROP_Health);
	int RegHP = GetActorProperty(0,APROP_Health);
	
	while(CurrentHP > 0) {
		CurrentHP = GetActorProperty(0,APROP_Health);
		if(CurrentHP < RegHP) {
			GiveActorInventory(0,"UnSleeperTag",1);
			//Log(s:"UnSleeperTag given");
			terminate;
		}
		Delay(1);
		if(time <= 0) {
			GiveActorInventory(0,"UnSleeperTag",1);
			//Log(s:"UnSleeperTag given - timed");
			terminate;
		}
		time--;
	}
}

//======|Damage Faloff Formula Script
Script "DamageRate" (int ModDamage, int DistStart, int RampRate) //DamageDropoff Script
{
int Damage = NoNeg(ModDamage - NoNeg(xyzdistance(0, ACS_ExecuteWithResult(257, 0))-DistStart)/RampRate);
SetResultValue(Damage);
}

// Returns a number below 0 as 0
Function int NoNeg (int Numb)
{
Int Output;

if(Numb > 0){Output = Numb;}
else{Output = 0;}
return Output;
}


Script "LightScreenSyncher" (void) 
{
	//int Player = ACS_NamedExecuteWithResult("core_gettarget",0);
	int BaseTID = ActivatorTID()-1000;
	int Deduction;
	// Loop if the base is active still
	while(GetUserVariable(BaseTID, "User_ScreenHP")>0
	&& ThingCount(T_NONE,BaseTID) > 0
	){
	if (GetActorProperty(0, APROP_HEALTH) != GetActorProperty(0, APROP_SPAWNHEALTH))
		{
		Deduction = GetActorProperty(0, APROP_SPAWNHEALTH) - GetActorProperty(0, APROP_HEALTH);
		Healthing(9999);
		SetUserVariable(BaseTID, "User_ScreenHP",GetUserVariable(BaseTID, "User_ScreenHP")-Deduction);
		}
		//TakeActorInventory(Player,"LightScreenHealth",999);
		//GiveActorInventory(Player,"LightScreenHealth",GetUserVariable(BaseTID, "User_ScreenHP"));
		Delay(1);
	}
	
	// Remove
	Thing_Remove(0);
}

Script "LightScreenKiller" (Void)
{
int Player = ACS_NamedExecuteWithResult("core_gettarget",0);

	//While(ThingCount(T_NONE,4000+(Player))
	//||ThingCount(T_NONE,5000+(Player))
	//)
	//{
	SetActorState (4000+(Player), "Perish");
	SetActorState (5000+(Player), "Perish");
	//}
}

Script "ScreenHealthSynch" (VOID)
{
int BaseTID = ActivatorTID();
int TargetTID = ACS_ExecuteWithResult(257,0);

	while(GetUserVariable(BaseTID, "User_ScreenHP")>0
	&& ThingCount(T_NONE,BaseTID) > 0
	){
		TakeActorInventory(TargetTID,"LightScreenHealth",999);
		GiveActorInventory(TargetTID,"LightScreenHealth",GetUserVariable(BaseTID, "User_ScreenHP"));
		Delay(1);
	}
}


Script "Aegis_ShieldCheck" (int on_self)
{
int TargetTID;
int TargShieldEnergy;
int HealthReturn;
// for the deploy shield, check how much shield energy the player has
if(on_self > 0){TargetTID = ActivatorTID();}
	Else{TargetTID = ACS_ExecuteWithResult(257,0);}

	TargShieldEnergy = CheckActorInventory(TargetTID,"ShieldEnergy");
	HealthReturn = ValueMap(TargShieldEnergy,350,1,500,1);
	//log(i:TargShieldEnergy,s:" to ",i:HealthReturn); 
SetResultValue(HealthReturn);
}

Script "Aegis_ShieldEnergySynch" (void)
{

int BaseTID = ActivatorTID();
int TargetTID = ACS_ExecuteWithResult(257,0);
int ScreenHealth = (GetUserVariable(BaseTID, "User_ScreenHP") ); //- 200

int ShieldReturn; 

TakeActorInventory(TargetTID,"LightScreenHealth",9999);
TakeActorInventory(TargetTID,"ShieldEnergy",999);
if (ScreenHealth > 0)
	{
		ShieldReturn = ValueMap(ScreenHealth,500,1,350,1);
		GiveActorInventory(TargetTID,"ShieldEnergy",ShieldReturn);
	}
	Else{GiveActorInventory(TargetTID,"K_ShieldBreak",1);}
}



Script "WepBloomStat" (void)
{
int FiringPlayer= ACS_ExecuteWithResult(257, 0);
SetResultValue(checkactorinventory(FiringPlayer,"WepBloomItem"));
}

Script "PlayerSpeciesSynch" (VOID)
{
int TargetTID = ACS_ExecuteWithResult(257,0);
//int IsTeamGame = ACS_ExecuteWithResult(975, 1);

	if(!IsTeamGame)
	{
		setactorproperty(0,APROP_SPECIES,Getactorproperty(TargetTID,APROP_SPECIES));
	}
}