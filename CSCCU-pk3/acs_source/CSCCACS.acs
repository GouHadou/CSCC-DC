#library "CSCCACS"
//#include "zcommon.acs"
//#include "8bdmlib.acs"
#include "BASEC.acs"

#DEFINE CSACS_ICESPARKSWAP 142
#DEFINE CSACS_UKIINFO 145
#DEFINE CSACS_UKIREMOTEAIM 146
#DEFINE CSACS_UKIREMOTE 147
#DEFINE CSACS_UKIDAMAGE 148
#DEFINE CSACS_ROZPOISON 149
#DEFINE CSACS_ROZPOISONVIS 150
#DEFINE CSACS_SETHEALTH 151
#DEFINE CSACS_BLAZKORELOAD 770

#DEFINE CSACS_FZDASH 302
#DEFINE CSACS_JCSPEED 790
#DEFINE CSACS_SPEEDMODS 777
#DEFINE CSACS_BEEDBOTWEP 654
#DEFINE CSACS_SAVIORGRAVITY 778
#DEFINE CSACS_BIKHEALTH 774
#DEFINE CSACS_REDEYESHEALTH 666
#DEFINE CSACS_SHOVER 779

//Ice / Sparky speed / jump changing
script CSACS_ICESPARKSWAP (int speed)
{

Switch(speed)
	{
	Case 0:
	SetActorProperty(0,APROP_SPEED,1.0);
	SetActorProperty(0,APROP_JUMPZ,10.0);
	break;
	
	Case 1:
	SetActorProperty(0,APROP_SPEED,1.6);
	SetActorProperty(0,APROP_JUMPZ,15.0);
	break;
	}

}

//Script for Uki's Hud Info
Script CSACS_UKIINFO (int IsExplosion)
{
int ThePlayer = ACS_ExecuteWithResult(257);
//SetActivatorToTarget(0);
If(ThePlayer < 1000){SetResultValue(10);terminate;}
int TotalDamage = 15;

If(CheckActorInventory(ThePlayer, "SnipeFlag")){TotalDamage = 35;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){TotalDamage -= 5;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){TotalDamage -= 2;}
If(CheckActorInventory(ThePlayer, "HomingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){TotalDamage += 7;}
If(CheckActorInventory(ThePlayer, "VelocityFlag") && IsExplosion == 0){TotalDamage = (TotalDamage * 0.7) >> 16;}
If(CheckActorInventory(ThePlayer, "NerfFlag")){TotalDamage += 5;}
    SetResultValue(TotalDamage);
	
SetHudSize(800, 680, True);
SetFont("SMALLFONT");
HudMessage(d:(TotalDamage),s:" damage";
HUDMSG_FADEOUT, 1, CR_GOLD, 60.1, 205.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 940.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 920.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 900.1, 5<<16);

If(CheckActorInventory(ThePlayer, "SnipeFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Shot Size -Fire Rate"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 215.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Fire Rate -Spread"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 215.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Projectiles Fired -Spread -Fire Rate"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.5, 215.5, 5<<16);;}
If(CheckActorInventory(ThePlayer, "HomingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Homing"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Arc"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.5, 5<<16);;}
If(CheckActorInventory(ThePlayer, "VelocityFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Speed +Ripper"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "NerfFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Damage Debuff"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "BouncingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Bouncing"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ExplodingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+EXPLOSIONS?!"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
}

//Script to handle aiming of Uki's vision
Script CSACS_UKIREMOTE (void)
{
int UkiVisionTID = ActivatorTID() - 100;
If(ThingCount(T_NONE, UkiVisionTID))
	{
	ACS_ExecuteAlways(976,0);
	//SetActorState(UkiVisionTID, "RemoteControl");
	SetPlayerProperty(0, 1, 0);
	ChangeCamera(UkiVisionTID, 0, 0);
	Spawnspot("RemoteSFX", UkiVisionTID);
	While(CheckInventory("UkiRemoteFlag"))
		{
		If(GetPlayerInput(-1 , INPUT_BUTTONS) & BT_ATTACK)
			{
			//GiveActorInventory(UkiVisionTID, "UkiAttackFlag", 1);
			GiveInventory("UkiAttackFlag", 1);
			}
		Delay(1);
		}
	}
TakeInventory("UkiRemoteFlag", 1);
SetPlayerProperty(0, 0, 0);
ACS_ExecuteAlways(976,0);
ChangeCamera(0, 0, 0);
Spawnspot("RemoteSFX", 0);
}

//Script for Uki's weapon damage
Script CSACS_UKIDAMAGE (int IsExplosion)
{
int x = GetActorX(0);
int y = GetActorY(0);
int z = GetActorZ(0);
int ThePlayer = ACS_ExecuteWithResult(257);
//SetActivatorToTarget(0);
If(ThePlayer < 1000){SetResultValue(10);terminate;}
int TotalDamage = 15;
If(IsExplosion == 0)
	{
	If(CheckActorInventory(ThePlayer, "ExplodingFlag") && !CheckActorInventory(ThePlayer, "VelocityFlag")){SetResultValue(0);terminate;}
	}

If(CheckActorInventory(ThePlayer, "SnipeFlag")){TotalDamage = 35;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){TotalDamage -= 5;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){TotalDamage -= 2;}

If(CheckActorInventory(ThePlayer, "HomingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){TotalDamage += 7;}
If(CheckActorInventory(ThePlayer, "VelocityFlag") && IsExplosion == 0){TotalDamage = (TotalDamage * 0.7) >> 16;}
If(IsExplosion == 0)
	{
	If(CheckActorInventory(ThePlayer, "ExplodingFlag")){TotalDamage = (TotalDamage * 0.75) >> 16;}
	}
//printbold(i:TotalDamage);

If(CheckActorInventory(ThePlayer, "NerfFlag")){TotalDamage += 5;}
SetResultValue(TotalDamage);
}

//Script for the camera for Uki's vision
Script CSACS_UKIREMOTEAIM (void) CLIENTSIDE
{
int TargetPlayer=ActivatorTID() + 100;//ACS_ExecuteWithResult(257);
int PlayerPitch = GetActorPitch(TargetPlayer);
int PlayerAngle = GetActorAngle(TargetPlayer);
SetActorPitch(0, PlayerPitch);
SetActorAngle(0, PlayerAngle);
}

script CSACS_ROZPOISON (int BleedingTarget)
{
while(CheckActorInventory(BleedingTarget, "BleedingFlag")>0)
	{
	Thing_Move(0,BleedingTarget,1);
	Delay(1);
	}
GiveInventory("CollideFlag",1);
}

//Handles Rozark's DoT
Script CSACS_ROZPOISONVIS (void) 
{
{
int BleedingFlagCount;
FadeTo(150,0,0,0.5,0.05);
Delay(10);
While(CheckInventory("BleedingFlag")>0)
	{
	BleedingFlagCount=CheckInventory("BleedingFlag");
	if(BleedingFlagCount>100){BleedingFlagCount=100;}
	FadeTo(150,0,0,FixedDiv(BleedingFlagCount,100),0.0);
	TakeInventory("BleedingFlag",1);
	Delay(1);
	}
	FadeTo(150,0,0,0.0,0.0);
	}
}

//Sets player health since A_SetHealth doesn't exist yet
Script CSACS_SETHEALTH (int HealthToValue)
{
SetActorProperty(0, APROP_HEALTH, HealthToValue);
}

/////////////////////Finite Zero//////////////////////////////////////////////////////
script CSACS_FZDASH (void)
{
int buttonsFZ = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
//int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
if (buttonsFZ & BT_FORWARD)
{
	SetResultValue(1);
	//Print(s:"FORWARD");
	ThrustThing((GetActorAngle(ActivatorTID())*255)>>16, 35, 1, 0);
	terminate;
}
if (buttonsFZ & BT_BACK)
{
	SetResultValue(2);
	//Print(s:"BACK");
	ThrustThing((GetActorAngle(ActivatorTID())*255)>>16, -35, 1, 0);
	terminate;
}
if (buttonsFZ & BT_MOVELEFT)
{
	SetResultValue(3);
	//Print(s:"LEFT");
	ThrustThing((GetActorAngle(ActivatorTID())*255)+64.0>>16, 35, 1, 0);
	terminate;
}
if (buttonsFZ & BT_MOVERIGHT)
{
	SetResultValue(4);
	ThrustThing((GetActorAngle(ActivatorTID())*255)+192.0>>16, 35, 1, 0);
	terminate;
}
SetResultValue(0);
//ThrustThing((GetActorAngle(ActivatorTID())*255)>>16, 35, 1, 0);
}
///////////////////////////////////////////////////


script CSACS_JCSPEED (void) //Jack Corvus momentum system
{
switch(CheckInventory("JcMomentum"))
	{
	case 0:
		SetActorProperty(0,APROP_SPEED,1.0);
		break;
	case 1:
		SetActorProperty(0,APROP_SPEED,1.1);
		break;
	case 2:
		SetActorProperty(0,APROP_SPEED,1.2);
		break;
	case 3:
		SetActorProperty(0,APROP_SPEED,1.3);
		break;
	case 4:
		SetActorProperty(0,APROP_SPEED,1.4);
		break;
	case 5:
		SetActorProperty(0,APROP_SPEED,1.5);
		break;
	case 6:
		SetActorProperty(0,APROP_SPEED,1.6);
		break;
	default:
		SetActorProperty(0,APROP_SPEED,1.0);
		break;
	}
}

script CSACS_SPEEDMODS (int jump)
{
switch (jump) {
	//Troll's slowdown (Half Speed)
		case 5:
		  SetActorProperty(0,APROP_SPEED,0.5);
		  break;
	//No Jump
		case 4:
		  SetActorProperty(0,APROP_JumpZ,0.0);
		  break;
	//No Jump, Normal Speed, Have Actor Make Firing Pose
		case 3:
		  SetActorState (0, "CeilingMissile2");
		  SetActorProperty(0,APROP_JumpZ,0.0);
		  SetActorProperty(0,APROP_SPEED,1.0);
		  break;
	//Double Speed
		case 2:
		  //SetActorProperty(0,APROP_JumpZ,0.0);
		  SetActorProperty(0,APROP_SPEED,2.0);
		  break;
	//Normal Speed
		case 1:
		  //SetActorProperty(0,APROP_JumpZ,0.0);
		  SetActorProperty(0,APROP_SPEED,1.0);
		  break;
	//Normal Jump, Normal Speed
		case 0:
		default:
		  SetActorProperty(0,APROP_JumpZ,10.0);
		  SetActorProperty(0,APROP_SPEED,1.0);
		  break;
	}
}

Script CSACS_BLAZKORELOAD (int ctrl) NET //Reload crap ("ctrl" can be used to add more new controls)
{
switch(ctrl){
CASE 1:
if (checkInventory("LegoWeaponAmmo")==5) terminate;
GiveInventory("ForceReload",1);
delay(1);
TakeInventory("ForceReload",1);
break;
}
}

////////////////////////////////////LaggyCorperal stuff
script "ReloadWeapon" (int ammoTypes, int maxAmmo)  //Reload script.
{
	
	//Ammo types inside and outside the weapon.
	int in, out;
	str inAmmo, outAmmo;
	
	int magSize;//Max ammo inside.
	
	switch(ammoTypes)
	{
		case 1: //Tommy gun	
		inAmmo = "TommyAmmo";
		outAmmo = "FatBullets";
		magSize = 30;
		break;
		Case 2: //Grand Ammo
		inAmmo = "GrandAmmo";
		outAmmo = "ShelbyvilleRound";
		magSize = 8;
		break;
		default:
		print(s:"Specify ammotype ya dork");
		break;
	}
	
	
	in = CheckInventory(inAmmo);
	out = CheckInventory(outAmmo);
	
	//print(s:inAmmo, d:in, s:outAmmo, d:out);
	
	//If maxAmmo is defined, do not reload more than that.
	if (maxAmmo != 0 && magSize > (maxAmmo + in))
	{
		magSize = (maxAmmo + in);
	}
	
	if (out < (magSize-in)) //Can't reload the full weapon
			{
				TakeInventory(outAmmo,out);
				GiveInventory(inAmmo,out);
			}
			else
			{
				TakeInventory(outAmmo, magSize-in);
				GiveInventory(inAmmo, magSize-in);
			}		
	
	
}


Script "ForceReload"(void) NET //Reload using an item instead of +RELOAD
{
GiveInventory("ForceReload",1);
delay(1);
TakeInventory("ForceReload",1);
}

Script "CorpWeaponPickup" (int wep, int dropped)
{
//print(d:wep, s: " ", d: dropped); 


str giveWep; //Weapon's name
int coolDown;//Time before picking a weapon from map pickups again.
int coolDownActor; //Time before picking a weapon from map pickups again.
str wepTag; //Weapon's tag
str pickupMessage; //Something iunno
bool isGrenade; //Whenever it uses the grenade slot or the secondary weapon slot.

switch (wep)
{
	case 1:
		giveWep = "CorpFragGrenade";
		coolDown = 60;
		coolDownActor = "FragGrenadeCooldown";
		wepTag = "Fragmentation Grenade";
		pickupMessage = "You got the Fragmentation Grenade!\nNow with more fragmentation.\nDon't blow it up in front of your own face.";
		isGrenade = false;
		break;
	case 2:
		giveWep = "CorpGrandDad";
		coolDown = 60;
		coolDownActor = "GrandDadCooldown";
		wepTag = "Grand Dad";
		pickupMessage = "You got the Grand Dad semiautomatic rifle!\nReloading before firing all rounds is not recommended.";
		isGrenade = true;
		break;
	default:
		print(s:"no");
		break;
}




//if (!dropped) //cooldown check (temorarily removed)
//{
	if (CheckInventory(cooldownActor))
	{
		SetHudSize(256,224,0);
		setFont("SMALLFONT");
		HudMessage(s:wepTag, s:" cooldown: ",d:CheckInventory(cooldownActor);
		HUDMSG_FADEOUT, 1, CR_DARKGREEN, 128.0, 32.0, 1.0, 0.5);
		terminate;
	}
	else
	{
		giveInventory(cooldownActor, coolDown);
	}
//}

//Take any other weapon in the same slot.
//Not the same weapon because the player might be using it
//and that would deselect it?
if (isGrenade)
{
	takeUnlessItsThis("CorpFragGrenade",giveWep);
}
else
{
	takeUnlessItsThis("GrandDad",giveWep);
}


//Finally gibe weapon
GiveInventory(giveWep, 1);
Print(s:pickupMessage);
SetMugshotState("Grin");
localAmbientSound("Weapon/TommyLoad",127);//Might have different sounds for each weapon, eventually.
}

//This function takes items unless it's the right one.
function void takeUnlessItsThis (str takeThis, str unless)
{
	if (takeThis != unless)
	{
		takeInventory("takeThis",1);
	}
}

Script "CorpWeaponCooldown" ENTER
{
If (!CheckInventory("CorpArsenal"))
{
	//print(s:"ur not corperel");
	terminate;
}
While (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0)
{
	//print(s:"tictoc");
	TakeInventory("FragGrenadeCooldown",1);
	TakeInventory("GrandDadCooldown",1);
	delay(35);
}
}

Script "CorpWeaponCooldownRespawn" RESPAWN
{
ACS_NamedExecuteAlways("CorpWeaponCooldown",0);
}

//View recoil script
Script "CorpRecoil" (int horiz, int vert, int duration) CLIENTSIDE
//Horizontal angle, vertical angle and duration in tics
//(not counting 1 pause tic and comeback)
//MUST BE CLIENTSIDE IF ALL IT DOES IS MOVE PLAYER VIEW!
{
int i, theHecc, oldMove, moveGen, moveAngle, movePitch; //bullcrap
//Note to self: define behavior for 0 duration
moveGen = 0;
for (i = 1; i <= duration; i++)
{
	oldMove = moveGen;
	//What is trigonometry iunno
	theHecc = sin(((i*0.5)/duration) - 0.25);
	//log(f:theHecc);
	//More math bullcrap
	moveGen = ((theHecc) + 1.0)/2;
	//log(f:moveGen, s:" ", f:theHecc, s:" ", f:oldMove);
	moveAngle = fixedmul(horiz, moveGen - oldMove);
	movePitch = fixedmul(vert, moveGen - oldMove);
	
	setActorAngle(0, getActorAngle(0) + moveAngle);
	setActorPitch(0, getActorPitch(0) + moveAngle);
	delay(1);
}
if (getCVAR("CSCCB_CL_RecoilReset") == false) terminate;
//view reset
//print(s:"lol");
delay(1);
moveGen = 0;
horiz = horiz*(-1);
vert = vert*(-1);
for (i = 1; i <= duration; i++)
{
	oldMove = moveGen;
	theHecc = sin(((i*0.5)/duration) - 0.25);
	moveGen = ((theHecc) + 1.0)/2;
	
	moveAngle = fixedmul(horiz, moveGen - oldMove);
	movePitch = fixedmul(vert, moveGen - oldMove);
	
	setActorAngle(0, getActorAngle(0) + moveAngle);
	setActorPitch(0, getActorPitch(0) + moveAngle);
	delay(1);
}

}

//////////////////////////////////////Corporal Over and out//////////////////////////////////

script CSACS_BEEDBOTWEP (int which)
{
if(PlayerIsBot(PlayerNumber()))
	{
	if(which==0)
		{
		GiveInventory("Beed28Ammo",28);
		GiveInventory("BeedBotAttack",1);
		}
	if(which==1)
		{
		GiveInventory("Beed28Ammo",28);
		SetWeapon("Beed28Weapon1");
		}
	if(which==2)
		{
		GiveInventory("Beed28Ammo",28);
		SetWeapon("Beed28Weapon2");
		}
	if(which==3)
		{
		If(random(0,2)==0){GiveInventory("BeedBotAttack",1);}
		}
	}
}

//////////////////////////////////////Jax/////////////////////////////

function int distanceVal2 (int tid1x, int tid1y, int tid1z, int tid2x, int tid2y, int tid2z)
{
	int x, y, z, d;
	x = tid1x - tid2x >> 16; // Convert fixed point to integer
	y = tid1y - tid2y >> 16;
	z = tid1z - tid2z >> 16;
	d = sqrt( x*x + y*y + z*z );
	return d;
}

function bool kinesisPush (int pusher, int pushee, int force, int range)
{	
	bool pushvalid = (range == 0 || distanceVal2(GetActorX(pusher), GetActorY(pusher),
	GetActorZ(pusher), GetActorX(pushee), GetActorY(pushee), GetActorZ(pushee)) < range);
	
	if (pushvalid) {
		if (force!=0) {
			//ThrustThing(VectorAngle(x2 - x, y2 - y) >> 8, force, 1, pushee);
			ThrustThing(GetActorAngle(pusher) >> 8, force, 1, pushee);
		}
	}
	return pushvalid;
}

script CSACS_SHOVER (int j, int pushee)
{
	pushee += 999;
	switch (j) {
	//Savior thunder rush push
	case 1:
		if(kinesisPush(ActivatorTID(), pushee, 5, 0)) {
			if(!PlayerIsBot(pushee-1000)){
				GiveActorInventory(pushee,"TempPitProtect",1);
			}
		}
	break;
	//Jax Throw
	case 0:
	bool inRange = kinesisPush(ActivatorTID(), pushee, 0, 500);
	while(checkInventory("TelekinesisActive")&&inRange) {
		//printBold(s:"Giving levitator");
		giveActorInventory(pushee,"Levitator",1);
		delay(1);
		inRange = kinesisPush(ActivatorTID(), pushee, 0, 500);
	}
	if(inRange&&checkInventory("JaxThrow")) {
		if(kinesisPush(ActivatorTID(), pushee, 40, 0)) {
			if(!PlayerIsBot(pushee-1000)){
				GiveActorInventory(pushee,"TempPitProtect",1);
			}
		}
	}
	break;
	default:
	break;
	}
}
	
script CSACS_SAVIORGRAVITY ENTER
{
if(PlayerIsBot(PlayerNumber())){terminate;}
  while (TRUE)
  {
  
    /*buttons2[PlayerNumber()] = GetPlayerInput(-1, INPUT_BUTTONS);
	
	fallingplayer[ActivatorTID()] = GetActorZ (0);*/

	if(CheckInventory("SavOnCeilingFlag")==1){
    if (GetPlayerInput(-1, INPUT_OLDBUTTONS) == GetPlayerInput(-1, INPUT_BUTTONS) - BT_JUMP )
    {
	GiveInventory("SavReverseJump",1);
	}
	}
    delay(1);
		
  }
}



script 630 (void)//Tiny script that returns team number, used for sticky bombs
{
If(PlayerTeam()==0){SetResultValue(1);}
If(PlayerTeam()==1){SetResultValue(2);}
If(PlayerTeam()==2){SetResultValue(3);}
If(PlayerTeam()==3){SetResultValue(4);}
}

Script CSACS_REDEYESHEALTH (int DamageAmt) //For Red Eyes Health stuff
{
int SetHealth = GetActorProperty(0, APROP_HEALTH) - DamageAmt;
If(SetHealth <= 0){SetActorProperty(0, APROP_HEALTH,1);terminate;}
SetActorProperty(0, APROP_HEALTH,SetHealth);
}


script CSACS_BIKHEALTH (void) //Biks Health loss script?
{
if(GetActorProperty(0,APROP_Health)>5)
{
SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_Health)-5);
}
}

script 191 (int speed)
{
if(speed==1){
SetActorProperty(0,APROP_SPEED,1.45);
}
if(speed==0){
SetActorProperty(0,APROP_SPEED,1.0);
}
}

//Hacky stuff for Unix

function bool backCheck (int x1, int y1, int z1, int angle, int pushee, int range)
{
	bool backvalid = 0;
	int x2 = GetActorX (pushee);
	int y2 = GetActorY (pushee);
	int z2 = GetActorZ (pushee);
	if(distanceVal2(x1,y1,z1,x2,y2,z2) < range) {
		int angleOwner = angle>>8;
		int angleDifference = abs(angleOwner-(GetActorAngle(pushee)>>8));
		int angleToTargetDifference = abs((VectorAngle(x2 - x1, y2 - y1)>>8)-angleOwner);
		backvalid = (angleDifference < 64 || angleDifference > 192) && (angleToTargetDifference < 64 || angleToTargetDifference > 192);
	}
	return backvalid;
}

#DEFINE MAX_PLAYERS 64
script 776 (void)
{
	bool backsuccess = 0;
	int backStabber = ActivatorTID();
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	int angle = GetActorAngle(0);
	//int team = ACS_ExecuteWithResult(143, 0);
	int team = GetPlayerInfo(backstabber-1000, PLAYERINFO_TEAM);
	int i;
	//if (team == 5) {
	if (team == 4) {
		for(i=0; i<MAX_PLAYERS; i++) {
			if (backStabber != 1000+i && PlayerInGame(i)) {
				if(backCheck(x,y,z,angle, 1000 +i, 200)) {
					GiveActorInventory(1000 + i, "BackStabForce", 1);
					backsuccess = 1;
				}
			}
		}
	} else {
		for(i=0; i<MAX_PLAYERS; i++) {
			if (backStabber != 1000+i && PlayerInGame(i) && team != GetPlayerInfo(i, PLAYERINFO_TEAM)) {
				if(backCheck(x,y,z,angle, 1000 +i, 200)) {
					GiveActorInventory(1000 + i, "BackStabForce", 1);
					backsuccess = 1;
				}
			}
		}	
	}
	
	
	SetResultValue(backsuccess);
}

script 775 (int weap)
{
	//int killedClass = GetPlayerInfo(PlayerNumber(), PLAYERINFO_PLAYERCLASS);
	int killedTeam = ACS_ExecuteWithResult(143, 0);
	if (weap == 377 && (CheckWeapon("IceWep")>0||CheckWeapon("IceBot")>0)) {
		weap = 376;
	}
	SetActivatorToTarget(0);
	
	Thing_SetTranslation(0, weap);
	
	switch (killedTeam) {
		case 0:
		  Thing_SetTranslation(0, 0);
		  break;
	    case 1:
		  Thing_SetTranslation(0, 48);
		  break;
	    case 2:
		  Thing_SetTranslation(0, 43);
		  break;
		case 3:
		  Thing_SetTranslation(0, 47);
		  break;
	    default:
		  break;
	}
}

int buttons[64];
script 667 (void)
{
buttons[PlayerNumber()] = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
if (buttons[PlayerNumber()] & BT_FORWARD)
{
	SetResultValue(1);
	//Print(s:"FORWARD");
	terminate;
}
if (buttons[PlayerNumber()] & BT_BACK)
{
	SetResultValue(2);
	//Print(s:"BACK");
	terminate;
}
if (buttons[PlayerNumber()] & BT_MOVELEFT)
{
	SetResultValue(3);
	//Print(s:"LEFT");
	terminate;
}
if (buttons[PlayerNumber()] & BT_MOVERIGHT)
{
	SetResultValue(4);
	//Print(s:"RIGHT");
	terminate;
}
if (buttons[PlayerNumber()] & BT_JUMP)
{
	SetResultValue(5);
	//Print(s:"JUMP");
	terminate;
}
if (buttons[PlayerNumber()] & BT_ATTACK)
{
	SetResultValue(6);
	terminate;
}
if (buttons[PlayerNumber()] & BT_ALTATTACK)
{
	SetResultValue(7);
	terminate;
}
SetResultValue(0);
}

script "zardlms" (void)
{
// Check if the game is actually LMS
if(GetCvar("lastmanstanding")==1||GetCvar("teamlms")==1||GetCvar("invasion")==1){
	// Ignore if game is set to instagib
	if(GetCvar("instagib")==1){terminate;}
	Delay(5);
	//GiveInventory(ItemStart[ItemStartRandom],5);
	Delay(1);
	TakeInventory("FlashFreezespellUseItem",4);
	TakeInventory("SummonYukkuriUseItem",4);
	TakeInventory("RecoveryTea",4);
	TakeInventory("LifeTea",4);
	GiveInventory("AirJump",3);
	GiveInventory("TornadoJump",1);
	}
terminate;	
}

script "SmashHealth" (void)
{
if(CheckInventory("SmashHealthChecker")==0){terminate;}
HealThing(1);
TakeInventory("SmashHealthChecker",1);
Delay(1);
restart;
}

script 516 (void)
{
if(CheckInventory("HealthCountFlag")==0){terminate;}
HealThing(1);
TakeInventory("HealthCountFlag",1);
Delay(7);
restart;
}

script 481 (void)
{
// Check if the game is actually LMS
if(GetCvar("lastmanstanding")==1||GetCvar("teamlms")==1||GetCvar("invasion")==1){
	// Ignore if game is set to instagib
	if(GetCvar("instagib")==1){terminate;}
	Delay(5);
	//GiveInventory(ItemStart2[ItemStart2Random],3);
	TakeInventory("HotDog",1);
	TakeInventory("Pizza",2);
	Delay(1);
	}
terminate;	
}

script "Hillms" (void)
{
if(GetCvar("lastmanstanding")==1||GetCvar("teamlms")==1){
	if(GetCvar("instagib")==1){terminate;}
	Delay(5);
	GiveInventory("HilMediGive",1);
	GiveInventory("HilBoxGive",1);
	Delay(1);
}
}

script "Hilcolors" (int tid)
{
	if(GetActorProperty (TID, APROP_HEALTH) <= 65){GiveInventory("HilYellow",1); TakeInventory("HilOrange",255); TakeInventory("HilRed",255);}
	if(GetActorProperty (TID, APROP_HEALTH) <= 45){GiveInventory("HilOrange",1); TakeInventory("HilYellow",255); TakeInventory("HilRed",255);}
	if(GetActorProperty (TID, APROP_HEALTH) <= 20){GiveInventory("HilRed",1); TakeInventory("HilOrange",255); TakeInventory("HilYellow",255);}
	if(GetActorProperty (TID, APROP_HEALTH) > 20){TakeInventory("HilRed",255);}
	if(GetActorProperty (TID, APROP_HEALTH) > 45){TakeInventory("HilOrange",255); TakeInventory("HilRed",255);}
	if(GetActorProperty (TID, APROP_HEALTH) > 65){TakeInventory("HilYellow",255); TakeInventory("HilOrange",255); TakeInventory("HilRed",255);}
}

script 304 (void)
{
TakeInventory("HilArmourFlag",999);
TakeInventory("HilMobileFlag",999);
GiveInventory("HilPowerFlag",1);
terminate;
}

script 305 (void)
{
GiveInventory("HilArmourFlag",1);
TakeInventory("HilMobileFlag",999);
TakeInventory("HilPowerFlag",999);
terminate;
}

script 306 (void)
{
TakeInventory("HilArmourFlag",999);
GiveInventory("HilMobileFlag",1);
TakeInventory("HilPowerFlag",999);
terminate;
}

script 330 (void)
{
if(GetCvar("lastmanstanding")==1||GetCvar("teamlms")==1||GetCvar("invasion")==1){
	if(GetCvar("instagib")==1){terminate;}
	Delay(5);
	GiveInventory("HilMediGive",1);
	GiveInventory("HilBoxGive",1);
	Delay(1);
}
terminate;
}

//Messatsu Scripts
Script "MessParryCheck" (void)
{
int InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);;
int InputOldButtons = InputButtons;
while (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0)
	{
	InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_SPEED|BT_USER1) == 1 )
		{
		If(!CheckInventory("NoParry")){GiveInventory("MessParryFlag", 1);}
		}
	Delay(1);
	InputOldButtons = InputButtons;
	}

}
Script "DemonFlipCheck" (void)
{
int InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);;
int InputOldButtons = InputButtons;
while (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0 && CheckInventory("DemonFlipActive"))
	{
	InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_ATTACK) == 1 )
		{
		GiveInventory("MessPalm", 1);
		terminate;
		}
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_ALTATTACK) == 1 )
		{
		GiveInventory("MessKick", 1);
		terminate;
		}
	Delay(1);
	InputOldButtons = InputButtons;
	}

}


Script "MessParryHealth" (int CurrentHealth)
{
int PlayerTID = ActivatorTID();

Do
	{
	If(CurrentHealth < GetActorProperty(PlayerTID, APROP_HEALTH)){CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);}
	If(CurrentHealth > GetActorProperty(PlayerTID, APROP_HEALTH))
		{
		If(CheckInventory("OverhealValue") && (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH))<5)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		Else
			{
			GiveInventory("MessParrySuccess", 1);
			SetActorProperty(0,APROP_HEALTH,(CurrentHealth));
			}
		}
	Delay(1);
	}
While(CheckInventory("MessParry") || CheckInventory("ParryBlock"));
}

Script "EnemyProximity" (int distance)
{
int ReturnValue = 0;
int PlayerTID = ActivatorTID();
int CurrentTeam = GetPlayerInfo(PlayerNumber(), PLAYERINFO_TEAM);
For(int i = 0; i < 64; i++)
	{
	If(PlayerInGame(i))
		{
		If(i==PlayerNumber()){continue;}
		Switch(ACS_ExecuteWithResult(975, 1))
			{
			Case 0:
			If(XYZDistance(PlayerTID, i+1000) < distance)
				{
				If(CheckSight(PlayerTID, i+1000, 0))
					{
					ReturnValue=1; 
					i=64;
					GiveInventory("MessMeterOkay", 1);
					}
				Else
					{
					If(CheckInventory("MessMeterOkay"))
						{
						ReturnValue=1; 
						i=64;
						}
					}
				}
			break;
			Case 1:
			If(CurrentTeam == GetPlayerInfo(i, PLAYERINFO_TEAM)){continue;}
			If(XYZDistance(PlayerTID, i+1000) < distance)
				{
				If(CheckSight(PlayerTID, i+1000, 0))
					{
					ReturnValue=1; 
					i=64;
					GiveInventory("MessMeterOkay", 1);
					}
				Else
					{
					If(CheckInventory("MessMeterOkay"))
						{
						ReturnValue=1; 
						i=64;
						}
					}
				}
			break;
			}
		}
	}
SetResultValue(ReturnValue);
}

Script "MessDamageAmmo" (void)
{
Delay(1);
int PlayerTID = ActivatorTID();
int CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);

while(GetActorProperty(PlayerTID, APROP_HEALTH) > 0 && CheckInventory("MessatsuWep"))
	{
	While(CurrentHealth <= GetActorProperty(PlayerTID, APROP_HEALTH))
		{
		Delay(1);
		If(GetActorProperty(PlayerTID, APROP_HEALTH) > CurrentHealth)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		}
	If(GetActorProperty(PlayerTID, APROP_HEALTH) > 0)
		{
		GiveActorInventory(PlayerTID, "MessatsuAmmo", (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH))/3);
		CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
		}
	}
}
//End Messatsu Scripts

//=======|Yang

Script "YangPower" (int PlayerTID, int Divisor)
{
int ReturnValue = 10;
int YangSpeed = CurrentSpeedXYZ(PlayerTID);
int YangMultiplier = FixedDiv(YangSpeed, 10);
If(Divisor <=0)
	{
	ReturnValue = ReturnValue + CheckActorInventory(PlayerTID, "YangSemblance");
	}
Else
	{
	ReturnValue = ReturnValue + CheckActorInventory(PlayerTID, "YangSemblance")/Divisor;
	}

if(YangMultiplier > 1.0)
	{
	ReturnValue = FixedMul(ReturnValue-10, YangMultiplier)+10;
	}
//printbold(i:ReturnValue);
SetResultValue(ReturnValue);
}


#DEFINE DashWait 10
#DEFINE DashForce 25

script "YangBoost" (Void)
{
int InputButtons; 
int InputOldButtons; 
Bool SpeedPressed = FALSE;
int HasUsedMovement;

if(PlayerIsBot(PlayerNumber())){terminate;}

while(GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0)
	{
	InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
	HasUsedMovement=0;
	While(CheckActorInventory(ActivatorTID(), "EmberCelicaAmmo") < 2)
		{
		Delay(5);
		If(GetActorProperty(ActivatorTID(), APROP_HEALTH) <= 0){terminate;}
		}

	SpeedPressed = CSCCButtonCheck(InputButtons, InputOldButtons, BT_SPEED|BT_USER1) == 1;
	
	
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255)>>16, DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255)>>16, -DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255+64.0)>>16, DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255+192.0)>>16, DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	
	//Jump Boost
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_JUMP) == 1 || (HasUsedMovement == 1 && CSCCButtonCheck(InputButtons, InputOldButtons, BT_JUMP) == 3))
		{
		If((GetActorZ(0) - GetActorFloorZ(0)) >= 32.0)
			{
			SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), GetActorProperty(0, APROP_JUMPZ), 0, 0);
			TakeInventory("JumpCancler", 1);
			GiveInventory("EmberCelicaBoost", 1);
			HasUsedMovement=1;
			}
		}
		
	// Neutral movement
	If(SpeedPressed && HasUsedMovement == 0)
		{
		If(GetActorVelZ(0) == 0)
			{
			SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), FixedMul(GetActorProperty(0, APROP_JUMPZ),1.5), 0, 0);
			TakeInventory("JumpCancler", 1);
			GiveInventory("EmberCelicaUp", 1);
			HasUsedMovement=1;
			}
		Else
			{
			SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), -FixedMul(GetActorProperty(0, APROP_JUMPZ),1.25), 0, 0);
			TakeInventory("JumpCancler", 1);
			GiveInventory("EmberCelicaDown", 1);
			HasUsedMovement=1;
			}
		}
	If(HasUsedMovement==1)
		{
		GiveActorInventory(ActivatorTID(), "BoostExplodeItem", 1);
		TakeActorInventory(ActivatorTID(), "EmberCelicaAmmo", 2);
		}
	LimitSpeed(35);
    delay(1);	
	InputOldButtons = InputButtons; // More reliable than INPUT_OLDBUTTONS ....Go figure.
	}
}


Script "YangSpeedCheck" (void)
{
If(ActivatorTID() < 1000)
	{
	SetResultValue(CurrentSpeedXYZ(ACS_ExecuteWithResult(257,0)));
	}
Else
	{
	SetResultValue(CurrentSpeedXYZ(ActivatorTID()));
	}
}

Function void LimitSpeed (int SpeedLimit)
{
int TheLimit;
If(CurrentSpeedXYZ(ActivatorTID()) > SpeedLimit)
	{
	//print(i:PlayerSpeedXY());
	TheLimit = FixedDiv(SpeedLimit, CurrentSpeedXYZ(ActivatorTID()));	
	SetActorVelocity(0, FixedMul(GetActorVelX(0), TheLimit), FixedMul(GetActorVelY(0), TheLimit), GetActorVelZ(0),FALSE, FALSE);
	}

}


Script "YangAura" (int mode)
{
If(ActivatorTID() < 1000)
	{
	SetActivatorToTarget(0);
	}
Switch(mode)
	{
	Case 1:
	SetResultValue(CheckInventory("YangSemblance"));
	break;
	Default:
	SetResultValue(CheckInventory("BasicArmor"));
	break;
	}
}

Script "YangSemblanceChecker" (void)
{
Delay(2);
int PlayerTID = ActivatorTID();
int CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
int CurrentAura = CheckActorInventory(PlayerTID, "BasicArmor");

while(GetActorProperty(PlayerTID, APROP_HEALTH) > 0 && CheckWeapon("EmberCelica"))
	{
	While(CurrentHealth + CurrentAura <= GetActorProperty(PlayerTID, APROP_HEALTH) + CheckActorInventory(PlayerTID, "BasicArmor"))
		{
		Delay(1);
		If(GetActorProperty(PlayerTID, APROP_HEALTH) > CurrentHealth)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		If(CheckActorInventory(PlayerTID, "BasicArmor") > CurrentAura)
			{
			CurrentAura = CheckActorInventory(PlayerTID, "BasicArmor");
			}
		}
	If(GetActorProperty(PlayerTID, APROP_HEALTH) > 0)
		{
		GiveActorInventory(PlayerTID, "YangSemblance", ((CurrentAura - CheckActorInventory(PlayerTID, "BasicArmor")) + (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH)))/2);
		CurrentAura = CheckActorInventory(PlayerTID, "BasicArmor");
		CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
		}
	//printbold(s: "Health - ", i: CurrentHealth, s:" - Armor - ", i:CurrentAura);
	}
}
Function int CurrentSpeedXYZ (int Target)
{
int VelX = GetActorVelX(Target) >> 16;
int VelY = GetActorVelY(Target) >> 16;
int VelZ = GetActorVelZ(Target) >> 16;
int Travel = sqrt8(VelX*VelX + VelY*VelY + VelZ*VelZ);
return Travel;
}
Function int OkayToBoost (int MovementCount)
{
If(CheckInventory("NoThrust") || CheckInventory("NoJump")){Return 1;}
//If(GetActorZ(0) - GetActorFloorZ(0) > 0 && Moved > 1){Return 1;}
If(MovementCount >= 1){Return 1;}
//Return(GetActorZ(0) - GetActorFloorZ(0) > 0 && Moved > 1);
Return 0;
}

//End Yang Scripts
