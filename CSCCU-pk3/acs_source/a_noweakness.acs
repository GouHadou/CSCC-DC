
//Displays an effect and play a sound when the target is debuffed.
//Also handles Juri's personal immunity after a hit
script 966 ENTER
{
	if(CheckInventory("JuriImmunity"))
	{
		if(CheckInventory("CanCopyWeapons")) { TakeInventory("JuriImmunity", 1); }
		GiveInventory("JuriClear", 1);
	}
	else
	{
		if (CheckInventory("PowerParanoiaDebuff3"))
		{
			Spawn("JuriBugIcon", GetActorX(0), GetActorY(0), GetActorZ(0)+(56 << 16), 0, GetActorAngle(0) >> 8);
			Spawn("JuriBugIcon", GetActorX(0), GetActorY(0), GetActorZ(0)+(64 << 16), 0, GetActorAngle(0) >> 8);
			Spawn("JuriBugIcon", GetActorX(0), GetActorY(0), GetActorZ(0)+(72 << 16), 0, GetActorAngle(0) >> 8);
			LocalAmbientSound("Juri/bugwhisper", 127);
			SetHudSize(320,240,0);
			SetFont("JURIFER3");
			HudMessage(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.1);
		}
 		else if (CheckInventory("PowerParanoiaDebuff2"))
		{
			Spawn("JuriBugIcon", GetActorX(0), GetActorY(0), GetActorZ(0)+(56 << 16), 0, GetActorAngle(0) >> 8);
			Spawn("JuriBugIcon", GetActorX(0), GetActorY(0), GetActorZ(0)+(64 << 16), 0, GetActorAngle(0) >> 8);
			LocalAmbientSound("Juri/bugwhisper", 96);
			SetHudSize(320,240,0);
			SetFont("JURIFER2");
			HudMessage(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.1);
		}
		else if (CheckInventory("PowerParanoiaDebuff1"))
		{
			Spawn("JuriBugIcon", GetActorX(0), GetActorY(0), GetActorZ(0)+(56 << 16), 0, GetActorAngle(0) >> 8);
			LocalAmbientSound("Juri/bugwhisper", 64);
			SetHudSize(320,240,0);
			SetFont("JURIFER1");
			HudMessage(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.1);
		}
	}
	Delay(1);
	if(GetActorProperty(ActivatorTID(), APROP_HEALTH) <=0){terminate;}
	restart;
}

//Calls 966 for respawners
script 967 RESPAWN
{
	ACS_ExecuteAlways(966, 0, 0);
}

//Called when hit by a bug. If the caller has a debuff, takes it and gives him the next higher.
//Otherwise, gives him the first one.
script 968 (void)
{
	if (CheckInventory("PowerParanoiaDebuff3"))
	{
		TakeInventory("PowerParanoiaDebuff1", 1);
		TakeInventory("PowerParanoiaDebuff2", 1);
		TakeInventory("PowerParanoiaDebuff3", 1);
		GiveInventory("ParanoiaDebuffGiver3", 1);
	}
	else if (CheckInventory("PowerParanoiaDebuff2"))
	{
		TakeInventory("PowerParanoiaDebuff1", 1);
		TakeInventory("PowerParanoiaDebuff2", 1);
		TakeInventory("PowerParanoiaDebuff3", 1);
		GiveInventory("ParanoiaDebuffGiver3", 1);
	}
	else if (CheckInventory("PowerParanoiaDebuff1"))
	{
		TakeInventory("PowerParanoiaDebuff1", 1);
		TakeInventory("PowerParanoiaDebuff2", 1);
		TakeInventory("PowerParanoiaDebuff3", 1);
		GiveInventory("ParanoiaDebuffGiver2", 1);
	}
	else
	{
		GiveInventory("ParanoiaDebuffGiver1", 1);
	}
}



Script "GetAngleToTid" (int otherTID)
{
SetResultValue(VectorAngle(getActorX(otherTID) - getActorX(0), getActorY(otherTID) - getActorY(0)) >> 8);
}

Script "Get_SuplexID_TID" (void)
{
SetResultValue(CheckInventory("SuplexID")-1+1000);
}

Script "Get_Target_SuplexID_TID" (void)
{
setActivatorToTarget(0);
SetResultValue(CheckInventory("SuplexID")-1+1000);
}

#define GRAB_DISTANCE 100 //how far to position the grabbed away from zangief
#define GRAB_DISTANCE_2 300 //how far away to give up on the grabbed

script "Grasp_TID" (int otherTID)
{
	if (otherTID==999) { SetResultValue(1); terminate; }
	int angle = getActorAngle(0);
	int xDiff = (getActorX(0)+GRAB_DISTANCE*cos(angle)) - getActorX(otherTID);
	int yDiff = (getActorY(0)+GRAB_DISTANCE*sin(angle)) - getActorY(otherTID);
	int zDiff = getActorZ(0) - getActorZ(otherTID);
	
	if (VectorLength(VectorLength(xDiff,yDiff),zDiff) < (GRAB_DISTANCE_2<<16)) {
		SetActorVelocity(otherTID, xDiff, yDiff, zDiff, 0, 0);
		setResultValue(1);
	} else {
		setResultValue(0);
	}
}

script "SuplexGrasp_TID" (int pitch, int angle, int target) //Pitch is given as x/360, Angle is given as x/255
{
	if (target==999) { SetResultValue(1); terminate; }
	angle = angle<<8;
	pitch = (pitch-360)*1.0/360;
	int xDiff = (getActorX(0)+fixedMul(GRAB_DISTANCE*cos(angle),cos(pitch))) - getActorX(target);
	int yDiff = (getActorY(0)+fixedMul(GRAB_DISTANCE*sin(angle),cos(pitch))) - getActorY(target);
	int zDiff = (getActorZ(0)-GRAB_DISTANCE*sin(pitch)) - getActorZ(target);

	if (VectorLength(VectorLength(xDiff,yDiff),zDiff) < (GRAB_DISTANCE_2<<16)) {
		SetActorVelocity(target, xDiff, yDiff, zDiff, 0, 0);
		setResultValue(1);
	} else {
		setResultValue(0);
	}
}

script "Give_AntiInvincible_ToTID" (int tid)
{
	if (tid==999) { terminate; }
	giveActorInventory(tid,"AntiInvincible",1);
}

Script "Count_ZangiefAngle" (void)
{
SetResultValue(CheckInventory("ZangiefAngle"));
}


str items[5] = 
{
"WalrusSlideAngle",
"ZangiefAngle",
"SuplexID",
"AirSuplexGroundCheck",
"AntiInvincible"
};


script 414 (int i)
{
	setActivatorToTarget(0);
	setResultValue(ACS_ExecuteWithResult(401,i));
}

script 415 (int i, int target)
{
	if (target==999) { terminate; }
	giveActorInventory(target,items[i],1);
}
