

//======|Get Percentage of Health
Script "GetHPPerc" (int TargTID)
{
int HealthPercent;
int PlayerCurrentHealth;
int PlayerMaxHealth; 

	if(GetActorProperty(TargTID,APROP_HEALTH)<=0){PlayerCurrentHealth = 1; }
		Else{PlayerCurrentHealth = GetActorProperty(TargTID,APROP_Health);}
	if(GetActorProperty(TargTID,APROP_SpawnHealth)<=0){PlayerMaxHealth = 1; }
		Else{PlayerMaxHealth = GetActorProperty(TargTID,APROP_SpawnHealth);}
		
HealthPercent = ((PlayerCurrentHealth*100)/PlayerMaxHealth);
SetResultValue(HealthPercent);
}

//======|Get value of one's health at a percentage
Script "GetHPPerc2" (int TargTID, int perval) 
{
int HealthPercent;
int PlayerCurrentHealth;
int PlayerMaxHealth;

	if(GetActorProperty(TargTID,APROP_HEALTH)<=0){PlayerCurrentHealth = 1; }
		Else{PlayerCurrentHealth = GetActorProperty(TargTID,APROP_Health);}
	if(GetActorProperty(TargTID,APROP_SpawnHealth)<=0){PlayerMaxHealth = 1; }
		Else{PlayerMaxHealth = GetActorProperty(TargTID,APROP_SpawnHealth);}
		
HealthPercent = (fixeddiv(PlayerMaxHealth,100)*perval) >> 16;
SetResultValue(HealthPercent);
}

//======|Damage Faloff Formula Script
Script "DamageRate" (int ModDamage, int DistStart, int RampRate) //DamageDropoff Script
{
int Damage = NoNeg(ModDamage - NoNeg(xyzdistance(0, ACS_ExecuteWithResult(257, 0))-DistStart)/RampRate);
SetResultValue(Damage);
}

// Returns a number below 0 as 0
Function int NoNeg (int Numb)
{
Int Output;

if(Numb > 0){Output = Numb;}
else{Output = 0;}
return Output;
}

script "BULL_SLEEPER" (int time)
{
	int CurrentHP = GetActorProperty(0,APROP_Health);
	int RegHP = GetActorProperty(0,APROP_Health);
	
	while(CurrentHP > 0) {
		CurrentHP = GetActorProperty(0,APROP_Health);
		if(CurrentHP < RegHP) {
			GiveActorInventory(0,"UnSleeperTag",1);
			//Log(s:"UnSleeperTag given");
			terminate;
		}
		Delay(1);
		if(time <= 0) {
			GiveActorInventory(0,"UnSleeperTag",1);
			//Log(s:"UnSleeperTag given - timed");
			terminate;
		}
		time--;
	}
}

//Snail Breeder
script "cscc_stillalive" (void) //Check if player is alive; can be ued for other things
{
int magicnumber = GetActorProperty(0,APROP_TargetTID);
if(!PlayerInGame(magicnumber - 1000)||GetActorProperty(magicnumber,APROP_Health)<=0)
{SetActorState(0,"Begone",0);}
}

script "snailz_trailchecker" (void) //Check if player is walking.
{
int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
if (buttons & (BT_FORWARD|BT_BACK|BT_MOVELEFT|BT_MOVERIGHT))
{if(CheckInventory("SnailBreederPets")>=1){GiveInventory("YesToTrail",1);}
if(CheckInventory("TankSnailWeapon")>=1){GiveInventory("YesTankTrail",1);}}
}

script "snailz_climbchecker" (void) //Spawn checker in any of the 8 directions.
{
int buttons = GetPlayerInput(-1, INPUT_BUTTONS); //Corresponds to the sprite rotations
if (buttons & BT_FORWARD && !(buttons & (BT_MOVELEFT|BT_MOVERIGHT))){GiveInventory("SnailzClimb1",1);}
if (buttons & BT_FORWARD && buttons & BT_MOVELEFT){GiveInventory("SnailzClimb2",1);}
if (buttons & BT_MOVELEFT && !(buttons & (BT_FORWARD|BT_BACK))){GiveInventory("SnailzClimb3",1);}
if (buttons & BT_BACK && buttons & BT_MOVELEFT){GiveInventory("SnailzClimb4",1);}
if (buttons & BT_BACK && !(buttons & (BT_MOVELEFT|BT_MOVERIGHT))){GiveInventory("SnailzClimb5",1);}
if (buttons & BT_BACK && buttons & BT_MOVERIGHT){GiveInventory("SnailzClimb6",1);}
if (buttons & BT_MOVERIGHT && !(buttons & (BT_FORWARD|BT_BACK))){GiveInventory("SnailzClimb7",1);}
if (buttons & BT_FORWARD && buttons & BT_MOVERIGHT){GiveInventory("SnailzClimb8",1);}
}

script "snailz_shellchecker" (void)
{
int button;
do{
button = GetPlayerInput(-1, INPUT_BUTTONS);
if (button & (BT_ATTACK|BT_ALTATTACK)){break;}
delay(4);
}
while(CheckInventory("ShellterFlag") >0 && CheckInventory("ClassDeathPickup") <1 && CheckInventory("SnailBreederPets") >0);
TakeInventory("ShellterFlag",1);ACS_NamedExecuteAlways("core_freezeplayer",0,0,0);ACS_NamedExecuteAlways("snailz_heavystatue",0,0);
GiveInventory("LightenSnail",1);
}

script "snailz_heavystatue" (int weights)//Makes player heavier to remove knockback
{
switch(weights)
{
case 0://Off
SetActorProperty(0,APROP_Mass,9999);break;
case 1://On
SetActorProperty(0,APROP_Mass,999999);break;
}
}

//=======|Yang

Script "YangPower" (int PlayerTID, int Divisor)
{
int ReturnValue = 10;
int YangSpeed = CurrentSpeedXYZ(PlayerTID);
int YangMultiplier = FixedDiv(YangSpeed, 10);
If(Divisor <=0)
	{
	ReturnValue = ReturnValue + CheckActorInventory(PlayerTID, "YangSemblance");
	}
Else
	{
	ReturnValue = ReturnValue + CheckActorInventory(PlayerTID, "YangSemblance")/Divisor;
	}

if(YangMultiplier > 1.0)
	{
	ReturnValue = FixedMul(ReturnValue-10, YangMultiplier)+10;
	}
//printbold(i:ReturnValue);
SetResultValue(ReturnValue);
}


#DEFINE DashWait 10
#DEFINE DashForce 21

script "YangBoost" (Void)
{
int InputButtons; 
int InputOldButtons; 
Bool SpeedPressed = FALSE;
int HasUsedMovement;

if(PlayerIsBot(PlayerNumber())){terminate;}

while(GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0 && CheckInventory("IsYang"))
	{
	InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
	HasUsedMovement=0;
	While(CheckActorInventory(ActivatorTID(), "EmberCelicaAmmo") < 2)
		{
		Delay(5);
		If(GetActorProperty(ActivatorTID(), APROP_HEALTH) <= 0 || !CheckInventory("IsYang")){terminate;}
		}

	SpeedPressed = CSCCButtonCheck(InputButtons, InputOldButtons, BT_SPEED|BT_USER1) == 1;
	
	
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255)>>16, DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255)>>16, -DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255+64.0)>>16, DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255+192.0)>>16, DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	
	//Jump Boost
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_JUMP) == 1 || (HasUsedMovement == 1 && CSCCButtonCheck(InputButtons, InputOldButtons, BT_JUMP) == 3))
		{
		If((GetActorZ(0) - GetActorFloorZ(0)) >= 32.0)
			{
			SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), GetActorProperty(0, APROP_JUMPZ), 0, 0);
			TakeInventory("JumpCancler", 1);
			GiveInventory("EmberCelicaBoost", 1);
			HasUsedMovement=1;
			}
		}
		
	// Neutral movement
	If(SpeedPressed && HasUsedMovement == 0)
		{
		If(GetActorVelZ(0) == 0)
			{
			SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), FixedMul(GetActorProperty(0, APROP_JUMPZ),1.5), 0, 0);
			TakeInventory("JumpCancler", 1);
			GiveInventory("EmberCelicaUp", 1);
			HasUsedMovement=1;
			}
		Else
			{
			SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), -FixedMul(GetActorProperty(0, APROP_JUMPZ),1.25), 0, 0);
			TakeInventory("JumpCancler", 1);
			GiveInventory("EmberCelicaDown", 1);
			HasUsedMovement=1;
			}
		}
	If(HasUsedMovement==1)
		{
		GiveActorInventory(ActivatorTID(), "BoostExplodeItem", 1);
		TakeActorInventory(ActivatorTID(), "EmberCelicaAmmo", 2);
		LimitSpeed(35);
		}
    delay(1);	
	InputOldButtons = InputButtons; // More reliable than INPUT_OLDBUTTONS ....Go figure.
	}
}


Script "YangSpeedCheck" (void)
{
If(ActivatorTID() < 1000)
	{
	SetResultValue(CurrentSpeedXYZ(ACS_ExecuteWithResult(257,0)));
	}
Else
	{
	SetResultValue(CurrentSpeedXYZ(ActivatorTID()));
	}
}

Script "YangAura" (int mode)
{
If(ActivatorTID() < 1000)
	{
	SetActivatorToTarget(0);
	}
Switch(mode)
	{
	Case 1:
	SetResultValue(CheckInventory("YangSemblance"));
	break;
	Default:
	SetResultValue(CheckInventory("BasicArmor"));
	break;
	}
}

Script "YangSemblanceChecker" (void)
{
Delay(2);
int PlayerTID = ActivatorTID();
int CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
int CurrentAura = CheckActorInventory(PlayerTID, "BasicArmor");

while(GetActorProperty(PlayerTID, APROP_HEALTH) > 0 && CheckWeapon("EmberCelica"))
	{
	While(CurrentHealth + CurrentAura <= GetActorProperty(PlayerTID, APROP_HEALTH) + CheckActorInventory(PlayerTID, "BasicArmor"))
		{
		Delay(1);
		If(GetActorProperty(PlayerTID, APROP_HEALTH) > CurrentHealth)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		If(CheckActorInventory(PlayerTID, "BasicArmor") > CurrentAura)
			{
			CurrentAura = CheckActorInventory(PlayerTID, "BasicArmor");
			}
		}
	If(GetActorProperty(PlayerTID, APROP_HEALTH) > 0)
		{
		GiveActorInventory(PlayerTID, "YangSemblance", ((CurrentAura - CheckActorInventory(PlayerTID, "BasicArmor")) + (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH)))/2);
		CurrentAura = CheckActorInventory(PlayerTID, "BasicArmor");
		CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
		}
	//printbold(s: "Health - ", i: CurrentHealth, s:" - Armor - ", i:CurrentAura);
	}
}



script 512 (int state, int speedmodify) //Extra states script for accurate animations
{
if(GetActorProperty(0,APROP_HEALTH)>0){
switch(state)
{
case 1:
SetActorState (0, "CustomState1");
break;
case 2:
SetActorState (0, "CustomState2");
break;
case 3:
SetActorState (0, "CustomState3");
break;
case 4:
SetActorState (0, "CustomState4");
break;
case 5:
SetActorState (0, "CustomState5");
break;
case 6:
SetActorState (0, "CustomState6");
break;
case 7:
SetActorState (0, "CustomState7");
break;
case 8:
SetActorState (0, "CustomState8");
break;
case 9:
SetActorState (0, "CustomState9");
break;
case 10:
SetActorState (0, "CustomState10");
break;
}
switch(speedmodify)
{
case -5:
SetActorProperty(0,APROP_SPEED,0.50);
break;
case -4:
SetActorProperty(0,APROP_SPEED,0.60);
break;
case -3:
SetActorProperty(0,APROP_SPEED,0.70);
break;
case -2:
SetActorProperty(0,APROP_SPEED,0.80);
break;
case -1:
SetActorProperty(0,APROP_SPEED,0.90);
break;
case 0:
SetActorProperty(0,APROP_SPEED,1.00);
break;
case 1:
SetActorProperty(0,APROP_SPEED,1.20);
break;
case 2:
SetActorProperty(0,APROP_SPEED,1.40);
break;
case 3:
SetActorProperty(0,APROP_SPEED,1.60);
break;
case 4:
SetActorProperty(0,APROP_SPEED,1.80);
break;
case 5:
SetActorProperty(0,APROP_SPEED,2.00);
break;
}
}
}

script 513 (void)//This is for projectiles to check if their owner spectated, disconnected, or is dead.
{
	SetActivatorToTarget(0);
	//log(s:"Player #? ",i:PlayerInGame(PlayerNumber()));
	//log(s:"Is Dead? ",i:CheckInventory("IsDead"));
	//log(s:"In Game? ",i:PlayerInGame(PlayerNumber()));
	if(PlayerNumber() == -1 || CheckInventory("IsDead") || !PlayerInGame(PlayerNumber())){
		SetResultValue(0);
	}
}


Function int OkayToBoost (int MovementCount)
{
If(CheckInventory("NoThrust") || CheckInventory("NoJump")){Return 1;}
//If(GetActorZ(0) - GetActorFloorZ(0) > 0 && Moved > 1){Return 1;}
If(MovementCount >= 1){Return 1;}
//Return(GetActorZ(0) - GetActorFloorZ(0) > 0 && Moved > 1);
Return 0;
}
//End Yang

Script "LightScreenSyncher" (void) 
{
	//int Player = ACS_NamedExecuteWithResult("core_gettarget",0);
	int BaseTID = ActivatorTID()-1000;
	int Deduction;
	// Loop if the base is active still
	while(GetUserVariable(BaseTID, "User_ScreenHP")>0
	&& ThingCount(T_NONE,BaseTID) > 0
	){
	if (GetActorProperty(0, APROP_HEALTH) != GetActorProperty(0, APROP_SPAWNHEALTH))
		{
		Deduction = GetActorProperty(0, APROP_SPAWNHEALTH) - GetActorProperty(0, APROP_HEALTH);
		Healthing(9999);
		SetUserVariable(BaseTID, "User_ScreenHP",GetUserVariable(BaseTID, "User_ScreenHP")-Deduction);
		}
		//TakeActorInventory(Player,"LightScreenHealth",999);
		//GiveActorInventory(Player,"LightScreenHealth",GetUserVariable(BaseTID, "User_ScreenHP"));
		Delay(1);
	}
	
	// Remove
	Thing_Remove(0);
}

Script "LightScreenKiller" (Void)
{
int Player = ACS_NamedExecuteWithResult("core_gettarget",0);

	//While(ThingCount(T_NONE,4000+(Player))
	//||ThingCount(T_NONE,5000+(Player))
	//)
	//{
	SetActorState (4000+(Player), "Perish");
	SetActorState (5000+(Player), "Perish");
	//}
}

Script "ScreenHealthSynch" (VOID)
{
int BaseTID = ActivatorTID();
int TargetTID = ACS_ExecuteWithResult(257,0);

	while(GetUserVariable(BaseTID, "User_ScreenHP")>0
	&& ThingCount(T_NONE,BaseTID) > 0
	){
		TakeActorInventory(TargetTID,"LightScreenHealth",999);
		GiveActorInventory(TargetTID,"LightScreenHealth",GetUserVariable(BaseTID, "User_ScreenHP"));
		Delay(1);
	}
}


Script "Aegis_ShieldCheck" (int on_self)
{
int TargetTID;
// for the deploy shield, check how much shield energy the player has
if(on_self > 0){TargetTID = ActivatorTID();}
	Else{TargetTID = ACS_ExecuteWithResult(257,0);}
SetResultValue(CheckActorInventory(TargetTID,"ShieldEnergy"));
}

Script "Aegis_ShieldEnergySynch" (void)
{

int BaseTID = ActivatorTID();
int TargetTID = ACS_ExecuteWithResult(257,0);
int ScreenHealth = (GetUserVariable(BaseTID, "User_ScreenHP") - 200);

TakeActorInventory(TargetTID,"ShieldEnergy",999);
log(i:ScreenHealth); 
if (ScreenHealth > 0){GiveActorInventory(TargetTID,"ShieldEnergy",ScreenHealth);}
	Else{GiveActorInventory(TargetTID,"ShieldBreak",1);}
}



Script "WepBloomStat" (void)
{
int FiringPlayer= ACS_ExecuteWithResult(257, 0);
SetResultValue(checkactorinventory(FiringPlayer,"WepBloomItem"));
}

Script "PlayerSpeciesSynch" (VOID)
{
int TargetTID = ACS_ExecuteWithResult(257,0);
//int IsTeamGame = ACS_ExecuteWithResult(975, 1);

	if(!IsTeamGame)
	{
		setactorproperty(0,APROP_SPECIES,Getactorproperty(TargetTID,APROP_SPECIES));
	}
}


script "Ankhzirus_GrappleTrail" (int target){
	if(target < 0){
		target = ACS_ExecuteWithResult(257);
	}
	int plX; int plY; int plZ;
	int distX; int distY; int distZ;
	//while(ThingCount(0, grapple)==1 && GetActorProperty(target, APROP_HEALTH)>0){
		plX = GetActorX(target);
		plY = GetActorY(target);
		plZ = GetActorZ(target)+32*65536;
		distX = (plX - GetActorX(0))/5;
		distY = (plY - GetActorY(0))/5;
		distZ = (plZ - GetActorZ(0))/5;
		for(int i = 1;i<5;i++){
			Spawn("WireAdaptorHookFX",plX-distX*i,plY-distY*i,plZ-distZ*i);
		}
		//Delay(1);
	//}
}

script "Ankhzirus_Grab" (void) {
	int activator = ActivatorTID();
	int grabbed = CheckActorInventory(activator,"AnkhzirusGrabID");
	int i = 1;
	while(i < 71){
		if(GetActorProperty(activator, APROP_HEALTH) <= 0 ||GetActorProperty(grabbed, APROP_HEALTH) <= 0){
			break;
		}
		if(i%35 == 0){
			HealThing(10);
			SpawnProjectile(activator,"AnkhzirusGrappleDamage",0,0,0,0,activator+700);
			SetActorPosition(activator+700,GetActorX(grabbed),GetActorY(grabbed),GetActorZ(grabbed),false);
		}
		ACS_NamedExecute("Ankhzirus_GrappleTrail",0,grabbed);
		i++;
		Delay(1);
	}
	SpawnProjectile(activator,"AnkhzirusGrappleReturn",0,0,0,0,activator+700);
	SetActorPosition(activator+700,GetActorX(grabbed),GetActorY(grabbed),GetActorZ(grabbed),false);
	TakeInventory("AnkhzirusGrabID",9999);
}


script "BadzWarp" (void){
	int xspeed = GetActorVelX(ActivatorTID());
	int yspeed = GetActorVelY(ActivatorTID());
	int zspeed = GetActorVelZ(ActivatorTID());
	ThrustThing(GetActorAngle(ActivatorTID()) >> 8,128,1,0);
	Delay(1);
	SetActorVelocity(0,xspeed,yspeed,zspeed,false,false);
}

Script "LostHealthCount" (Void)
{
int MyTracerTID = ACS_NamedExecuteWithResult("PointerTID",AAPTR_TRACER,0); 

int HealthDiff = GetActorProperty(MyTracerTID,APROP_SPAWNHEALTH) - GetActorProperty(MyTracerTID,APROP_HEALTH);
//log(i:MyTracerTID); log(i:HealthDiff);
SetResultValue(HealthDiff);
}

Script "TeamCheck" (void)
{
Bool TeamMatch = False;
int MyTargetTID = ACS_NamedExecuteWithResult("PointerTID",AAPTR_TARGET,0); 
int MyTracerTID = ACS_NamedExecuteWithResult("PointerTID",AAPTR_TRACER,0); 

if (GetPlayerInfo(MyTargetTID-1000, PLAYERINFO_TEAM) == GetPlayerInfo(MyTracerTID-1000, PLAYERINFO_TEAM)){TeamMatch = True;}
SetResultValue(TeamMatch);
}

Script "PlayerSpeciesSynch2" (VOID)
{
int TargetTID = ACS_ExecuteWithResult(257,0);
setactorproperty(0,APROP_SPECIES,Getactorproperty(TargetTID,APROP_SPECIES));
}


Script "Edge_Count_TeleportAmmo" (void)
{
SetResultValue(CheckInventory("TeleportsBehindYouAmmo"));
}

Script "Edge_Count_Target_BurstCharge" (void)
{
SetActivator(0,AAPTR_TARGET);
SetResultValue(CheckInventory("EdgeBurstCharge"));
}

// Make's Smoke less Opaque for teams
script 1023  (VOID) CLIENTSIDE
{

    int cln = consolePlayerNumber();
	int FiringPlayer= ACS_ExecuteWithResult(257, 0) - 1000;
    if( GetPlayerInfo(cln, PLAYERINFO_TEAM) == GetPlayerInfo(FiringPlayer, PLAYERINFO_TEAM))//(PlayerClass((consolePlayerNumber() >= SUPPORTSTART) && PlayerClass((consolePlayerNumber()) <= SUPPORTEND)))
    {
       SetActorProperty(0,APROP_ALPHA,0.3);
    }
}

script "CSCC_GetSpeed" (void)
{
  int x, y, z, speed;
    x = GetActorVelX(0);
    y = GetActorVelY(0);
    z = GetActorVelZ(0);
    speed = FixedMul(x, x) + FixedMul(y, y) + FixedMul(z, z);
    SetResultValue(FixedSqrt(speed));
	//PrintBold(f:FixedSqrt(speed));
	if(speed<5.0){
	SetActorVelocity (0, 0, 0, 0, 0, 0);}
}


//██████████████████████████████████████████Undyne████████████████████████████████████████


Script "Undyne_Revive_Check" (void)
{
int h;
do {
	delay(1);
	h = getActorProperty(0,APROP_HEALTH);
} while(h>1);
if(h>0) {
	GiveInventory("UndyneRevive",1);
}
}

Script "Undyne_Decay_Script" (int minhp, int rate)
{
int h = getActorProperty(0,APROP_HEALTH);
int time;
while(h>0 && CheckInventory("DecayFlag")) {
	if(h>minhp) {
		time++;
		if(time>=rate) {
			time = 0;
			GiveInventory("DecayPickup",1);
		}
	} else {
		time = 0;
	}
	delay(1);
	h = getActorProperty(0,APROP_HEALTH);
}
}

Script "UndyingFlag_Count" (void)
{
SetResultValue(CheckInventory("UndyingFlag"));
}

Script "Undyne_Min" (int h1, int h2)
{
SetResultValue(min(h1,h2));
}


script "Undyne_Enemy_Vicinity_Count" (int dist, int nosight)
{
	int r;

	int userNumber = getUNumber();

	if(coopCheck()) {
		if(userNumber<0) {
			r = UndyneCountEveryone(dist<<16,nosight);
		}
	} else if(teamCheck()) {
		if(userNumber>=0 && CheckAliveTarget(1000+userNumber)) {
			r = UndyneCountEnemyTeam(userNumber,dist<<16,nosight);
		} else {
			r = UndyneCountEveryone(dist<<16,nosight);
		}
	} else {
		if(userNumber>=0) {
			r = UndyneCountExcludeSelf(userNumber,dist<<16,nosight);
		} else {
			r = UndyneCountEveryone(dist<<16,nosight);
		}
	}

	SetResultValue(r);
}

function bool CheckAliveTarget(int target)
{
	return (getActorProperty(target,APROP_Health)>0);
}

function int getUNumber(void)
{
	int userNumber;
	int c = ClassifyActor(0);
	if((c&ACTOR_MISSILE)||(c&ACTOR_GENERIC)) {
		userNumber = ACS_ExecuteWithResult(257,1);
	} else {
		userNumber =  PlayerNumber();
	}
	return userNumber;
}

function bool coopCheck(void)
{
	Return (GetCVar("cooperative")==1);
}

function bool teamCheck(void)
{
	Return (GetCVar("teamplay")==1||GetCVar("teamlms")==1||GetCVar("teampossession")==1
	||GetCVar("teamgame")==1);
}

function int UndyneCountEveryone(int dist, int nosight) {
	int r = 0;
	
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	
	int i;
	for(i=0;i<MAX_PLAYERS;i++) {
		r += UndyneCount(x, y, z, i, dist, nosight);
	}
	
	return r;
}

function int UndyneCountExcludeSelf(int ownerNumber, int dist, int nosight) {
	int r = 0;
	
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	
	int i;
	for(i=0;i<ownerNumber;i++) {
		r += UndyneCount(x, y, z, i, dist, nosight);
	}
	for(i=ownerNumber+1;i<MAX_PLAYERS;i++) {
		r += UndyneCount(x, y, z, i, dist, nosight);
	}
	
	return r;
}

function int UndyneCountEnemyTeam(int ownerNumber, int dist, int nosight) {
	int r = 0;

	int team = GetPlayerInfo(ownerNumber, PLAYERINFO_TEAM);
	
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	
	int i;
	for(i=0;i<ownerNumber;i++) {
		r += UndyneCountTeamDiffCheck(x, y, z, i, team, dist, nosight);
	}
	for(i=ownerNumber+1;i<MAX_PLAYERS;i++) {
		r += UndyneCountTeamDiffCheck(x, y, z, i, team, dist, nosight);
	}
	
	return r;
}

function int UndyneCountTeamDiffCheck(int x, int y, int z, int i, int team, int dist, int nosight) {
	int r = 0;
	
	if(team != GetPlayerInfo(i, PLAYERINFO_TEAM)) {
		r = UndyneCount(x, y, z, i, dist, nosight);
	}
	
	return r;
}

function int UndyneCount(int x, int y, int z, int i, int dist, int nosight) {
	int r = 0;
	
	int target = 1000+i;
	if(CheckAliveTarget(target)&&(nosight||CheckSight(0,target,CSF_NOFAKEFLOORS))&&fDistanceValTarget(x,y,z,target)<dist) {
		//GiveActorInventory(target,item,1);
		int owner = ActivatorTID();
		if(owner>0) {
			int u = UniqueTID();
			SpawnSpotForced("UndyingSoulGainFX",target,u,0);
			SetActivator(u);
			SetPointer(AAPTR_TARGET,owner);
			Thing_ChangeTID(0,0);
			SetActivator(owner);
		}
		
		r = 1;
	}
	
	return r;
}

function int fDistanceValTarget(int x, int y, int z, int target)
{
	return fDistanceVal(getactorx(target)-x,getactory(target)-y,getactorz(target)-z);
}


Script "SetActorProperty_Int" (int prop, int num)
{
SetActorProperty(0,prop,num);
}

Script "SetActorProperty_Fixed" (int prop, int mult, int div)
{
SetActorProperty(0,prop,((1.0)*mult)/div);
}

