

//Snail Breeder
script "cscc_stillalive" (void) //Check if player is alive; can be ued for other things
{
int magicnumber = GetActorProperty(0,APROP_TargetTID);
if(!PlayerInGame(magicnumber - 1000)||GetActorProperty(magicnumber,APROP_Health)<=0)
{SetActorState(0,"Begone",0);}
}

script "snailz_trailchecker" (void) //Check if player is walking.
{
int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
if (buttons & (BT_FORWARD|BT_BACK|BT_MOVELEFT|BT_MOVERIGHT))
{GiveInventory("YesToTrail",1);}
}

script "snailz_climbchecker" (void) //Spawn checker in any of the 8 directions.
{
int buttons = GetPlayerInput(-1, INPUT_BUTTONS); //Corresponds to the sprite rotations
if (buttons & BT_FORWARD && !(buttons & (BT_MOVELEFT|BT_MOVERIGHT))){GiveInventory("SnailzClimb1",1);}
if (buttons & BT_FORWARD && buttons & BT_MOVELEFT){GiveInventory("SnailzClimb2",1);}
if (buttons & BT_MOVELEFT && !(buttons & (BT_FORWARD|BT_BACK))){GiveInventory("SnailzClimb3",1);}
if (buttons & BT_BACK && buttons & BT_MOVELEFT){GiveInventory("SnailzClimb4",1);}
if (buttons & BT_BACK && !(buttons & (BT_MOVELEFT|BT_MOVERIGHT))){GiveInventory("SnailzClimb5",1);}
if (buttons & BT_BACK && buttons & BT_MOVERIGHT){GiveInventory("SnailzClimb6",1);}
if (buttons & BT_MOVERIGHT && !(buttons & (BT_FORWARD|BT_BACK))){GiveInventory("SnailzClimb7",1);}
if (buttons & BT_FORWARD && buttons & BT_MOVERIGHT){GiveInventory("SnailzClimb8",1);}
}

script "snailz_shellchecker" (void)
{
int button;
do{
button = GetPlayerInput(-1, INPUT_BUTTONS);
if (button & (BT_ATTACK|BT_ALTATTACK)){break;}
delay(4);
}
while(CheckInventory("ShellterFlag") >0 && CheckInventory("ClassDeathPickup") <1 && CheckInventory("SnailBreederPets") >0);
TakeInventory("ShellterFlag",1);ACS_NamedExecuteAlways("core_freezeplayer",0,0,0);ACS_NamedExecuteAlways("snailz_heavystatue",0,0);
GiveInventory("LightenSnail",1);
}

script "snailz_heavystatue" (int weights)//Makes player heavier to remove knockback
{
switch(weights)
{
case 0://Off
SetActorProperty(0,APROP_Mass,9999);break;
case 1://On
SetActorProperty(0,APROP_Mass,999999);break;
}
}

//=======|Yang

Script "YangPower" (int PlayerTID, int Divisor)
{
int ReturnValue = 10;
int YangSpeed = CurrentSpeedXYZ(PlayerTID);
int YangMultiplier = FixedDiv(YangSpeed, 10);
If(Divisor <=0)
	{
	ReturnValue = ReturnValue + CheckActorInventory(PlayerTID, "YangSemblance");
	}
Else
	{
	ReturnValue = ReturnValue + CheckActorInventory(PlayerTID, "YangSemblance")/Divisor;
	}

if(YangMultiplier > 1.0)
	{
	ReturnValue = FixedMul(ReturnValue-10, YangMultiplier)+10;
	}
//printbold(i:ReturnValue);
SetResultValue(ReturnValue);
}


#DEFINE DashWait 10
#DEFINE DashForce 25

script "YangBoost" (Void)
{
int InputButtons; 
int InputOldButtons; 
Bool SpeedPressed = FALSE;
int HasUsedMovement;

if(PlayerIsBot(PlayerNumber())){terminate;}

while(GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0 && CheckInventory("IsYang"))
	{
	InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
	HasUsedMovement=0;
	While(CheckActorInventory(ActivatorTID(), "EmberCelicaAmmo") < 2)
		{
		Delay(5);
		If(GetActorProperty(ActivatorTID(), APROP_HEALTH) <= 0 || !CheckInventory("IsYang")){terminate;}
		}

	SpeedPressed = CSCCButtonCheck(InputButtons, InputOldButtons, BT_SPEED|BT_USER1) == 1;
	
	
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255)>>16, DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255)>>16, -DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255+64.0)>>16, DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	If(SpeedPressed && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT))
		{
		ThrustThing((GetActorAngle(ActivatorTID())*255+192.0)>>16, DashForce, 1, 0);
		GiveInventory("EmberCelicaBoost", 1);
		HasUsedMovement=1;
		}
	
	//Jump Boost
	If(CSCCButtonCheck(InputButtons, InputOldButtons, BT_JUMP) == 1 || (HasUsedMovement == 1 && CSCCButtonCheck(InputButtons, InputOldButtons, BT_JUMP) == 3))
		{
		If((GetActorZ(0) - GetActorFloorZ(0)) >= 32.0)
			{
			SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), GetActorProperty(0, APROP_JUMPZ), 0, 0);
			TakeInventory("JumpCancler", 1);
			GiveInventory("EmberCelicaBoost", 1);
			HasUsedMovement=1;
			}
		}
		
	// Neutral movement
	If(SpeedPressed && HasUsedMovement == 0)
		{
		If(GetActorVelZ(0) == 0)
			{
			SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), FixedMul(GetActorProperty(0, APROP_JUMPZ),1.5), 0, 0);
			TakeInventory("JumpCancler", 1);
			GiveInventory("EmberCelicaUp", 1);
			HasUsedMovement=1;
			}
		Else
			{
			SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), -FixedMul(GetActorProperty(0, APROP_JUMPZ),1.25), 0, 0);
			TakeInventory("JumpCancler", 1);
			GiveInventory("EmberCelicaDown", 1);
			HasUsedMovement=1;
			}
		}
	If(HasUsedMovement==1)
		{
		GiveActorInventory(ActivatorTID(), "BoostExplodeItem", 1);
		TakeActorInventory(ActivatorTID(), "EmberCelicaAmmo", 2);
		}
	LimitSpeed(35);
    delay(1);	
	InputOldButtons = InputButtons; // More reliable than INPUT_OLDBUTTONS ....Go figure.
	}
}


Script "YangSpeedCheck" (void)
{
If(ActivatorTID() < 1000)
	{
	SetResultValue(CurrentSpeedXYZ(ACS_ExecuteWithResult(257,0)));
	}
Else
	{
	SetResultValue(CurrentSpeedXYZ(ActivatorTID()));
	}
}

Script "YangAura" (int mode)
{
If(ActivatorTID() < 1000)
	{
	SetActivatorToTarget(0);
	}
Switch(mode)
	{
	Case 1:
	SetResultValue(CheckInventory("YangSemblance"));
	break;
	Default:
	SetResultValue(CheckInventory("BasicArmor"));
	break;
	}
}

Script "YangSemblanceChecker" (void)
{
Delay(2);
int PlayerTID = ActivatorTID();
int CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
int CurrentAura = CheckActorInventory(PlayerTID, "BasicArmor");

while(GetActorProperty(PlayerTID, APROP_HEALTH) > 0 && CheckWeapon("EmberCelica"))
	{
	While(CurrentHealth + CurrentAura <= GetActorProperty(PlayerTID, APROP_HEALTH) + CheckActorInventory(PlayerTID, "BasicArmor"))
		{
		Delay(1);
		If(GetActorProperty(PlayerTID, APROP_HEALTH) > CurrentHealth)
			{
			CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
			}
		If(CheckActorInventory(PlayerTID, "BasicArmor") > CurrentAura)
			{
			CurrentAura = CheckActorInventory(PlayerTID, "BasicArmor");
			}
		}
	If(GetActorProperty(PlayerTID, APROP_HEALTH) > 0)
		{
		GiveActorInventory(PlayerTID, "YangSemblance", ((CurrentAura - CheckActorInventory(PlayerTID, "BasicArmor")) + (CurrentHealth - GetActorProperty(PlayerTID, APROP_HEALTH)))/2);
		CurrentAura = CheckActorInventory(PlayerTID, "BasicArmor");
		CurrentHealth = GetActorProperty(PlayerTID, APROP_HEALTH);
		}
	//printbold(s: "Health - ", i: CurrentHealth, s:" - Armor - ", i:CurrentAura);
	}
}


Function int OkayToBoost (int MovementCount)
{
If(CheckInventory("NoThrust") || CheckInventory("NoJump")){Return 1;}
//If(GetActorZ(0) - GetActorFloorZ(0) > 0 && Moved > 1){Return 1;}
If(MovementCount >= 1){Return 1;}
//Return(GetActorZ(0) - GetActorFloorZ(0) > 0 && Moved > 1);
Return 0;
}
//End Yang