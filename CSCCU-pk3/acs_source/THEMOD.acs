//TheMod - Where the content is pointless and the classes don't matter, dive in when you are ready!
//Half of this is generally unoptimized and can probably be done with advanced decorate wizardry according to some magical fairy I know
//But that is okay, Z-Magic is nice too. Please ask before you steal ACS that might help you but I know most people will not listen to this anyways

#library "THEMOD"
#include "zcommon.acs"

int DarkFade; //in case of fun trolling time
int ServerMAX = 32;

#DEFINE THEMODEMBLEMTID 90
#DEFINE THEMODCRATETID 91
#DEFINE ZomoChips 35
#DEFINE SPELLNUM 10

str ZomoChipList[ZomoChips]={
"FireSword",
"AquaSword",
"ElecSword",
"Sword",
"WideSword",
"LongSword",
"WindRack",
"AirShot",
"MiniBomb",
"MidBomb",
"CrossBomb",
"CannonBall",
"SeekBomb",
"TimeBomb",
"TreeBomb",
"Boomerang",
"HiBoomerang",
"MBoomerang",
"MegaEnergyBomb",
"HarpoonII",
"HarpoonIII",
"HarpoonIV",
"Uninstall",
"Muramasa",
"FlashBomb",
"DashAttack",
"FastGauge",
"AttackPlus",
"RedApple",
"GreenApple",
"YellowApple",//
"MagBolt",
"AntiDamage",
"Recover300",
"Invisible"
};

str MegaChipList[7]={
"FlashmanMega",
"WoodmanMega",
"FreezemanMega",
"BubblemanMega",
"NapalmmanMega",
"ProtomanEXEMega",
"Meteors"
};

str GigaChipList[1]={
"BassEXEGiga"
};

Function Int KeyUp (Int Key)
{ //"Borrowed" from https://zandronum.com/forum/viewtopic.php?f=11&t=68
Int Buttons = GetPlayerInput(-1, INPUT_BUTTONS);
If (~Buttons & Key) { Return 1; }	Return 0;
}

Function Int KeyDown (Int key)
{ //"Borrowed" from https://zandronum.com/forum/viewtopic.php?f=11&t=68
Int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
If (Buttons & Key) { Return 1; }	Return 0;
}

Function Int KeyPressed (Int Key)
{ //"Borrowed" from https://zandronum.com/forum/viewtopic.php?f=11&t=68
Int Buttons = GetPlayerInput(-1, INPUT_BUTTONS);
Int OldButtons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
Int NewButtons = (Buttons ^ OldButtons) & Buttons;
If (NewButtons & Key) { Return 1; }		Return 0;
}

Function Int GetDirection (Void)
{ //"Borrowed" from https://zandronum.com/forum/viewtopic.php?f=11&t=68
Int SideMove = KeyDown(BT_MOVERIGHT) - KeyDown(BT_MOVELEFT);
Int ForwMove = KeyDown(BT_FORWARD) - KeyDown(BT_BACK);
If (SideMove || ForwMove)
	{
	Switch (SideMove)
		{
		Case -1: 
			Switch (ForwMove)
				{
				Case -1: Return 6; //South-West
				Case 0: Return 5; //West
				Case 1: Return 4; //North-West
				}
				Break;
		Case 0: 
			Switch (ForwMove)
				{
				Case -1: Return 7; //South
				Case 1: Return 3; //North
				}
				Break;
		Case 1: 
			Switch (ForwMove)
				{
				Case -1: Return 8; //South-East
				Case 0: Return 1; //East
				Case 1: Return 2; //North-East
				}
				Break;
		}
	}
	Return 0;
}

//Wall jump angling
int JumpAngByte;
int TotalAngles;

//160
script "WallJumpScript" (int Force)
{
	//SetActivatorToTarget(0);
	JumpAngByte = 0;
	TotalAngles = 0;
    if (CheckInventory("WallN") && !CheckInventory("WallS")) {
		JumpAngByte += 128;
		TotalAngles++;
	}
    if (/*CheckInventory("WallS") &&*/ !CheckInventory("WallN")) {
		JumpAngByte += 256;
		TotalAngles++;
	}
	if (CheckInventory("WallE") && !CheckInventory("WallW")) {
	    JumpAngByte += 64;
		TotalAngles++;
	}
	if (CheckInventory("WallW") && !CheckInventory("WallE")) {
	    JumpAngByte += 192;
		TotalAngles++;
	}
	if (/*CheckInventory("WallS") && */ !CheckInventory("WallN") && CheckInventory("WallE") && !CheckInventory("WallW")) { //Somewhere, a mathematician is crying.
	    JumpAngByte = 32;
		TotalAngles = 1;
	}
	if (TotalAngles>0) {
		JumpAngByte /= TotalAngles;
		ThrustThing(((GetActorAngle(0) >> 8) + JumpAngByte),Force,1);
	}
}

//143
script "CBMTeamColor" (int ID, int Swap) //CBM's team color script, 1-4 used in respective order of teams. Refer to Red Mage's Subzero Field/Ice Cloak for examples.
{
if(Swap==1){
	if(ClassifyActor(ID) & ACTOR_PLAYER){
		if(GetCVar("teamlms")==1||GetCVar("ctf")==1||GetCVar("teamplay")==1||GetCVar("oneflagctf")==1||GetCVar("teampossession")==1||GetCVar("teamgame")==1 ){
			SetResultValue(GetPlayerInfo(ID-1000,PLAYERINFO_TEAM));
			terminate;
		}
	}
SetResultValue(-1); //TEAM_NONE is the equivalent, which is the fallback when there is no team.
}


if(!(ClassifyActor(ActivatorTID()) & ACTOR_PLAYER)) {
SetActivatorToTarget(0);
}
if(ClassifyActor(ActivatorTID()) & ACTOR_PLAYER) {
if(GetCVar("teamlms")==1||GetCVar("ctf")==1||GetCVar("teamplay")==1||GetCVar("oneflagctf")==1||GetCVar("teampossession")==1||GetCVar("teamgame")==1 ){SetResultValue(PlayerTeam());terminate;}
}
SetResultValue(-1);
}

Script "ZomoPAInitiate" (Void)
{
If(CheckInventory("IsZomo")==1) {ACS_NamedExecute("ZomoPAHandler",0);}
}


Script "LightSBarHandler" (Void) //SBAR Manager for Light's classes
{
Int MaxHealth = GetActorProperty(0,APROP_SPAWNHEALTH);
Int LowHealth = FixedMul(MaxHealth,0.45);

 While(GetActorProperty(0,APROP_HEALTH)>0)
	{
	If(GetActorProperty(0,APROP_HEALTH)<LowHealth+2) {GiveInventory("LowOnHealth",1);} //If health is lower than 45%, give the inventory actor
	Else If(GetActorProperty(0,APROP_HEALTH)>LowHealth+1) {TakeInventory("LowOnHealth",1);} //If health is higher than 45%, remove the inventory actor
	Delay(2);
	}
 Terminate;
}

//666
Script "DirectionGrabber" (Void)
{
Int Direction = GetDirection();
SetResultValue(Direction);
}

Int Buttons[64];


//866
script "ZomoNaviSummon" (int WhatChip) //Simple yet clear statement as to what is being summoned by a Zomo class, could see use later for screen dimming.
{
	//LocalAmbientSound("misc/BNSiren",127);
	Switch (WhatChip)
	{
		Case 1:
		LocalAmbientSound("misc/elementsfx",127);
		SetFont("SMALLFONT");
		HudMessage(s:"\cjWoodman"; HUDMSG_FADEOUT, 60, CR_BLACK,0.15, 0.30, 2.0, 1.0);
		Delay(70);
		Break;
		Case 2:
		LocalAmbientSound("misc/elementsfx",127);
		SetFont("SMALLFONT");
		HudMessage(s:"\cjBass"; HUDMSG_FADEOUT, 60, CR_BLACK,0.15, 0.30, 2.0, 1.0);
		Delay(70);
		Break;
		Case 3:
		LocalAmbientSound("misc/elementsfx",127);
		SetFont("SMALLFONT");
		HudMessage(s:"\cjFreezeman"; HUDMSG_FADEOUT, 60, CR_BLACK,0.15, 0.30, 2.0, 1.0);
		Delay(70);
		Break;
		Case 4:
		LocalAmbientSound("misc/elementsfx",127);
		SetFont("SMALLFONT");
		HudMessage(s:"\cjBubbleman"; HUDMSG_FADEOUT, 60, CR_BLACK,0.15, 0.30, 2.0, 1.0);
		Delay(70);
		Break;
		Case 5:
		LocalAmbientSound("misc/elementsfx",127);
		SetFont("SMALLFONT");
		HudMessage(s:"\cjFlashman"; HUDMSG_FADEOUT, 60, CR_BLACK,0.15, 0.30, 2.0, 1.0);
		Delay(70);
		Break;
		Case 6:
		LocalAmbientSound("misc/elementsfx",127);
		SetFont("SMALLFONT");
		HudMessage(s:"\cjNapalmman"; HUDMSG_FADEOUT, 60, CR_BLACK,0.15, 0.30, 2.0, 1.0);
		Delay(70);
		Break;
		Case 7:
		LocalAmbientSound("misc/elementsfx",127);
		SetFont("SMALLFONT");
		HudMessage(s:"\cjProtoman"; HUDMSG_FADEOUT, 60, CR_BLACK,0.15, 0.30, 2.0, 1.0);
		Delay(70);
		Break;
		Case 8:
		LocalAmbientSound("misc/BNSiren",127);
		SetFont("SMALLFONT");
		HudMessage(s:"\cjSunMoon"; HUDMSG_FADEOUT, 60, CR_BLACK,0.15, 0.30, 2.0, 1.0);
		Delay(70);
		Break;
		
	}
}

Script "ZomoPAHandler" (void) net //Program Advance Handler 777
{
if (CheckInventory("PALimiter")){
	SetFont("SMALLFONT");
	HudMessage(s:"\cjYou have a Program Advance already.\n\cj         Use it first and try again."; HUDMSG_FADEOUT, 58, CR_BLACK,0.5, 0.25, 1.0,0.5);}
else if (CheckInventory("SwordFlag") && CheckInventory("WideSwordFlag2") && CheckInventory("LongSwordFlag3")){
	TakeInventory("SwordChip", 1);
	TakeInventory("WideSwordChip", 1);
	TakeInventory("LongSwordChip", 1);
	TakeInventory("SwordFlag", 1);
	TakeInventory("WideSwordFlag2", 1);
	TakeInventory("LongSwordFlag3", 1);
	LocalAmbientSound("misc/BNProgramAdvance",127);
	SetFont("PRGMA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 52, CR_BLACK, 0.23, 0.25, 2.95,0.5);
	SetFont("SMALLFONT");
	HudMessage(s:"\cvSword"; HUDMSG_FADEOUT, 53, CR_BLACK,0.15, 0.30, 2.95,0.5);
	Delay(7);
	HudMessage(s:"\cvWideSword"; HUDMSG_FADEOUT, 54, CR_BLACK,0.15, 0.33, 2.75,0.5);
	Delay(7);
	HudMessage(s:"\cvLongSword"; HUDMSG_FADEOUT, 55, CR_BLACK,0.15, 0.36, 2.55,0.5);
	Delay(19);
	GiveInventory("LifeSwordPA", 1);
	GiveInventory("PALimiter", 1);
	HudMessage(s:"\cjLifeSword"; HUDMSG_FADEOUT, 56, CR_BLACK,0.15, 0.45, 2.15,0.5);
	//SetFont("BIGFONT");
	//HudMessageBold(n:0, s:" \cvhas activated a Program Advance!"; HUDMSG_FADEOUT, 51, CR_BLACK,0.5, 0.90, 2.0,1.5);
	Delay(85);
	}
else if (CheckInventory("MiniBombFlag") && CheckInventory("MidBombFlag2") && CheckInventory("CrossBombFlag3")){
	TakeInventory("MiniBombChip", 1);
	TakeInventory("MidBombChip", 1);
	TakeInventory("CrossBombChip", 1);
	TakeInventory("MiniBombFlag", 1);
	TakeInventory("MidBombFlag2", 1);
	TakeInventory("CrossBombFlag3", 1);
	LocalAmbientSound("misc/BNProgramAdvance",127);
	SetFont("PRGMA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 52, CR_BLACK, 0.23, 0.25, 2.95,0.5);
	SetFont("SMALLFONT");
	HudMessage(s:"\cvMinibomb"; HUDMSG_FADEOUT, 53, CR_BLACK,0.15, 0.30, 2.95,0.5);
	Delay(7);
	HudMessage(s:"\cvMidBomb"; HUDMSG_FADEOUT, 54, CR_BLACK,0.15, 0.33, 2.75,0.5);
	Delay(7);
	HudMessage(s:"\cvCrossBomb"; HUDMSG_FADEOUT, 55, CR_BLACK,0.15, 0.36, 2.55,0.5);
	Delay(19);
	GiveInventory("OmegaBombPA", 1);
	GiveInventory("PALimiter", 1);
	HudMessage(s:"\cjOmega Bomb"; HUDMSG_FADEOUT, 56, CR_BLACK,0.15, 0.45, 2.15,0.5);
	//SetFont("BIGFONT");
	//HudMessageBold(n:0, s:" \cvhas activated a Program Advance!"; HUDMSG_FADEOUT, 51, CR_BLACK,0.5, 0.90, 2.0,1.5);
	Delay(85);
	}
else if (CheckInventory("BoomerangFlag") && CheckInventory("HiBoomerangFlag2") && CheckInventory("MBoomerangFlag3")){
	TakeInventory("BoomerangChip", 1);
	TakeInventory("HiBoomerangChip", 1);
	TakeInventory("MBoomerangChip", 1);
	TakeInventory("BoomerangFlag", 1);
	TakeInventory("HiBoomerangFlag2", 1);
	TakeInventory("MBoomerangFlag3", 1);
	LocalAmbientSound("misc/BNProgramAdvance",127);
	SetFont("PRGMA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 52, CR_BLACK, 0.23, 0.25, 2.95,0.5);
	SetFont("SMALLFONT");
	HudMessage(s:"\cvBoomerang"; HUDMSG_FADEOUT, 53, CR_BLACK,0.15, 0.30, 2.95,0.5);
	Delay(7);
	HudMessage(s:"\cvHi-Boomerang"; HUDMSG_FADEOUT, 54, CR_BLACK,0.15, 0.33, 2.75,0.5);
	Delay(7);
	HudMessage(s:"\cvM-Boomerang"; HUDMSG_FADEOUT, 55, CR_BLACK,0.15, 0.36, 2.55,0.5);
	Delay(19);
	GiveInventory("OBoomerangPA", 1);
	GiveInventory("PALimiter", 1);
	HudMessage(s:"\cjOmega Boomerang"; HUDMSG_FADEOUT, 56, CR_BLACK,0.15, 0.45, 2.15,0.5);
	//SetFont("BIGFONT");
	//HudMessageBold(n:0, s:" \cvhas activated a Program Advance!"; HUDMSG_FADEOUT, 51, CR_BLACK,0.5, 0.90, 2.0,1.5);
	Delay(85);
	}
else if (CheckInventory("MeteorFlag") && CheckInventory("AttackPlusFlag2") && CheckInventory("UninstallFlag3")){
	TakeInventory("MeteorsChip", 1);
	TakeInventory("AttackPlusChip", 1);
	TakeInventory("UninstallChip", 1);
	TakeInventory("MeteorFlag", 1);
	TakeInventory("AttackPlusFlag2", 1);
	TakeInventory("UninstallFlag3", 1);
	LocalAmbientSound("misc/BNProgramAdvance",127);
	SetFont("PRGMA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 52, CR_BLACK, 0.23, 0.25, 2.95,0.5);
	SetFont("SMALLFONT");
	HudMessage(s:"\cvMeteors"; HUDMSG_FADEOUT, 53, CR_BLACK,0.15, 0.30, 2.95,0.5);
	Delay(7);
	HudMessage(s:"\cvAttack+"; HUDMSG_FADEOUT, 54, CR_BLACK,0.15, 0.33, 2.75,0.5);
	Delay(7);
	HudMessage(s:"\cvUninstall"; HUDMSG_FADEOUT, 55, CR_BLACK,0.15, 0.36, 2.55,0.5);
	Delay(19);
	GiveInventory("SunMoonPA", 1);
	GiveInventory("PALimiter", 1);
	HudMessage(s:"\cjSunMoon"; HUDMSG_FADEOUT, 56, CR_BLACK,0.15, 0.45, 2.15,0.5);
	//SetFont("BIGFONT");
	//HudMessageBold(n:0, s:" \cvhas activated a Program Advance!"; HUDMSG_FADEOUT, 51, CR_BLACK,0.5, 0.90, 2.0,1.5);
	Delay(85);
	}
else if (CheckInventory("TimeBombFlag") && CheckInventory("TimeBombFlag2") && CheckInventory("TimeBombFlag3")){
	TakeInventory("TimeBombFlag", 1);
	TakeInventory("TimeBombFlag2", 1);
	TakeInventory("TimeBombFlag3", 1);
	TakeInventory("TimeBombChip", 3);
	LocalAmbientSound("misc/BNProgramAdvance",127);
	SetFont("PRGMA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 52, CR_BLACK, 0.23, 0.25, 2.95,0.5);
	SetFont("SMALLFONT");
	HudMessage(s:"\cvTimeBomb"; HUDMSG_FADEOUT, 53, CR_BLACK,0.15, 0.30, 2.95,0.5);
	Delay(7);
	HudMessage(s:"\cvTimeBomb"; HUDMSG_FADEOUT, 54, CR_BLACK,0.15, 0.33, 2.75,0.5);
	Delay(7);
	HudMessage(s:"\cvTimeBomb"; HUDMSG_FADEOUT, 55, CR_BLACK,0.15, 0.36, 2.55,0.5);
	Delay(19);
	GiveInventory("TimeBombPlusPA", 1);
	GiveInventory("PALimiter", 1);
	HudMessage(s:"\cjTimeBomb+"; HUDMSG_FADEOUT, 56, CR_BLACK,0.15, 0.45, 2.15,0.5);
	//SetFont("BIGFONT");
	//HudMessageBold(n:0, s:" \cvhas activated a Program Advance!"; HUDMSG_FADEOUT, 51, CR_BLACK,0.5, 0.90, 2.0,1.5);
	Delay(85);
	}
else if (CheckInventory("FireSwordFlag") && CheckInventory("AquaSwordFlag2") && CheckInventory("ElecSwordFlag3")){
	TakeInventory("FireSwordChip", 1);
	TakeInventory("AquaSwordChip", 1);
	TakeInventory("ElecSwordChip", 1);
	TakeInventory("FireSwordFlag", 1);
	TakeInventory("AquaSwordFlag2", 1);
	TakeInventory("ElecSwordFlag3", 1);
	LocalAmbientSound("misc/BNProgramAdvance",127);
	SetFont("PRGMA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 52, CR_BLACK, 0.23, 0.25, 2.95,0.5);
	SetFont("SMALLFONT");
	HudMessage(s:"\cvFireSword"; HUDMSG_FADEOUT, 53, CR_BLACK,0.15, 0.30, 2.95,0.5);
	Delay(7);
	HudMessage(s:"\cvAquaSword"; HUDMSG_FADEOUT, 54, CR_BLACK,0.15, 0.33, 2.75,0.5);
	Delay(7);
	HudMessage(s:"\cvElecSword"; HUDMSG_FADEOUT, 55, CR_BLACK,0.15, 0.36, 2.55,0.5);
	Delay(19);
	GiveInventory("ElemSwordPA", 1);
	GiveInventory("PALimiter", 1);
	HudMessage(s:"\cjElemSword"; HUDMSG_FADEOUT, 57, CR_BLACK,0.15, 0.45, 2.15,0.5);
	//SetFont("BIGFONT");
	//HudMessageBold(n:0, s:" \cvhas activated a Program Advance!"; HUDMSG_FADEOUT, 51, CR_BLACK,0.5, 0.90, 2.0,1.5);
	Delay(85);
	}
else if (CheckInventory("Harpoon2Flag") && CheckInventory("Harpoon3Flag2") && CheckInventory("Harpoon4Flag3")){
	TakeInventory("HarpoonIIChip", 1);
	TakeInventory("HarpoonIIIChip", 1);
	TakeInventory("HarpoonIVChip", 1);
	TakeInventory("Harpoon2Flag", 1);
	TakeInventory("Harpoon3Flag2", 1);
	TakeInventory("Harpoon4Flag3", 1);
	LocalAmbientSound("misc/BNProgramAdvance",127);
	SetFont("PRGMA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 52, CR_BLACK, 0.23, 0.25, 2.95,0.5);
	SetFont("SMALLFONT");
	HudMessage(s:"\cvHarpoon-2"; HUDMSG_FADEOUT, 53, CR_BLACK,0.15, 0.30, 2.95,0.5);
	Delay(7);
	HudMessage(s:"\cvHarpoon-3"; HUDMSG_FADEOUT, 54, CR_BLACK,0.15, 0.33, 2.75,0.5);
	Delay(7);
	HudMessage(s:"\cvHarpoon-4"; HUDMSG_FADEOUT, 55, CR_BLACK,0.15, 0.36, 2.55,0.5);
	Delay(19);
	GiveInventory("ArrowsPA", 1);
	GiveInventory("PALimiter", 1);
	HudMessage(s:"\cjArrows"; HUDMSG_FADEOUT, 57, CR_BLACK,0.15, 0.45, 2.15,0.5);
	//SetFont("BIGFONT");
	//HudMessageBold(n:0, s:" \cvhas activated a Program Advance!"; HUDMSG_FADEOUT, 51, CR_BLACK,0.5, 0.90, 2.0,1.5);
	Delay(35);
	}
}

Script "ZomoUltHandler" (int PAPicker) //Ult for Zomo 778
{
LocalAmbientSound("menu/dismiss",127);
Switch (PAPicker)
	{
	Case 1:
	GiveInventory("SwordChip", 1);
	GiveInventory("WideSwordChip", 1);
	GiveInventory("LongSwordChip", 1);
	HudMessage(s:"\cjLifeSword Program Advance components given."; HUDMSG_FADEOUT, 66, CR_BLACK,0.5, 0.35, 1.0,0.5);
	break;
	Case 2:
	GiveInventory("FireSwordChip", 1);
	GiveInventory("AquaSwordChip", 1);
	GiveInventory("ElecSwordChip", 1);
	HudMessage(s:"\cjElemSword Program Advance components given."; HUDMSG_FADEOUT, 66, CR_BLACK,0.5, 0.35, 1.0,0.5);
	break;
	Case 3:
	GiveInventory("MiniBombChip", 1);
	GiveInventory("MidBombChip", 1);
	GiveInventory("CrossBombChip", 1);
	HudMessage(s:"\cjOmegaBomb Program Advance components given."; HUDMSG_FADEOUT, 66, CR_BLACK,0.5, 0.35, 1.0,0.5);
	break;
	Case 4:
	GiveInventory("TimeBombChip", 3);
	HudMessage(s:"\cjTimeBomb+ Program Advance components given."; HUDMSG_FADEOUT, 66, CR_BLACK,0.5, 0.35, 1.0,0.5);
	break;
	Case 5:
	GiveInventory("BoomerangChip", 1);
	GiveInventory("HiBoomerangChip", 1);
	GiveInventory("MBoomerangChip", 1);
	HudMessage(s:"\cjOmega Boomerang Program Advance components given."; HUDMSG_FADEOUT, 66, CR_BLACK,0.5, 0.35, 1.0,0.5);
	break;
	Case 6:
	GiveInventory("HarpoonIIChip", 1);
	GiveInventory("HarpoonIIIChip", 1);
	GiveInventory("HarpoonIVChip", 1);
	HudMessage(s:"\cjArrows Program Advance components given."; HUDMSG_FADEOUT, 66, CR_BLACK,0.5, 0.35, 1.0,0.5);
	break;
	Case 7:
	GiveInventory("MeteorsChip", 1);
	GiveInventory("AttackPlusChip", 1);
	GiveInventory("UninstallChip", 1);
	HudMessage(s:"\cjSun-Moon Program Advance components given."; HUDMSG_FADEOUT, 66, CR_BLACK,0.5, 0.35, 1.0,0.5);
	break;
	}
}

//Anything below likely was assisted on by Celebi, thanks go out to him   ~Zomo

function int NewZomoChipFunc(int Past1, int Past2, int Past3, int Past4, int Past5)
{
	int Check = 0;
	int LMS = ZomoChips;
	if(GetCvar("lastmanstanding")==1 || GetCvar("teamlms")){LMS = ZomoChips-4;}
	do {
		Check = random(0,LMS - 1);
	} while(Check==Past1 || Check==Past2 || Check==Past3 || Check==Past4 || Check==Past5);
	return Check;
}

script "ZomoChipShuffle" (int Magic)
{
LocalAmbientSound("zomo/customenter",127);
TakeInventory("CustomFlag",99); //Oi this is needed for aesthetics, please keep until I move it to an item.  ~Zomo

int ChipX1 = -1;
int ChipX2 = -1;
int ChipX3 = -1;
int ChipX4 = -1;
int ChipX5 = -1;
str TempStr;
//StrParam(s:ZomoChipList[NUMBER],s:"Flag");

//CheckWeapon("ZomoBNWep");
//CheckWeapon("ZomoBNWep2");
//CheckWeapon("ZomoBNWep3");

for(int i=0; i<ZomoChips; i++) {
	TempStr = StrParam(s:ZomoChipList[i],s:"Chip");
	if(CheckInventory(TempStr)){
		//Log(s:"Existing chip ",s:TempStr,s:" in inventory!");
		if(ChipX1 == -1){
			ChipX1 = i;
			//Log(s:"Recorded Chip1 = ",s:TempStr);
		}
		else if(ChipX2 == -1){
			ChipX2 = i;
			//Log(s:"Recorded Chip2 = ",s:TempStr);
		}
		else if(ChipX3 == -1){
			ChipX3 = i;
			//Log(s:"Recorded Chip3 = ",s:TempStr);
		}
		else {
			//Log(s:"WARNING EXTRA CHIPS NOT RECORDED!");
		}
		TakeInventory(TempStr,9);
		//Log(s:TempStr,s:" removed from inventory!");
	}
}

ChipX4 = ChipX1;
ChipX5 = ChipX2;

ChipX1 = NewZomoChipFunc(ChipX1,ChipX2,ChipX3,ChipX4,ChipX5);
ChipX2 = NewZomoChipFunc(ChipX1,ChipX2,ChipX3,ChipX4,ChipX5);
ChipX3 = NewZomoChipFunc(ChipX1,ChipX2,ChipX3,ChipX4,ChipX5);

GiveInventory( StrParam(s:ZomoChipList[ChipX1],s:"Chip") ,1);
GiveInventory( StrParam(s:ZomoChipList[ChipX2],s:"Chip") ,1);
GiveInventory( StrParam(s:ZomoChipList[ChipX3],s:"Chip") ,1);

HudMessage(s:ZomoChipList[ChipX1],s:" has been given!"; HUDMSG_FADEOUT, 67, CR_WHITE,0.1, 0.51, 2.0,0.5);
HudMessage(s:ZomoChipList[ChipX2],s:" has been given!"; HUDMSG_FADEOUT, 68, CR_WHITE,0.1, 0.54, 2.0,0.5);
HudMessage(s:ZomoChipList[ChipX3],s:" has been given!"; HUDMSG_FADEOUT, 69, CR_WHITE,0.1, 0.57, 2.0,0.5);

if(GetCvar("lastmanstanding")==1 || GetCvar("teamlms")){terminate;}
if(!CheckInventory("MegaChipFlag")&&random(0,100)>=85){
	if(random(0,100)>=90){GiveInventory( StrParam(s:GigaChipList[0],s:"Chip") ,1);}
	else{GiveInventory( StrParam(s:MegaChipList[random(0,6)],s:"Chip") ,1);}
}}

//End of green fairy magic

//780
script "FastGaugeSupport" (void) //FastGauge support script
{
	LocalAmbientSound("misc/fastgauge",127);
	SetFont("FGAEA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 58, CR_BLACK, 0.55, 0.15, 0.5,0.25);
	Delay(4);
	SetFont("FGAEB0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 58, CR_BLACK, 0.55, 0.15, 0.5,0.25);
	Delay(4);
	SetFont("FGAEA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 58, CR_BLACK, 0.55, 0.15, 0.5,0.25);
	Delay(4);
	SetFont("FGAEB0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 58, CR_BLACK, 0.55, 0.15, 0.5,0.25);
	Delay(4);
	SetFont("FGAEA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 58, CR_BLACK, 0.55, 0.15, 0.5,0.25);
	Delay(4);
	SetFont("FGAEB0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 58, CR_BLACK, 0.55, 0.15, 0.5,0.25);
	Delay(4);
	SetFont("FGAEA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 58, CR_BLACK, 0.55, 0.15, 0.5,0.25);
	Delay(4);
	SetFont("FGAEB0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 58, CR_BLACK, 0.55, 0.15, 0.5,0.25);
	Delay(4);
	SetFont("FGAEA0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 58, CR_BLACK, 0.55, 0.15, 0.5,0.25);
	Delay(4);
	SetFont("FGAEB0");
	HudMessage(s: "A"; HUDMSG_FADEOUT, 58, CR_BLACK, 0.55, 0.15, 0.5,0.25);
}

/*Script 781 (void)
{
if(GetCvar("teamlms")==1){SetResultValue(1);}
if(GetCvar("teamdeathmatch")==1){SetResultValue(1);}
else{SetResultValue(0);}
}*/

//Green fairy magic part 2, borrowed/modified from Unholy's Rogue Shield coding
//889
Script "AntiDamageScript" (int Swap) //AntiDamage script
{
	int h = max(PlayerHealth(),0);
	if(GetActorProperty(0,APROP_HEALTH)>=1){}
	else{
		HudMessage(s:"\cjIf you're seeing this message then you tried to activate AntiDamage with 0HP. Have fun being dead."; HUDMSG_FADEOUT, 58, CR_BLACK,0.5, 0.25, 1.0,0.5);
		terminate;}
	Switch(Swap)
	{
		Case 0:
			SetPlayerProperty(0,1,16);
			GiveInventory("AntiDamageTime",1);
			TakeInventory("AntiBreakTime",99);
			TakeInventory("AntiWindTime",99);
			TakeInventory("AntiDamageHealth",99999);
			GiveInventory("AntiDamageHealth",h);
			break;
		Case 1:
			int diff = CheckInventory("AntiDamageHealth") - h;
			HealThing(diff);
			Delay(50);
			SetPlayerProperty(0,0,16);
			break;
		Case 2:
			GiveInventory("AntiWindTime",1);
			TakeInventory("AntiBreakTime",99);
			TakeInventory("AntiDamageTime",99);
			TakeInventory("AntiDamageHealth",99999);
			GiveInventory("AntiDamageHealth",h);
			break;
		Case 3:
			GiveInventory("AntiBreakTime",1);
			TakeInventory("AntiDamageTime",99);
			TakeInventory("AntiWindTime",99);
			TakeInventory("AntiDamageHealth",99999);
			GiveInventory("AntiDamageHealth",h);
			break;
	}
}

function int max (int a, int b)
{
	if (a > b)
		return a;

	return b;
}

function int min (int a, int b)
{
	if (a < b)
		return a;

	return b;
}

//End of green fairy magic part 2

//890
script "MuramasaScript" (void) NET //Muramasa script and whatever the fuck else that uses HP lost to determine damage
{
	SetActivatorToTarget(0);
	int MuramasaPower = (GetActorProperty(0, APROP_SPAWNHEALTH) - GetActorProperty(0, APROP_HEALTH));
	//if (MuramasaPower >= 500){MuramasaPower = 500;}
	//HudMessage(s:"Muramasa: ",d:MuramasaPower; HUDMSG_FADEOUT, 75, CR_DARKRED,0.5, 0.20, 5.0,2.0);
	SetResultValue(MuramasaPower);
}

//891
script "SteamEruptionScript" (int DamageValue)
{

/*
So steam eruption does damage proportionate to how much mana Redmage has, right now the max
value of redmagemana is 64, however at base 100, that being applied 1:1 is going to be a lot,
especially when this fires a volley of steam projectiles.

I'm reworking the formula to adjust a fixed value by a percentage of the mana.
*/
	SetActivatorToTarget(0);
	int SteamEruptionPower = round((CheckInventory("RedMageMana") / 64) * DamageValue);
	
	
	
	SetResultValue(SteamEruptionPower);
	//Print(s:"Steam Eruption Damage: ",d:SteamEruptionPower);
}

function int NRound(int fixedNumber) //Left in for anything that rounds
{
	return (fixedNumber + 0.5) >> 16;
}

//107
script "FloorStateChange" (void)
{
if
(CheckActorFloorTexture(ActivatorTID(),"F_SKY1")==1
||CheckActorFloorTexture(ActivatorTID(),"BUBBLE23")==1
||CheckActorFloorTexture(ActivatorTID(),"HFALL")==1
||CheckActorFloorTexture(ActivatorTID(),"CHARG46")==1
||CheckActorFloorTexture(ActivatorTID(),"CHARG48")==1
||CheckActorFloorTexture(ActivatorTID(),"FIRELAV")==1
||CheckActorFloorTexture(ActivatorTID(),"SHAFALX1")==1
||CheckActorFloorTexture(ActivatorTID(),"JLAVA")==1
||CheckActorFloorTexture(ActivatorTID(),"SWORLAVX")==1
||CheckActorFloorTexture(ActivatorTID(),"BUBBWTR")==1
||CheckActorFloorTexture(ActivatorTID(),"CHARTRCK")==1
||CheckActorFloorTexture(ActivatorTID(),"CHARGRND")==1
||CheckActorFloorTexture(ActivatorTID(),"SHALAVAX")==1
||CheckActorFloorTexture(ActivatorTID(),"BLACKR1")==1
||CheckActorFloorTexture(ActivatorTID(),"ASTSNDX")==1
||CheckActorFloorTexture(ActivatorTID(),"WT1LAVAX")==1
||(GetLevelInfo(LEVELINFO_LEVELNUM)!=15
&&CheckActorFloorTexture(ActivatorTID(),"BLACK")==1)
||(GetLevelInfo(LEVELINFO_LEVELNUM)!=75
&&CheckActorFloorTexture(ActivatorTID(),"AQWATER")==1)
){
SetResultValue(1);
}else{
SetResultValue(0);
}
}


function int xyzDistance (int tid1, int tid2)
{
	int x, y, z, d;
	x = GetActorX(tid1) - GetActorX(tid2) >> 16; // Convert fixed point to integer
	y = GetActorY(tid1) - GetActorY(tid2) >> 16;
	z = GetActorZ(tid1) - GetActorZ(tid2) >> 16;
	d = sqrt8( x*x + y*y + z*z );
	return d;
}

function int sqrt8(int number)
{
	if(number <= 3)
	{
		if(number > 0)
		{
			return 1;
		}
		return 0;
	}

	int oldAns = number >> 1,                     // initial guess
	    newAns = (oldAns + number / oldAns) >> 1; // first iteration

	// main iterative method
	while(newAns < oldAns)
	{
		oldAns = newAns;
		newAns = (oldAns + number / oldAns) >> 1;
	}

	return oldAns;
}

//=======================================
//user inputs script
script "InputCheckEnter" ENTER 
{
		ACS_NamedExecuteAlways("InputCheckScript",0);
}

script "InputCheckScript" (void) 
{
int inputready = 1;

While(inputready == 1)
{
int button = GetPlayerInput(-1, INPUT_BUTTONS);

	if (button & BT_USER1)
	{
		GiveInventory("User1_Trigger",1);
		Delay (1); // Wait for next frame
	}
	if (button & BT_USER2)
	{
		GiveInventory("User2_Trigger",1);
		Delay (1); // Wait for next frame
	}
	if (button & BT_USER3)
	{
		GiveInventory("User3_Trigger",1);
		Delay (1); // Wait for next frame
	}
	if (button & BT_USER4)
	{
		GiveInventory("User4_Trigger",1);
		Delay (1); // Wait for next frame
	}
Delay (1); // Wait for next frame
}
}

str RmSpellsList[spellnum]={
"Diara",
"Fira",
"Aerora",
"Blizzara",
"Slow",
"Watera",
"Thundara",
"Blink",
"Temper",
"Focus"
};

str RMSpellMem[4];
//This array here will keep track of the last 4 spells gained, thus when a new one
//is given, it checks to see if it is listed on here first before handing the spell

function void AppendSpell (str spellname)
// this function adds the new spell to the list and pushes the other entries down
{
 RMSpellMem[3] =  RMSpellMem[2];
 RMSpellMem[2] =  RMSpellMem[1];
 RMSpellMem[1] =  RMSpellMem[0];
 RMSpellMem[0] = spellname;
}

function int spellchecker (str spellname)
{
int matchCount;
//this checks for any matches of a spell in question within the spellmemory, if we
//have a match or more, then this spell cannot be given.
	for(int i=0; i<4; i++)
	{if(RMSpellMem[i] == spellname){++matchCount;}} 
	return matchCount;
}

//Makes the Target damage an actor of the TID
//103
script "PollenDotDamageHandler" (int damage, int TID)
{
setactivator(0,AAPTR_TARGET);
thing_damage2(TID,damage,"%o got the allergies after being covered in %k's pollen!");
}

//728
script "RedMageSpellHandler" (void)
{
int spellcount;
//first, we will start by taking out all existing spells except Diara, since 
//Diara is in element 0, a for loop that starts at 1 will do the trick
	for(int i=1; i<spellnum; i++) 
	{
	Takeinventory(StrParam(s:"RedMage",s:RmSpellsList[i],s:"Wep"),99);
	Takeinventory(StrParam(s:RmSpellsList[i],s:"SpellFlag"),99);
	}
	
//now time to give some spells, 
	until(spellcount >= 2)
	{
	//untill we have given two spells, keep looping. so here we will pick a random number and check for any matches in
	//spellmemory, if we do have a match then we just loop again. if we don't, we will give that spell and then increment
	// the spellcount variable. when it reaches 2, the loop stops.
	int randspell = random(1,spellnum - 1);
	int spellmatch = spellchecker(RmSpellsList[randspell]);
		if(spellmatch == 0)
		{
		giveinventory(StrParam(s:"RedMage",s:RmSpellsList[randspell],s:"Wep"),1);
		giveinventory(StrParam(s:RmSpellsList[randspell],s:"SpellFlag"),1);
		AppendSpell(RmSpellsList[randspell]);
		spellcount = ++spellcount;
		
		}
	}
}

//730
Script "GrassCounter" (VOID)
{
int GrassCount = 0;
	If(xyzDistance(0,67) < 100) // && FiringPlayer!=Target_TID
		{
		GrassCount = 1;
		}
	SetResultValue(GrassCount);
}

//732
Script "FusionPrintScript" (void)
{
while(CheckInventory("IsDead")==0)
	{
	if(PlayerInGame(PlayerNumber()) && CheckInventory("IsRedMage"))
		{
		if(CheckInventory("FiraSpellFlag") && CheckInventory("ThundaraSpellFlag")){
			SetFont("FUSICN27");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("FiraSpellFlag") && CheckInventory("WateraSpellFlag")){
			SetFont("FUSICN23");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("FiraSpellFlag") && CheckInventory("BlinkSpellFlag")){
			SetFont("FUSICN21");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("FiraSpellFlag") && CheckInventory("TemperSpellFlag")){
			SetFont("FUSICN5");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("AeroraSpellFlag") && CheckInventory("ThundaraSpellFlag")){
			SetFont("FUSICN2");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("AeroraSpellFlag") && CheckInventory("FocusSpellFlag")){
			SetFont("FUSICN22");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("BlizzaraSpellFlag") && CheckInventory("ThundaraSpellFlag")){
			SetFont("FUSICN15");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("BlizzaraSpellFlag") && CheckInventory("FocusSpellFlag")){
			SetFont("FUSICN25");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("SlowSpellFlag") && CheckInventory("ThundaraSpellFlag")){
			SetFont("FUSICN4");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("SlowSpellFlag") && CheckInventory("FocusSpellFlag")){
			SetFont("FUSICN37");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("WateraSpellFlag") && CheckInventory("ThundaraSpellFlag")){
			SetFont("FUSICN14");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("WateraSpellFlag") && CheckInventory("TemperSpellFlag")){
			SetFont("FUSICN6");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("ThundaraSpellFlag") && CheckInventory("FocusSpellFlag")){
			SetFont("FUSICN33");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("BlinkSpellFlag") && CheckInventory("TemperSpellFlag")){
			SetFont("FUSICN18");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("TemperSpellFlag") && CheckInventory("FocusSpellFlag")){
			SetFont("FUSICN9");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("AeroraSpellFlag") && CheckInventory("BlinkSpellFlag")){
			SetFont("FUSICN28");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("ThundaraSpellFlag") && CheckInventory("BlinkSpellFlag")){
			SetFont("FUSICN29");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("FiraSpellFlag") && CheckInventory("SlowSpellFlag")){
			SetFont("FUSICN11");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("FiraSpellFlag") && CheckInventory("AeroraSpellFlag")){
			SetFont("FUSICN16");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("FiraSpellFlag") && CheckInventory("BlizzaraSpellFlag")){
			SetFont("FUSICN32");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("AeroraSpellFlag") && CheckInventory("TemperSpellFlag")){
			SetFont("FUSICN8");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("AeroraSpellFlag") && CheckInventory("WateraSpellFlag")){
			SetFont("FUSICN3");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("FocusSpellFlag") && CheckInventory("WateraSpellFlag")){
			SetFont("FUSICN17");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("FocusSpellFlag") && CheckInventory("FiraSpellFlag")){
			SetFont("FUSICN12");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("BlizzaraSpellFlag") && CheckInventory("TemperSpellFlag")){
			SetFont("FUSICN10");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("ThundaraSpellFlag") && CheckInventory("TemperSpellFlag")){
			SetFont("FUSICN7");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("SlowSpellFlag") && CheckInventory("BlinkSpellFlag")){
			SetFont("FUSICN34");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("SlowSpellFlag") && CheckInventory("BlizzaraSpellFlag")){
			SetFont("FUSICN20");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("SlowSpellFlag") && CheckInventory("WateraSpellFlag")){
			SetFont("FUSICN19");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("AeroraSpellFlag") && CheckInventory("BlizzaraSpellFlag")){
			SetFont("FUSICN26");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("WateraSpellFlag") && CheckInventory("BlinkSpellFlag")){
			SetFont("FUSICN30");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("BlinkSpellFlag") && CheckInventory("FocusSpellFlag")){
			SetFont("FUSICN1");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("BlinkSpellFlag") && CheckInventory("BlizzaraSpellFlag")){
			SetFont("FUSICN31");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("BlizzaraSpellFlag") && CheckInventory("WateraSpellFlag")){
			SetFont("FUSICN24");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("AeroraSpellFlag") && CheckInventory("SlowSpellFlag")){
			SetFont("FUSICN35");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);}
		else if(CheckInventory("SlowSpellFlag") && CheckInventory("TemperSpellFlag")){
			SetFont("FUSICN36");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);
			}
	else{
		SetFont("FUSICN38"); //If you ever see this in-game without any indication of new fusions tell Zomo immediately.
		HudMessage(s:"A"; HUDMSG_FADEOUT, 75, CR_BLACK,0.02, 0.45, 0.75,0.5);
		}
	Delay(7);
	restart;}
	}
}


//734
Script "SubZeroFieldHandler" (VOID)
{
int SZField = 0;
	If(xyzDistance(0,125) > 400) // && FiringPlayer!=Target_TID
		{
		SZField = 1;
		}
	SetResultValue(SZField);
}

//735
Script "RedMageSprintHandler" (Int WhichCase, Int SprintTID, Int RenderTID) //Simple TID assignment for Lightning Sprint and Space Render
{
Switch(WhichCase)
	{
	Case 0: //Lightning Sprint
		{
		SetActivatorToTarget(0);
		Int LSprintTID = (SprintTID + 2000);
		//Print(d:LSprintTID);
		SetResultValue(LSprintTID);
		}
	Case 1: //Space Render
		{
		SetActivatorToTarget(0);
		Int SRenderTID = (RenderTID + 2000);
		//Print(d:SpaceRenderTID);
		SetResultValue(SRenderTID);
		}
	}
}


function int getNthDigit (int number, int base, int n)
{
int result = ((number / pow(base, n - 1)) % base);
return result;
}

function int GetTotalDigits (int number)
{
int result;
if (number >= 100) {result = 3;}
else if (number >= 10) {result = 2;}
else {result = 1;}
return result;
}

function int pow (int x, int n)
{
	int y = 1;
	while (n-- > 0) y *= x;
	return y;
}

#define MATH_E 178145
function int logN (int x, int base)
{
    if (!base) base = MATH_E;
    int integer = 0;

    if (x < 1.0 && base < 1.0) return 0;
      
    while (x < 1)
    {
        integer -= 1;
        x = FixedMul (x, base);
    }
    while (x >= base)
    {
        integer += 1;
        x = FixedDiv (x, base);
    }
    int partial = 0.5;
    x = FixedMul (x, x);
    int decimal = 0;
    while (partial > 1) // Actually 0.0000152587890625
    {
        if (x >= base)
        {
            decimal += partial;
            x = FixedDiv (x, base);
        }
        partial = FixedMul (partial, 0.5);
        x = FixedMul (x, x);
    }
    return ((integer << 16) + decimal);
}

//403
script "MCSpeedSetScript" (int speed)
{
	switch (speed) {
	//Devion Glide
		case 1:
		  SetActorProperty(0,APROP_SPEED,1.25);
		  break;
		case 0:
		  SetActorProperty(0,APROP_SPEED,1.0);
		  break;
		default:
		  SetActorProperty(0,APROP_SPEED,1.0);
		  break;
	}
}

//404
script "MCJumpSetScript" (int jump)
{
	switch (jump) {
	//Glace
		case 1:
		  SetActorProperty(0,APROP_JumpZ, GetActorProperty(0, APROP_JumpZ)+5 * 1.0);
		  break;
		case 0:
		  SetActorProperty(0,APROP_JumpZ, GetActorProperty(0, APROP_JumpZ)-5.0);
		  break;
	}
}

//405
script "SlickAmbientSound" (void)
{

if(CheckInventory("NoAmmoSoundCooldown")==0){
	LocalAmbientSound("slick/empty",128);
	GiveInventory("NoAmmoSoundCooldown", 1);
}

If(PlayerIsBot(PlayerNumber()))
	{
	/*
	if(CheckInventory("TimeStopperWep")>0)
		{
		TakeInventory("TimeStopperWep",1);
		GiveInventory("MegaBuster",1);
		SetWeapon("MegaBuster");
		}
	*/
	if(CheckInventory("SkullBarrierWep")>0)
		{
		TakeInventory("SkullBarrierWep",1);
		GiveInventory("MegaBuster",1);
		SetWeapon("MegaBuster");
		}
	SetPlayerProperty(0,1,4);
	ACS_Execute(992, 0, 255);
	Delay(15);
	SetPlayerProperty(0,0,4);
	}
}

//YD's Classes's Health Script
//315
Script "YDC_HealthScript" (int Magic, int HPBoost) //Health related script
{
	int h = max(PlayerHealth(),0);
	switch(Magic)
	{
		Case 0://Return Health
			if(HPBoost == 7777){
				log(s:"HP: ",i:h);
				terminate;
			}
			SetResultValue(CheckInventory("Health"));
			break;
		Case 1://Check current HP, if less than max health, return true
			if(h < GetActorProperty(0, APROP_SPAWNHEALTH)){SetResultValue(1);}
			else{SetResultValue(0);}
			break;
		Case 2://Basic Healing
			if(h <= 0){terminate;}
			int HPAdd2 = min(h + HPBoost,GetActorProperty(0, APROP_SPAWNHEALTH));
			SetActorProperty(0, APROP_HEALTH, HPAdd2);
			break;
		Case 3://Percentage Healing
			if(h <= 0){terminate;}
			int SpawnHP3 = GetActorProperty(0, APROP_SPAWNHEALTH);
			int PCT3;
			if(GetCVAR("YD_NoHealingScale")){
				PCT3 = HPBoost;
			}
			else{
				PCT3 = round(HPBoost * 0.01 * SpawnHP3 + h);
			}
			int HPAdd3 = min(PCT3 + h,SpawnHP3);
			SetActorProperty(0, APROP_HEALTH, HPAdd3);
			break;
		Case 7://Change Health to this exact amount
			if(h <= 0){terminate;}
			SetActorProperty(0, APROP_HEALTH, HPBoost);
			break;
		Case 9://Burning damage
			if (GetActorProperty(0,APROP_HEALTH) >= HPBoost+1){
				SetActorProperty(0, APROP_HEALTH, (GetActorProperty(0,APROP_HEALTH)-HPBoost));
				break;
			}
			SetResultValue(2);
			break;
		Case 66://Returns MaxHp
			SetResultValue(GetActorProperty(0, APROP_SPAWNHEALTH));
			break;
	}

}

//=======|Heal Ramp|
//679
Script "HealRamp" (Int HealMin, Int HealMax)
{
int timeMax = 175;
int rampPerc = (GetActorPowerupTics(0,"HealRamper")*100)/timeMax;
//log(i:GetActorPowerupTics(0,"HealStall_A"));
//log(i:rampPerc);
int output = (HealMax*(100 - rampPerc))/100;
//log(i:output);

if (output < HealMin){output = HealMin;}
SetResultValue(output);
}



// Make's Smoke less Opaque for teams
//1023
script "TeamSmokeHandler"  (VOID) CLIENTSIDE
{

    int cln = consolePlayerNumber();
	int FiringPlayer= ACS_ExecuteWithResult(257, 0) - 1000;
    if( GetPlayerInfo(cln, PLAYERINFO_TEAM) == GetPlayerInfo(FiringPlayer, PLAYERINFO_TEAM))//(PlayerClass((consolePlayerNumber() >= SUPPORTSTART) && PlayerClass((consolePlayerNumber()) <= SUPPORTEND)))
    {
       SetActorProperty(0,APROP_ALPHA,0.1);
    }
}

Script "Target_GetTID" (Void)
{
//log(i:ActivatorTID());
SetActivator(0,AAPTR_TARGET);
//log(i:ActivatorTID());
SetResultValue(ActivatorTID());
}


function int abs (int x)
{
    if (x < 0)
        return -x;

    return x;
}

Script "MC_CoinScript" (int Coins)
{
CheckInventory("CoinItem");
SetResultValue(Coins);
}

Script "OBJECTTALLY" (int BaseNum)
{
int MasterTID = ACS_ExecuteWithResult(257, 0);

// objects work within the 3000's range, the playernumber being in the 100th place
//Naturally this means a single player can only have up to 9 items
if (BaseNum < 3000){BaseNum = 3000;}

int ObjTIDBase = BaseNum + ((MasterTID-1000)*100);
bool TIDset = false;
int TIDCount;

while(!TIDset)
{
if(ThingCount(T_NONE,ObjTIDBase+TIDCount))
	{
	//log(s:"Object with TID ",i:ObjTIDBase+TIDCount,s:" Already exists");
	TIDCount++;
	//continue;
	}
	Else
	{
	//log(s:"This object's TID is now ",i:ObjTIDBase+TIDCount,s:"!");
	Thing_ChangeTID(0,ObjTIDBase+TIDCount);
	//log(s:"This object's TID is now ",i:ActivatorTID(),s:"!");
	TIDset = true;
	}
}

for(int i; i < 9; i++)
{
SetUserVariable(ObjTIDBase+i,"User_Tally",GetUserVariable(ObjTIDBase+i,"User_Tally")+1);
//log(s:"Object with TID ",i:ObjTIDBase+i,s:" Now has a tally of ",i:GetUserVariable(ObjTIDBase+i,"User_Tally"));
}
//--
}

Script "OBJECTDEATHTALLY" (VOID)
{
int MasterTID = ACS_ExecuteWithResult(257, 0);
int ObjTIDBase = 3000 + ((MasterTID-1000)*100);

// ment to be called when an object dies, this makes all objects drop their tally by 1. if their tally was above
//the one that died. this is only for if the object was destroyed, not terminated due to being overtallied
int ObjTID = ActivatorTID();
int EmptyTally = GetUserVariable(ObjTID,"User_Tally");
//log(s:"object ",i:ObjTID ,s:" was destroyed!");

for(int i; i < 9; i++)
{
	if(GetUserVariable(ObjTIDBase+i,"User_Tally") > 1)
	{
	SetUserVariable(ObjTIDBase+i,"User_Tally",GetUserVariable(ObjTIDBase+i,"User_Tally")-1);
	//log(s:"Object with TID ",i:ObjTIDBase+i,s:" Now has a new tally of ",i:GetUserVariable(ObjTIDBase+i,"User_Tally"));
	}
}

}

Script "DEPLPOYABLEDELETER" (int gone) DISCONNECT
{
//log(i:gone);
int ObjTIDBase = 3000 + ((gone)*100);
int ObjTIDBase2 = 4000 + ((gone)*100);
int ObjTIDBase3 = 4000 + ((gone)+1000);
int ObjTIDBase4 = 5000 + ((gone)+1000);
for(int i; i < 9; i++)
{
	SetActorState (ObjTIDBase+i, "Perish");
	SetActorState (ObjTIDBase2+i, "Perish");

}

	SetActorState (ObjTIDBase3, "Perish");
	SetActorState (ObjTIDBase4, "Perish");
}

script "TIDCOUNTER" (int Tid)
{
int output = 0;
if (thingcount(T_NONE,Tid) > 0){output = 1;}

setresultvalue(output);
}

//Bika's health percent script
Script "ActorHPPercent" (int TargTID)
{
int HealthPercent;
int PlayerCurrentHealth;// = GetActorProperty(0,APROP_Health);
int PlayerMaxHealth;// = GetActorProperty(0,APROP_SpawnHealth);

	if(GetActorProperty(TargTID,APROP_HEALTH)<=0){PlayerCurrentHealth = 1; }
		Else{PlayerCurrentHealth = GetActorProperty(TargTID,APROP_Health);}
	if(GetActorProperty(TargTID,APROP_SpawnHealth)<=0){PlayerMaxHealth = 1; }
		Else{PlayerMaxHealth = GetActorProperty(TargTID,APROP_SpawnHealth);}
		
HealthPercent = ((PlayerCurrentHealth*100)/PlayerMaxHealth);
SetResultValue(HealthPercent);
}

Script "ActorHPPercent2" (int perval,int TargTID) //Get current Health at percentage
{
int HealthPercent;
int PlayerCurrentHealth;// = GetActorProperty(TargTID,APROP_Health);
int PlayerMaxHealth;// = GetActorProperty(TargTID,APROP_SpawnHealth);

	if(GetActorProperty(TargTID,APROP_HEALTH)<=0){PlayerCurrentHealth = 1; }
		Else{PlayerCurrentHealth = GetActorProperty(TargTID,APROP_Health);}
	if(GetActorProperty(TargTID,APROP_SpawnHealth)<=0){PlayerMaxHealth = 1; }
		Else{PlayerMaxHealth = GetActorProperty(TargTID,APROP_SpawnHealth);}
		
HealthPercent = (fixeddiv(PlayerMaxHealth,100)*perval) >> 16;
SetResultValue(HealthPercent);
}

Script "HealthGenSyncher" (void) 
{
	//int Player = ACS_NamedExecuteWithResult("core_gettarget",0);
	int BaseTID = ActivatorTID()+1000;
	
	// Loop if the base is active still
	while(GetActorProperty(BaseTID, APROP_HEALTH)>0
	&& ThingCount(T_NONE,BaseTID) > 0
	){
		Delay(1);
	}
	
	// Remove
	Thing_Remove(0);
}

script "HitLogger" ENTER
{
//log(s:"Bing!");
	int HPMax = GetActorProperty(0, APROP_Health);
	int SpawnDivideZeroBug;
		int HPP = 0; // "Health Point Past/Future"
		int HPF = 0;
		int HPC = 0; // "HP Calculation"
		While(GetActorProperty(0, APROP_Health) > 0)
		{
			SpawnDivideZeroBug = GetActorProperty(0, APROP_SpawnHealth);
			if(SpawnDivideZeroBug == 0)
			{
				HPP = GetActorProperty(0, APROP_Health);
				delay(1); // Things are occuring... o_o values being damaged/healed
				HPF = GetActorProperty(0, APROP_Health); // let's check what happened! now!
			}
			else
			{
				HPP = GetActorProperty(0, APROP_Health);
				delay(1); // Things are occuring... o_o values being damaged/healed
				HPF = GetActorProperty(0, APROP_Health); // let's check what happened! now!
			}
			HPC = HPP-HPF;
			 
				if(HPC != 0 && HPC >= 1)
				{
				
				SetUserVariable(0,"user_HitMemory",HPC);
				//log(s: "last hit was  ", i:HPC);
				HPC = 0;
					
					

				}
			}
							//log(s:"Bang!!");
}

script "RespawnHitLogger" RESPAWN
{
ACS_NamedExecuteAlways("HitLogger",0);
}

script "HitKnockBack" (int force)
{
int pusher = ACS_NamedExecuteWithResult("TargetGrab");
int Vang = VectorAngle(GetActorX(0) - GetActorX(pusher), GetActorY(0) - GetActorY(pusher)) >> 8;
//log(i:pusher);
//log(i:Vang);
//log(i:GetActorX(0));
//log(i:GetActorX(pusher));
//log(i:GetActorX(0) - GetActorX(pusher));
ThrustThing(Vang, force, 1, 0);
}

Script "TargetGrab" (Void)
{
//log(i:ActivatorTID());
SetActivator(0,AAPTR_TARGET);
//log(i:ActivatorTID());
SetResultValue(ActivatorTID());
}
