//Add to Bronze.acs, because I cannot compile it ~Bika

#library "TANK"
#include "zcommon.acs"
//██████████████████████████████████████████TankLib████████████████████████████████████████

int ServerMAX = 32;


function bool checkForMovement(int buttons) {
	int result = 1;

	if (buttons & BT_MOVERIGHT){
		result+=2;
	}
	if (buttons & BT_MOVELEFT){
		result+=4;
	}
	if (buttons & BT_BACK){
		result+=8;
	}
	if (buttons & BT_FORWARD){
		result+=16;
	}

	return(result);
}

// Pitch between 2 points
function int VectorPitch (Int TID1, Int TID2, int ZAdjust)
{
	If(ZAdjust != 0){ZAdjust = ZAdjust << 16;}
	Return(VectorAngle(xydistance(TID1, TID2)<<16,GetActorZ(TID1)-(GetActorZ(TID2)-ZAdjust)));
}

// Return absolute values
function int abs (int x)
{
    if (x < 0)
	{
        return -x;
	}
    return x;
}

function int sqrt8(int number)
{
	if(number <= 3)
	{
		if(number > 0)
		{
			return 1;
		}
		return 0;
	}

	int oldAns = number >> 1,                     // initial guess
	    newAns = (oldAns + number / oldAns) >> 1; // first iteration

	// main iterative method
	while(newAns < oldAns)
	{
		oldAns = newAns;
		newAns = (oldAns + number / oldAns) >> 1;
	}

	return oldAns;
}

// Distance measuring functions
function int xyzDistance (int tid1, int tid2)
{
	int x, y, z, d;
	x = GetActorX(tid1) - GetActorX(tid2) >> 16; // Convert fixed point to integer
	y = GetActorY(tid1) - GetActorY(tid2) >> 16;
	z = GetActorZ(tid1) - GetActorZ(tid2) >> 16;
	d = sqrt8( x*x + y*y + z*z );
	return d;
}

function int xyDistance (int tid1, int tid2)
{
	int x, y, d;
	x = GetActorX(tid1) - GetActorX(tid2) >> 16;
	y = GetActorY(tid1) - GetActorY(tid2) >> 16;
	d = sqrt8( x*x + y*y );
	return d;
}

function int zdistance (int tid1, int tid2)
{
	int z;
	z = GetActorZ(tid1) - GetActorZ(tid2) >> 16;
	return z;
}

function int GetTargetAngle (int tid1, int tid2)
{
    int x, y;
    x = GetActorX(tid2) - GetActorX(tid1);
    y = GetActorY(tid2) - GetActorY(tid1);
    return VectorAngle(x, y);
}

function int fdistanceVal (int x, int y, int z)
{
	int len;

	int ang = vectorangle(x,y);
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
	else len = fixeddiv(x, cos(ang));

	ang = vectorangle(len, z);
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(z, sin(ang));
	else len = fixeddiv(len, cos(ang));

	return len;
}

//██████████████████████████████████████████TankTools████████████████████████████████████████



script "TANKT_SetProp" (int prop, int val) {SetActorProperty(0,prop,val);}
script "TANKT_GetProp" (int TID, int prop) {SetResultValue(GetActorProperty(TID,prop));}
script "TANKT_GetDistanceFromOwner" (void) {SetResultValue( xyzDistance(0,ACS_ExecuteWithResult(257)) );}

script "TANKT_ChangeUserVar" (int Which, int Value) {
	Switch(Which) {
	Case 1:
	SetUserVariable(0,"user_TV",GetUserVariable(0,"user_TV")+Value);
	break;
	Case 2:
	SetUserVariable(0,"user_TTSPD",GetUserVariable(0,"user_TTSPD")+Value);
	break;
	}
}

script "TANKT_ProjectilePort" (int maxDist) //Borrowed from cbm
{
int target = ACS_ExecuteWithResult(257);

if(getActorProperty(0,APROP_HEALTH) <= 0 || getActorProperty(target,APROP_HEALTH) <= 0) {
	terminate;
}

maxDist = maxDist << 16;

int xDiff = getActorX(0) - getActorX(target);
int yDiff = getActorY(0) - getActorY(target);
int zDiff = getActorZ(0) - getActorZ(target);

if(fdistanceVal(xDiff,yDiff,zDiff) > maxDist) {
	terminate;
}

while (true) {
	xDiff += getActorVelX(0);
	yDiff += getActorVelY(0);
	zDiff += getActorVelZ(0);
	SetActorVelocity(target, xDiff, yDiff, zDiff, 0, 0);
	//Log(s:"MOVED");
	//GiveActorInventory(target,"ProjectilePorting",1);

	delay(1);

	if(getActorProperty(0,APROP_HEALTH) <= 0 || getActorProperty(target,APROP_HEALTH) <= 0 || CheckInventory("ProjectilePortDead")) {
		//Log(s:"Someone is Dead");
		GiveActorInventory(target,"ProjectilePortDead",1);
		//TakeActorInventory(target,"ProjectilePorting",1);
		terminate;
	}
	xDiff = getActorX(0) - getActorX(target);
	yDiff = getActorY(0) - getActorY(target);
	zDiff = getActorZ(0) - getActorZ(target);
	if(fdistanceVal(xDiff,yDiff,zDiff) > maxDist) {
		//Log(s:"Someone is too far");
		SetActorState(0,"Death",1);
		GiveActorInventory(target,"ProjectilePortDead",1);
		//TakeActorInventory(target,"ProjectilePorting",1);
		terminate;
	}

}
}

//██████████████████████████████████████████Tank████████████████████████████████████████

//====================
script "TANK_CHECKBUTTONS" (void) {SetResultValue(checkForMovement(GetPlayerInput(-1, INPUT_BUTTONS)));}
script "TANK_CHANGEANGLE" (int tid, int newangle) {SetActorAngle(tid,GetActorAngle(tid)+newangle);}

script "TANK_SETTANKSPECIES" (int enable)
{
	//int zview = GetActorProperty(0,APROP_ViewHeight) >> 16;
	//Log(i:zview); //Original ZView is 41 and not 42... derp. 
	
	Switch(enable) {
	Case 1:
	SetActorProperty(0,APROP_ViewHeight,64.0);
	break;
	Case 0:
	SetActorProperty(0,APROP_ViewHeight,41.0);
	break;
	}
}

script "TANK_CHECKTARGET" (void)//This is for projectiles to check if their owner spectated, disconnected, or is dead.
{
	SetActivatorToTarget(0);
	//log(s:"Player #? ",i:PlayerInGame(PlayerNumber()));
	//log(s:"Is Dead? ",i:CheckInventory("IsDead"));
	//log(s:"In Game? ",i:PlayerInGame(PlayerNumber()));
	if(PlayerNumber() == -1 || CheckInventory("IsDead") || !PlayerInGame(PlayerNumber())){
		SetResultValue(0);
	}
}

script "TANK_SPEEDSTER" (int tid, int tspeed)
{
	Switch(tspeed) {
	
	Case 1:
		GiveActorInventory(tid,"Tank_SpeedForwB",1); 
	break;
	Case 2:
		GiveActorInventory(tid,"Tank_SpeedBackB",1); 
	break;
	}
}
