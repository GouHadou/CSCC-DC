

Script "CSACS_Heal" (int Mode, int HealAmount)
{
int MaxHealth = GetActorProperty(0,APROP_SPAWNHEALTH);
If(MaxHealth==0){MaxHealth=100;}
if(Mode==1)
{
if(GetActorProperty(0,APROP_Health)>=MaxHealth){SetResultValue(1);}
else{SetResultValue(0);}
terminate;
}
HealThing(HealAmount,MaxHealth);
}

Script "CSACS_HealthSet" (void) CLIENTSIDE
{
int StateSet = 0;
If(CheckActorInventory(consolePlayerNumber()+1000,"CannotUseHealth")){SetActorState(0,"Bonehead"); StateSet=1;}
If(StateSet==0){SetActorState(0,"DefaultState");}
}

//Scripts for weapon / item transparency 
int CLASSFLAG = 0;
int OLDCLASSFLAG = -1;

Script CSACS_PICKUPENTER ENTER CLIENTSIDE
{
OLDCLASSFLAG = CLASSFLAG;
CLASSFLAG = PlayerClass(ConsolePlayerNumber());
}

Script CSACS_PICKUPRESPAWN RESPAWN CLIENTSIDE
{
ACS_ExecuteAlways(CSACS_PICKUPENTER, 0);
}

Script "CSACS_ITEMSET" (void) CLIENTSIDE
{
int StateSet = 0;
	If(CheckActorClass(consolePlayerNumber()+1000,"MegamanCSCC")){SetActorState(0,"MegaSpawn"); StateSet=1;}
	If(CheckActorClass(consolePlayerNumber()+1000,"LaggyBlazko")){SetActorState(0,"LaggyBlazkoSpawn"); StateSet=2;}
	If(CheckActorClass(consolePlayerNumber()+1000,"Beed28")){SetActorState(0,"Beed28Spawn"); StateSet=3;}
	If(CheckActorClass(consolePlayerNumber()+1000,"BlazeClass")){SetActorState(0,"BlazeSpawn"); StateSet=4;}
	If(CheckActorClass(consolePlayerNumber()+1000,"Ukiyama")){SetActorState(0,"UkiSpawn"); StateSet=5;}
	If(CheckActorClass(consolePlayerNumber()+1000,"Gizmo")){SetActorState(0,"GizmoSpawn"); StateSet=6;}
	If(CheckActorClass(consolePlayerNumber()+1000,"HumanDestroyer")){SetActorState(0,"HumanDestroyerSpawn"); StateSet=7;}
	If(CheckActorClass(consolePlayerNumber()+1000,"CopyRobot")){SetActorState(0,"CopySpawn"); StateSet=8;}
	If(CheckActorClass(consolePlayerNumber()+1000,"KorbyClass")){SetActorState(0,"KorbySpawn"); StateSet=9;}
	If(CheckActorClass(consolePlayerNumber()+1000,"Zard1084class")){SetActorState(0,"ZardSpawn"); StateSet=10;}
	If(CheckActorClass(consolePlayerNumber()+1000,"Smash")){SetActorState(0,"SmashSpawn"); StateSet=11;}
	If(CheckActorClass(consolePlayerNumber()+1000,"Hilman170499")){SetActorState(0,"HilmanSpawn"); StateSet=12;}
	If(StateSet==0){SetActorState(0,"OtherSpawn");}
}


int JumpAngByte;
int TotalAngles;

script CSACS_WALLKICK (void)
{
	SetActivatorToTarget(0);
	JumpAngByte = 0;
	TotalAngles = 0;
    if (CheckInventory("WallN") && !CheckInventory("WallS")) {
	    //ThrustThingZ(0,50,0,1);
		JumpAngByte += 128;
		TotalAngles++;
	}
    if ( !CheckInventory("WallN")) {
		JumpAngByte += 256;
		TotalAngles++;
	}
	if (CheckInventory("WallE") && !CheckInventory("WallW")) {
	    JumpAngByte += 64;
		TotalAngles++;
	}
	if (CheckInventory("WallW") && !CheckInventory("WallE")) {
	    JumpAngByte += 192;
		TotalAngles++;
	}
	if (!CheckInventory("WallN") && CheckInventory("WallE") && !CheckInventory("WallW")) { //Somewhere, a mathematician is crying.
	    JumpAngByte = 32;
		TotalAngles = 1;
	}
	if (TotalAngles>0) {
		JumpAngByte /= TotalAngles;

			ThrustThing(((GetActorAngle(0) >> 8) + JumpAngByte),10,1);
		
	}
}

//Common ACS Scripts


Script "InputGrab" (int ButtonCheck)
{
bool Output;
int InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
Switch (ButtonCheck)
	{
	Case 1:
	if (InputButtons & Bt_Attack){Output = True;}
	Break;
	Case 2:
	if (InputButtons & Bt_AltAttack){Output = True;}
	Break;
	Case 3:
	if (InputButtons & Bt_Crouch){Output = True;}
	Break;
	Case 4:
	if (InputButtons & Bt_Reload){Output = True;}
	Break;
	Case 5:
	if (InputButtons & Bt_Zoom){Output = True;}
	Break;
	Case 6:
	if (InputButtons & Bt_User1){Output = True;}
	Break;
	Case 7:
	if (InputButtons & Bt_User2){Output = True;}
	Break;
	Case 8:
	if (InputButtons & Bt_User3){Output = True;}
	Break;
	Case 9:
	if (InputButtons & Bt_User4){Output = True;}
	Break;
	}


SetResultValue(Output);
}

script "HitKnockBack" (int force)
{
int pusher = ACS_NamedExecuteWithResult("GetTarget", AAPTR_TARGET);
int Vang = VectorAngle(GetActorX(0) - GetActorX(pusher), GetActorY(0) - GetActorY(pusher)) >> 8;
ThrustThing(Vang, force, 1, 0);
}

Script "GetTarget" (int Target)
{
SetActivator(0, Target);
int ReturnTID = ActivatorTID();
SetResultValue(ReturnTID);
}

Function int CSCCButtonCheck (int NewButtons, int OldButtons, int Which)
{
	int ButtonNow = NewButtons & Which;
	int ButtonOld = OldButtons & Which;
	If(ButtonNow > ButtonOld){Return 1;}
	If(ButtonNow < ButtonOld){Return 2;}
	If(ButtonNow > 0 &&  ButtonOld > 0){Return 3;}
	Return 0;
}

Function int CurrentSpeedXYZ (int Target)
{
int VelX = GetActorVelX(Target) >> 16;
int VelY = GetActorVelY(Target) >> 16;
int VelZ = GetActorVelZ(Target) >> 16;
int Travel = sqrt8(VelX*VelX + VelY*VelY + VelZ*VelZ);
return Travel;
}

Function void LimitSpeed (int SpeedLimit)
{
int TheLimit;
If(CurrentSpeedXYZ(ActivatorTID()) > SpeedLimit)
	{
	TheLimit = FixedDiv(SpeedLimit, CurrentSpeedXYZ(ActivatorTID()));	
	SetActorVelocity(0, FixedMul(GetActorVelX(0), TheLimit), FixedMul(GetActorVelY(0), TheLimit), GetActorVelZ(0),FALSE, FALSE);
	}

}
//End Common Scripts