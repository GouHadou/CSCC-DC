#library "THEMOD2"
#include "zcommon.acs"

int ServerMAX = 32;

//======| Area heal script distance falloff
Script 682 (int HealRadius, int HealRadiusMin, int HealAmount)
{
int PlayersTeam;
int Target_TID;
int TargetCount;
int FiringPlayer;
Bool OwnerOnly;
If(ActivatorTID() == 0)
	{
	FiringPlayer= ACS_ExecuteWithResult(257, 0); //Returns the target of the activator
	}
else
	{
	FiringPlayer=ActivatorTID();
	}

PlayersTeam = GetPlayerInfo(FiringPlayer-1000, PLAYERINFO_TEAM);

if (ACS_ExecuteWithResult(975, 1) == 0) {OwnerOnly = true;}

//==== Heal Allies	
int HealRate;
int HealTotal;
int Targ_Dist;
For(int q = 0;q < ServerMax; q++)
	{
	
	
	If(!PlayerInGame(q)){continue;}
	if(checkWeapon("RespawnCamera")&&GetActorProperty(0,APROP_HEALTH)>0){continue;}
	If(PlayersTeam != GetPlayerInfo(q, PLAYERINFO_TEAM)){continue;}
	If(OwnerOnly && (q+1000 != FiringPlayer)) {continue;}
	Target_TID = q+1000;
	Targ_Dist = xyzDistance(0,Target_TID);
	If((xyzDistance(0,Target_TID) < HealRadius) )
		{
		//now to calculate their healing based on how far they are from the source
		if (Targ_Dist <= HealRadiusMin){HealRate = 100;}
		else{HealRate = noneg(((((Targ_Dist- HealRadiusMin)*100)/HealRadius) - 100)*-1);}
		HealTotal = (HealAmount*HealRate)/100;
		//log(s:"Healed ",i:HealTotal);
		GiveActorInventory(Target_TID,"Health",HealTotal );
		GiveActorInventory(Target_TID,"AreaHealEffect",1 );
		}
	}
}

//Formerly 723
script "RadiusGiveSQ" (int GiveID, int GiveRadius, int GiveType)
{ 
int Target_TID;
int Target_Distance;
int FiringPlayer;
int PlayersTeam;
int IsTeamGame = ACS_ExecuteWithResult(975, 1);
//if(GiveRadius == 0){terminate;}

// GiveType 1 = self + Friendlies
// GiveType 2 = Friendlies only
// GiveType 3 = Self only
// GiveType 4 = Enemies only
// GiveType 5 = self + Enemies
// GiveType 6 = All but self
// GiveType 7 = All
//if(GiveType << 1){GiveType = 1;}
//if(GiveType >> 7){GiveType = 7;}
If(ActivatorTID() <= 999)
	{
	FiringPlayer= ACS_ExecuteWithResult(257, 0); //Returns the target of the activator
	}
else
	{
	FiringPlayer=ActivatorTID();
	}
PlayersTeam = GetPlayerInfo(FiringPlayer-1000, PLAYERINFO_TEAM);
For(int i = 0;i < ServerMax; i++)
	{
	If(!PlayerInGame(i)){continue;}
	If(IsTeamGame)
		{
		switch(GiveType)
			{
			case 1:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM)){continue;}
			Break;
			
			case 2:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM) || (PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) && i == FiringPlayer-1000)){continue;}
			Break;
			
			case 3:
			If(PlayersTeam != GetPlayerInfo(i, PLAYERINFO_TEAM) || (i != FiringPlayer-1000)){continue;}
			Break;

			case 4:
			If(PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) || i == FiringPlayer-1000){continue;}
			Break;
			
			case 5:
			If(PlayersTeam == GetPlayerInfo(i, PLAYERINFO_TEAM) && i != FiringPlayer-1000){continue;}
			Break;
			
			case 6:
			If(i == FiringPlayer-1000){continue;}	
			Break;
			}
		}
	else
		{
		switch(GiveType)
			{
			case 1:
			If(i != FiringPlayer-1000){continue;}
			Break;
			
			case 2:
			If(i == FiringPlayer-1000 || i != FiringPlayer-1000){continue;}
			Break;
			
			case 3:
			If(i != FiringPlayer-1000){continue;}
			Break;
			
			case 4:
			If(i == FiringPlayer-1000){continue;}
			Break;
			
			Default:
			//If(i == FiringPlayer-1000 || i != FiringPlayer-1000){continue;}
			Break;
			}
		}
	Target_TID = i+1000;
	If(xyzDistance(0,Target_TID) < GiveRadius) // && FiringPlayer!=Target_TID
		{
		GiveActorInventory(Target_TID,"PackageID", GiveID);
		GiveActorInventory(Target_TID,"GivePackage", 1);
		}
	}
}

function int xyzDistance (int tid1, int tid2)
{
	int x, y, z, d;
	x = GetActorX(tid1) - GetActorX(tid2) >> 16; // Convert fixed point to integer
	y = GetActorY(tid1) - GetActorY(tid2) >> 16;
	z = GetActorZ(tid1) - GetActorZ(tid2) >> 16;
	d = sqrt8( x*x + y*y + z*z );
	return d;
}

function int sqrt8(int number)
{
	if(number <= 3)
	{
		if(number > 0)
		{
			return 1;
		}
		return 0;
	}

	int oldAns = number >> 1,                     // initial guess
	    newAns = (oldAns + number / oldAns) >> 1; // first iteration

	// main iterative method
	while(newAns < oldAns)
	{
		oldAns = newAns;
		newAns = (oldAns + number / oldAns) >> 1;
	}

	return oldAns;
}

Function int NoNeg(int Numb)
{
int numfinal;
	if(Numb > 0){numfinal = Numb;}
	else{numfinal = 0;}
return numfinal;
}