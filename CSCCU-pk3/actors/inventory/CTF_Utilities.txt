//[+]========================================================================[+]
//------------------------------|Wall Jumping|----------------------------------
//[+]========================================================================[+]
//Wall Jumping, borrowed from YD Classes.
Actor JumpCanclerDisable : Once {}

Actor StaminaFlag : Ammo {+INVENTORY.IGNORESKILL Inventory.MaxAmount 500}

Actor WallJumperX
{
-SOLID
+NOGRAVITY
+NOBLOCKMAP
+NOINTERACTION
+NOTARGETSWITCH
Height 0
Radius 0
scale 2.5
States
{
Spawn:
TNT1 A 0
TNT1 A 1 A_JumpIfInTargetInventory("IsDead",1,"Death")
TNT1 A 0 A_JumpIfInTargetInventory("WallJump",1,"Boost")
TNT1 A 1 A_JumpIfInTargetInventory("AdaptorFlag",1,"Spawn")
stop
Boost:
TNT1 A 0 A_TakeFromTarget("WallJump",1)
Goto BoostLoop1
BoostLoop1:
TNT1 A 1 A_GiveToTarget("WallJumpGive")
TNT1 A 1 A_GiveToTarget("NoWallJump",1)
TNT1 A 0 A_JumpIfInTargetInventory("AdaptorFlag",1,"BoostLoop2")
stop
BoostLoop2:
TNT1 A 0 A_GiveInventory("WallJumpCount",1)
TNT1 A 0 A_JumpIfInventory("WallJumpCount",34,"BoostEnd")
TNT1 A 1 A_TakeFromTarget("NoWallJump",999)
TNT1 A 0 A_JumpIfInventory("WallJumpCount",9,"BoostLoop2")
TNT1 A 0 A_JumpIfInTargetInventory("AdaptorFlag",1,"BoostLoop2")
stop
BoostEnd:
TNT1 A 7 A_TakeInventory("WallJumpCount",999)
TNT1 A 1 A_TakeFromTarget("NoWallJump",999)
TNT1 A 0 A_TakeFromTarget("WallJump",1)
GoTo Spawn
Death:
TNT1 A 0
Stop
}
}

//[+]========================================================================[+]
//----------------------------|Shield Breaking|---------------------------------
//[+]========================================================================[+]
//Makes shields that are coded similarly to ProtoShieldX able to break.
//Make sure to make the weapon check for ShieldBroken. If present, make it not spawn
//the shield.
Actor ShieldDamage : Inventory {Inventory.MaxAmount 1000}

Actor ShieldBreak : CustomInventory
{
+INVENTORY.AUTOACTIVATE
States
{
Use:
TNT1 A 0
TNT1 A 0 A_PlaySoundEx("misc/modcratebroken","Body")
TNT1 A 0 A_TakeInventory("ShieldDamage",9999)
TNT1 A 0 A_GiveInventory("ShieldBroken",1)
Stop
}
}

Actor ShieldBroken : PowerUp {PowerUp.Duration -15 Inventory.MaxAmount 1}

//[+]========================================================================[+]
//------------------------------|Item System|-----------------------------------
//[+]========================================================================[+]
//The idea for this one is to allow players with different controls to be able to
//use items as a replacement for the ability buttons. They will still be able to
//activate the Abilities via their respective controls even if the Item System
//is on.
/*

Commented out to be addressed later ~Bika

Actor Ability1Item : CustomInventory
{
+INVBAR
+COUNTITEM
Scale 2.0
Inventory.Amount 1
Inventory.MaxAmount 1
Inventory.PickUpSound "item/1up"
Inventory.Icon "ABL1A0"
States
{
Spawn:
TNT1 A 1
Loop
Use:
TNT1 A 0 A_GiveInventory("User1_Trigger",1)
Fail
}
}

Actor Ability2Item : Ability1Item
{
Inventory.Icon "ABL2A0"
States
{
Use:
TNT1 A 0 A_GiveInventory("User2_Trigger",1)
Fail
}
}

Actor Ability3Item : Ability1Item
{
Inventory.Icon "ABL3A0"
States
{
Use:
TNT1 A 0 A_GiveInventory("User3_Trigger",1)
Fail
}
}

Actor Ability4Item : Ability1Item
{
Inventory.Icon "ABL4A0"
States
{
Use:
TNT1 A 0 A_GiveInventory("User4_Trigger",1)
Fail
}
}
*/
//[+]========================================================================[+]
//---------------------------|Additional Binds|--------------------------------
//[+]========================================================================[+]

//the idea is to have weapons check for any of these items in their ready state
//so that they jump to the associated state to perform an additional attack, 
//remember to remove these afterwards or else the attack will loop.
actor User1_Trigger : Inventory
{
inventory.amount 1
Inventory.MaxAmount 2
}

actor User2_Trigger : Inventory
{
inventory.amount 1
Inventory.MaxAmount 2
}

actor User3_Trigger : Inventory
{
inventory.amount 1
Inventory.MaxAmount 2
}

actor User4_Trigger : Inventory
{
inventory.amount 1
Inventory.MaxAmount 2
}

// this engages the script for each person.
actor InputChecker : CustomInventory
{ states {
pickup:
TNT1 A 0 ACS_ExecuteAlways(725,0) // Exact damage display
//---
stop}}


//[+]========================================================================[+]
//---------------------------|Grappling Hook|--------------------------------
//[+]========================================================================[+]

actor Grappler : FastProjectile
{
PROJECTILE
Radius 5
Height 5
scale 3
+NOTARGETSWITCH
+SKYEXPLODE
+LOOKALLAROUND
+NOINTERACTION
+THRUACTOrS
Reactiontime 53
speed 135
gravity 2.5
wallbouncefactor 0.6
States
{
Spawn:
MBAL A 0
NAPA A 0 //A_GiveToTarget("WireOutFlag",1)
WADP D 1
WADP D 1 A_Changeflag("NOINTERACTION",0)
spawn2: 
WADP D 0
WADP D 1
WADP D 0 A_jumpifcloser(1500,"Spawn2")
WADP D 0 //A_TakeFromTarget("WireOutFlag",9)
Stop
Death:
WADP D 0
WADP D 0 //A_Spawnitemex("SnoipWireHooked",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS)
stop
Finish:
NAPA A 0 A_GiveToTarget("GravityUp")
NAPA A 0 //A_TakeFromTarget("WireOutFlag",9)
NAPA B 0 A_GiveToTarget("GrapplerHooked")
NAPA A 0
stop
}
}

actor GrapplerHooked
{
PROJECTILE
Radius 5
Height 5
scale 3
+CANBOUNCEWATER
+SKYEXPLODE
+LOOKALLAROUND
+NOINTERACTION
+THRUACTOrS
Reactiontime 53
speed 135
gravity 2.5
wallbouncefactor 0.6
States
{
Spawn:
NAPA A 0
NAPA A 0 A_Stop
NAPA A 0 A_GiveToTarget("GravityDown")
WADP D 1 ACS_ExecuteAlways(726,0,40)
TNT1 A 0 A_PlaySoundEx("weapon/WireAdp", "weapon")
NAPA A 0 A_Jumpifcloser(80,"Finish")
NAPA A 0 A_GiveInventory("Reeltimer",1)
NAPA A 0 A_Jumpifinventory("Reeltimer",70,"Finish")
NAPA A 0 A_JumpIfTargetInLOS("Spawn",0)
Finish:
NAPA A 0
NAPA A 0 A_GiveToTarget("GravityUp")
NAPA A 0 //A_TakeFromTarget("WireOutFlag",9)
NAPA B 0 //A_GiveToTarget("SnoipWireCooldown")
NAPA A 0
stop
}
}


actor GravityUp : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_Changeflag("NOGRAVITY",0)
TNT1 A 0 A_scalevelocity(0.5)
TNT1 A 0 ThrustThingz(0,60,0,0)
stop
Nope:
//BUST B 0 A_PlaySoundEx("weapon/heat3","Item")
TNT1 A 0
stop
}
}


actor GravityDown : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_Changeflag("NOGRAVITY",1)
stop
Nope:
//BUST B 0 A_PlaySoundEx("weapon/heat3","Item")
TNT1 A 0
stop
}
}

actor Reeltimer : inventory
{
inventory.amount 1
inventory.maxamount 70 //3 seconds
}


actor ReconPowerup : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_Giveinventory("ReconPower",1)
SWBM A 0 ACS_ExecuteAlways(727,0)
stop
Nope:
//BUST B 0 A_PlaySoundEx("weapon/heat3","Item")
TNT1 A 0
stop
}
}

Actor ReconPower : powerup
{powerup.duration -30}


//[+]========================================================================[+]
//------------------------------|Health Manager|--------------------------------
//[+]========================================================================[+]
//The health manager makes it where, at 45% Health, the actor gains a flag,
//allowing for coders to do various things.

Actor HealthManager : CustomInventory
{
+INVENTORY.AUTOACTIVATE
States
{
Use:
TNT1 A 0 ACS_NamedExecuteAlways("LightSBarHandler",0)
Stop
}
}

Actor LowOnHealth : Once {}


//For graphics to show up for Main+Alt/Alt+Main gimmicks
Actor LeftClickFlag : Inventory{}
Actor RightClickFlag : Inventory{}